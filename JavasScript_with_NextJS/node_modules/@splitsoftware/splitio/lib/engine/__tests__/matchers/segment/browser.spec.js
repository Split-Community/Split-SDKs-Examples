"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _types = require("../../../matchers/types");

var _matchers = _interopRequireDefault(require("../../../matchers"));

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
(0, _tapeCatch.default)('MATCHER SEGMENT / should return true ONLY when the segment is defined inside the segment storage', /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(assert) {
    var segment, matcherTrue, matcherFalse;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            segment = 'employees';
            matcherTrue = (0, _matchers.default)({
              type: _types.types.SEGMENT,
              value: segment
            }, {
              segments: {
                isInSegment: function isInSegment(segmentName) {
                  return segment === segmentName;
                }
              }
            });
            matcherFalse = (0, _matchers.default)({
              type: _types.types.SEGMENT,
              value: segment + 'asd'
            }, {
              segments: {
                isInSegment: function isInSegment(segmentName) {
                  return segment === segmentName;
                }
              }
            });
            _context.t0 = assert;
            _context.next = 6;
            return matcherTrue();

          case 6:
            _context.t1 = _context.sent;

            _context.t0.true.call(_context.t0, _context.t1, 'segment found in mySegments list');

            _context.t2 = assert;
            _context.next = 11;
            return matcherFalse();

          case 11:
            _context.t3 = _context.sent;

            _context.t2.false.call(_context.t2, _context.t3, 'segment not found in mySegments list');

            assert.end();

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());