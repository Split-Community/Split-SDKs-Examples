"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _ioredis = _interopRequireDefault(require("ioredis"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _InRedis = _interopRequireDefault(require("../../../SegmentCache/InRedis"));

var _Keys = _interopRequireDefault(require("../../../Keys"));

var _settings = _interopRequireDefault(require("../../../../utils/settings"));

var settings = (0, _settings.default)({
  storage: {
    type: 'REDIS'
  }
});
(0, _tapeCatch.default)('SEGMENT CACHE IN Redis / suite', /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(assert) {
    var connection, keys, cache;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            connection = new _ioredis.default(settings.storage.options);
            keys = new _Keys.default(settings);
            cache = new _InRedis.default(keys, connection);
            _context.next = 5;
            return cache.flush();

          case 5:
            _context.next = 7;
            return cache.addToSegment('mocked-segment', ['a', 'b', 'c']);

          case 7:
            _context.next = 9;
            return cache.setChangeNumber('mocked-segment', 1);

          case 9:
            _context.next = 11;
            return cache.removeFromSegment('mocked-segment', ['d']);

          case 11:
            _context.t0 = assert;
            _context.next = 14;
            return cache.getChangeNumber('mocked-segment');

          case 14:
            _context.t1 = _context.sent;
            _context.t2 = _context.t1 === 1;

            _context.t0.ok.call(_context.t0, _context.t2);

            _context.next = 19;
            return cache.addToSegment('mocked-segment', ['d', 'e']);

          case 19:
            _context.next = 21;
            return cache.removeFromSegment('mocked-segment', ['a', 'c']);

          case 21:
            _context.t3 = assert;
            _context.next = 24;
            return cache.getChangeNumber('mocked-segment');

          case 24:
            _context.t4 = _context.sent;
            _context.t5 = _context.t4 === 1;

            _context.t3.ok.call(_context.t3, _context.t5);

            _context.t6 = assert;
            _context.next = 30;
            return cache.isInSegment('mocked-segment', 'a');

          case 30:
            _context.t7 = _context.sent;
            _context.t8 = _context.t7 === false;

            _context.t6.ok.call(_context.t6, _context.t8);

            _context.t9 = assert;
            _context.next = 36;
            return cache.isInSegment('mocked-segment', 'b');

          case 36:
            _context.t10 = _context.sent;
            _context.t11 = _context.t10 === true;

            _context.t9.ok.call(_context.t9, _context.t11);

            _context.t12 = assert;
            _context.next = 42;
            return cache.isInSegment('mocked-segment', 'c');

          case 42:
            _context.t13 = _context.sent;
            _context.t14 = _context.t13 === false;

            _context.t12.ok.call(_context.t12, _context.t14);

            _context.t15 = assert;
            _context.next = 48;
            return cache.isInSegment('mocked-segment', 'd');

          case 48:
            _context.t16 = _context.sent;
            _context.t17 = _context.t16 === true;

            _context.t15.ok.call(_context.t15, _context.t17);

            _context.t18 = assert;
            _context.next = 54;
            return cache.isInSegment('mocked-segment', 'e');

          case 54:
            _context.t19 = _context.sent;
            _context.t20 = _context.t19 === true;

            _context.t18.ok.call(_context.t18, _context.t20);

            connection.quit();
            assert.end();

          case 59:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
(0, _tapeCatch.default)('SEGMENT CACHE IN Redis / register segments', /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(assert) {
    var connection, keys, cache, segments;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            connection = new _ioredis.default(settings.storage.options);
            keys = new _Keys.default(settings);
            cache = new _InRedis.default(keys, connection);
            _context2.next = 5;
            return cache.flush();

          case 5:
            _context2.next = 7;
            return cache.registerSegment('s1');

          case 7:
            _context2.next = 9;
            return cache.registerSegment('s2');

          case 9:
            _context2.next = 11;
            return cache.registerSegments(['s2', 's3', 's4']);

          case 11:
            _context2.next = 13;
            return cache.getRegisteredSegments();

          case 13:
            segments = _context2.sent;
            ['s1', 's2', 's3', 's4'].forEach(function (s) {
              return assert.ok(segments.indexOf(s) !== -1);
            });
            connection.quit();
            assert.end();

          case 17:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());