"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testAuthRetries = testAuthRetries;
exports.testSSERetries = testSSERetries;
exports.testSdkDestroyWhileAuthSuccess = testSdkDestroyWhileAuthSuccess;
exports.testSdkDestroyWhileAuthRetries = testSdkDestroyWhileAuthRetries;

var _splitchangesSince = _interopRequireDefault(require("../mocks/splitchanges.since.-1.json"));

var _splitchangesSince2 = _interopRequireDefault(require("../mocks/splitchanges.since.1457552620999.json"));

var _authPushDisabled = _interopRequireDefault(require("../mocks/auth.pushDisabled.json"));

var _authPushEnabledNode = _interopRequireDefault(require("../mocks/auth.pushEnabled.node.json"));

var _authPushBadToken = _interopRequireDefault(require("../mocks/auth.pushBadToken.json"));

var _testUtils = require("../testUtils");

var _eventSourceMock = _interopRequireWildcard(require("../../sync/__tests__/mocks/eventSourceMock"));

var _node = require("../../services/getEventSource/node");

var _index = require("../../index");

var _settings = _interopRequireDefault(require("../../utils/settings"));

var baseUrls = {
  sdk: 'https://sdk.push-initialization-retries/api',
  events: 'https://events.push-initialization-retries/api',
  auth: 'https://auth.push-initialization-retries/api'
};
var config = {
  core: {
    authorizationKey: '<fake-token-push-1>'
  },
  scheduler: {
    featuresRefreshRate: 0.2,
    segmentsRefreshRate: 0.2,
    metricsRefreshRate: 3000,
    impressionsRefreshRate: 3000,
    authRetryBackoffBase: 0.1,
    streamingReconnectBackoffBase: 0.1
  },
  urls: baseUrls,
  startup: {
    eventsFirstPushWindow: 3000
  },
  streamingEnabled: true // debug: true,

};
var settings = (0, _settings.default)(config);
/**
 * Sequence of calls:
 *  0.0 secs: initial SyncAll (/splitChanges, /segmentChanges/*) and first auth attempt (fail due to bad token)
 *  0.0 secs: polling (/splitChanges, /segmentChanges/*)
 *  0.1 secs: second auth attempt (fail due to network error)
 *  0.2 secs: polling (/splitChanges, /segmentChanges/*)
 *  0.3 secs: third auth attempt (success but push disabled)
 *  0.4 secs: polling (/splitChanges, /segmentChanges/*)
 */

function testAuthRetries(fetchMock, assert) {
  var start,
      splitio,
      client,
      ready = false;
  fetchMock.getOnce(settings.url('/auth'), function (url, opts) {
    if (!opts.headers['Authorization']) assert.fail('`/auth` request must include `Authorization` header');
    assert.pass('first auth attempt');
    return {
      status: 200,
      body: _authPushBadToken.default
    };
  });
  fetchMock.getOnce(settings.url('/auth'), {
    throws: new TypeError('Network error')
  });
  fetchMock.getOnce(settings.url('/auth'), function (url, opts) {
    if (!opts.headers['Authorization']) assert.fail('`/auth` request must include `Authorization` header');
    var lapse = Date.now() - start;
    var expected = settings.scheduler.authRetryBackoffBase * Math.pow(2, 0) + settings.scheduler.authRetryBackoffBase * Math.pow(2, 1);
    assert.true((0, _testUtils.nearlyEqual)(lapse, expected), 'third auth attempt (aproximately in 0.3 seconds from first attempt)');
    return {
      status: 200,
      body: _authPushDisabled.default
    };
  });
  fetchMock.get(new RegExp("".concat(settings.url('/segmentChanges/'), ".*")), {
    status: 200,
    body: {
      since: 10,
      till: 10,
      name: 'segmentName',
      added: [],
      removed: []
    }
  });
  fetchMock.getOnce(settings.url('/splitChanges?since=-1'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, 0), 'initial sync');
    return {
      status: 200,
      body: _splitchangesSince.default
    };
  });
  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), function () {
    assert.true(ready, 'client ready before first polling fetch');
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, 0), 'fallback to polling');
    return {
      status: 200,
      body: _splitchangesSince2.default
    };
  });
  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, settings.scheduler.featuresRefreshRate), 'polling');
    return {
      status: 200,
      body: _splitchangesSince2.default
    };
  });
  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, settings.scheduler.featuresRefreshRate * 2), 'keep polling since auth success buth with push disabled');
    client.destroy().then(function () {
      assert.end();
    });
    return {
      status: 200,
      body: _splitchangesSince2.default
    };
  });
  start = Date.now();
  splitio = (0, _index.SplitFactory)(config);
  client = splitio.client();
  client.on(client.Event.SDK_READY, function () {
    ready = true;
  });
}
/**
 * Sequence of calls:
 *  0.0 secs: initial SyncAll (/splitChanges, /segmentChanges/*), auth success and sse fail
 *  0.1 secs: second sse attempt
 *  0.2 secs: polling (/splitChanges, /segmentChanges/*)
 *  0.3 secs: third sse attempt (success), syncAll (/splitChanges, /segmentChanges/*)
 */


function testSSERetries(fetchMock, assert) {
  (0, _node.__setEventSource)(_eventSourceMock.default);
  var start,
      splitio,
      client,
      ready = false;
  var expectedTimeToSSEsuccess = settings.scheduler.streamingReconnectBackoffBase * Math.pow(2, 0) + settings.scheduler.streamingReconnectBackoffBase * Math.pow(2, 1);
  var expectedSSEurl = "".concat(settings.url('/sse'), "?channels=NzM2MDI5Mzc0_NDEzMjQ1MzA0Nw%3D%3D_segments,NzM2MDI5Mzc0_NDEzMjQ1MzA0Nw%3D%3D_splits,%5B%3Foccupancy%3Dmetrics.publishers%5Dcontrol_pri,%5B%3Foccupancy%3Dmetrics.publishers%5Dcontrol_sec&accessToken=").concat(_authPushEnabledNode.default.token, "&v=1.1&heartbeats=true");
  var sseattempts = 0;
  (0, _eventSourceMock.setMockListener)(function (eventSourceInstance) {
    assert.equal(eventSourceInstance.url, expectedSSEurl, 'SSE url is correct');

    if (sseattempts < 2) {
      eventSourceInstance.emitError('some error');
    } else {
      var lapse = Date.now() - start;
      assert.true((0, _testUtils.nearlyEqual)(lapse, expectedTimeToSSEsuccess), 'third auth attempt (aproximately in 0.3 seconds from first attempt)');
      eventSourceInstance.emitOpen();
    }

    sseattempts++;
  });
  fetchMock.getOnce(settings.url('/auth'), function (url, opts) {
    if (!opts.headers['Authorization']) assert.fail('`/auth` request must include `Authorization` header');
    assert.pass('auth success');
    return {
      status: 200,
      body: _authPushEnabledNode.default
    };
  });
  fetchMock.get(new RegExp("".concat(settings.url('/segmentChanges/'), ".*")), {
    status: 200,
    body: {
      since: 10,
      till: 10,
      name: 'segmentName',
      added: [],
      removed: []
    }
  });
  fetchMock.getOnce(settings.url('/splitChanges?since=-1'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, 0), 'initial sync');
    return {
      status: 200,
      body: _splitchangesSince.default
    };
  });
  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), function () {
    assert.true(ready, 'client ready before first polling fetch');
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, 0), 'fallback to polling');
    return {
      status: 200,
      body: _splitchangesSince2.default
    };
  });
  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, settings.scheduler.featuresRefreshRate), 'polling');
    return {
      status: 200,
      body: _splitchangesSince2.default
    };
  });
  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, expectedTimeToSSEsuccess), 'sync due to success SSE connection');
    client.destroy().then(function () {
      assert.end();
    });
    return {
      status: 200,
      body: _splitchangesSince2.default
    };
  });
  start = Date.now();
  splitio = (0, _index.SplitFactory)(config);
  client = splitio.client();
  client.on(client.Event.SDK_READY, function () {
    ready = true;
  });
}
/**
 * Assert that if the main client is destroyed while authentication request is in progress and successes, the SDK doesn't open the SSE connection
 *
 * Sequence of calls:
 *  0.0 secs: initial SyncAll (/splitChanges, /mySegments/*) and first auth attempt
 *  0.05 secs: client destroyed
 *  0.1 secs: first auth attempt response (success) but not SSE connection opened since push was closed
 *  0.2 secs: test finished
 */


function testSdkDestroyWhileAuthSuccess(fetchMock, assert) {
  (0, _node.__setEventSource)(_eventSourceMock.default);
  (0, _eventSourceMock.setMockListener)(function (eventSourceInstance) {
    assert.fail('unexpected EventSource request with url: ' + eventSourceInstance.url);
  });
  var splitio,
      client,
      ready = false;
  fetchMock.getOnce(settings.url('/auth'), {
    status: 200,
    body: _authPushEnabledNode.default
  }, {
    delay: 100
  });
  fetchMock.get(new RegExp("".concat(settings.url('/segmentChanges/'), ".*")), {
    status: 200,
    body: {
      since: 10,
      till: 10,
      name: 'segmentName',
      added: [],
      removed: []
    }
  });
  fetchMock.getOnce(settings.url('/splitChanges?since=-1'), {
    status: 200,
    body: _splitchangesSince.default
  });
  setTimeout(function () {
    client.destroy().then(function () {
      setTimeout(function () {
        assert.true(ready, 'client was ready before being destroyed');
        assert.end();
      }, 150); // finish the test 50 millis after the third auth attempt would have been done if the client wasn't destroyed
    });
  }, 50); // destroy the client 50 millis before we get a response for the auth request

  splitio = (0, _index.SplitFactory)(config);
  client = splitio.client();
  client.on(client.Event.SDK_READY, function () {
    ready = true;
  });
}
/**
 * Asserts that if the client is destroyed while authentication request is in progress and fails, the SDK doesn't schedule an auth retry
 *
 * Sequence of calls:
 *  0.0 secs: initial SyncAll (/splitChanges, /mySegments/*) and first auth attempt (fail due to bad token)
 *  0.0 secs: polling (/splitChanges, /mySegments/*)
 *  0.1 secs: second auth attempt request
 *  0.15 secs: client destroyed
 *  0.2 secs: second auth attempt response (fail due to network error)
 *  0.4 secs: NO third auth attempt
 *  0.45 secs: test finished
 */


function testSdkDestroyWhileAuthRetries(fetchMock, assert) {
  var splitio,
      client,
      ready = false;
  fetchMock.getOnce(settings.url('/auth'), {
    status: 200,
    body: _authPushBadToken.default
  });
  fetchMock.getOnce(settings.url('/auth'), {
    throws: new TypeError('Network error')
  }, {
    delay: 100
  });
  fetchMock.get(new RegExp("".concat(settings.url('/segmentChanges/'), ".*")), {
    status: 200,
    body: {
      since: 10,
      till: 10,
      name: 'segmentName',
      added: [],
      removed: []
    }
  });
  fetchMock.getOnce(settings.url('/splitChanges?since=-1'), {
    status: 200,
    body: _splitchangesSince.default
  });
  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), {
    status: 200,
    body: _splitchangesSince2.default
  });
  fetchMock.get(new RegExp('.*'), function (url) {
    assert.fail('unexpected GET request with url: ' + url);
  });
  setTimeout(function () {
    client.destroy().then(function () {
      setTimeout(function () {
        assert.true(ready, 'client was ready before being destroyed');
        assert.end();
      }, 300); // finish the test 50 millis after the third auth attempt would have been done if the client wasn't destroyed
    });
  }, 150); // destroy the client 50 millis before we get a response for the second auth attempt

  splitio = (0, _index.SplitFactory)(config);
  client = splitio.client();
  client.on(client.Event.SDK_READY, function () {
    ready = true;
  });
}