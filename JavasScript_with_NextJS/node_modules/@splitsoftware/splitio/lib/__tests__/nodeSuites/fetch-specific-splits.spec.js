"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = fetchSpecificSplits;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ = require("../../");

var _fetchSpecificSplits = require("../mocks/fetchSpecificSplits");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var baseConfig = {
  core: {
    authorizationKey: '<fake-token-push-1>'
  },
  scheduler: {
    featuresRefreshRate: 0.01
  },
  streamingEnabled: false
};

function fetchSpecificSplits(fetchMock, assert) {
  assert.plan(_fetchSpecificSplits.splitFilters.length);

  var _loop = function _loop(i) {
    var urls = {
      sdk: 'https://sdkurl' + i
    };

    var config = _objectSpread(_objectSpread({}, baseConfig), {}, {
      sync: {
        splitFilters: _fetchSpecificSplits.splitFilters[i]
      },
      urls: urls
    });

    if (_fetchSpecificSplits.groupedFilters[i]) {
      // tests where validateSplitFilters executes normally
      var queryString = _fetchSpecificSplits.queryStrings[i] || '';
      var factory;
      fetchMock.getOnce(urls.sdk + '/splitChanges?since=-1' + queryString, {
        status: 200,
        body: {
          splits: [],
          since: -1,
          till: 1457552620999
        }
      });
      fetchMock.getOnce(urls.sdk + '/splitChanges?since=1457552620999' + queryString, {
        status: 200,
        body: {
          splits: [],
          since: 1457552620999,
          till: 1457552620999
        }
      });
      fetchMock.getOnce(urls.sdk + '/splitChanges?since=1457552620999' + queryString, function () {
        factory.client().destroy().then(function () {
          assert.pass("splitFilters #".concat(i));
        });
        return {
          status: 200,
          body: {
            splits: [],
            since: 1457552620999,
            till: 1457552620999
          }
        };
      });
      factory = (0, _.SplitFactory)(config);
    } else {
      // tests where validateSplitFilters throws an exception
      try {
        (0, _.SplitFactory)(config);
      } catch (e) {
        assert.equal(e.message, _fetchSpecificSplits.queryStrings[i]);
      }
    }
  };

  for (var i = 0; i < _fetchSpecificSplits.splitFilters.length; i++) {
    _loop(i);
  }
}