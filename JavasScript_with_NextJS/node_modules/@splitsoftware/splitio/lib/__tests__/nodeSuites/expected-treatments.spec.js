"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _ = require("../../");

var _fs = _interopRequireDefault(require("fs"));

var _readline = _interopRequireDefault(require("readline"));

var _splitchangesReal = _interopRequireDefault(require("../mocks/splitchanges.real.json"));

function _default(_x, _x2, _x3, _x4) {
  return _ref.apply(this, arguments);
}

function _ref() {
  _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(config, settings, fetchMock, assert) {
    var splitio, client, parser;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            fetchMock.get({
              url: settings.url('/splitChanges?since=-1'),
              overwriteRoutes: true
            }, {
              status: 200,
              body: _splitchangesReal.default
            });
            splitio = (0, _.SplitFactory)(config);
            client = splitio.client();
            _context.next = 5;
            return client.ready();

          case 5:
            parser = _readline.default.createInterface({
              terminal: false,
              input: _fs.default.createReadStream(require.resolve('../mocks/expected-treatments.csv'))
            });
            parser.on('line', function (line) {
              var parts = line.toString('utf8').split(',');

              if (parts.length === 2) {
                var key = parts[0];
                var treatment = parts[1];
                assert.equal(client.getTreatment(key, 'real_split'), treatment, "Checking expected treatment \"".concat(treatment, "\" for key: ").concat(key));
              }
            }).on('close', function () {
              return client.destroy().then(assert.end);
            });

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _ref.apply(this, arguments);
}