"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _fetchMock = _interopRequireDefault(require("./testUtils/fetchMock"));

var _settings = _interopRequireDefault(require("../utils/settings"));

var _evaluations = _interopRequireDefault(require("./nodeSuites/evaluations.spec"));

var _events = _interopRequireDefault(require("./nodeSuites/events.spec"));

var _impressions = _interopRequireDefault(require("./nodeSuites/impressions.spec"));

var _impressionsDebug = _interopRequireDefault(require("./nodeSuites/impressions.debug.spec"));

var _metrics = _interopRequireDefault(require("./nodeSuites/metrics.spec"));

var _impressionsListener = _interopRequireDefault(require("./nodeSuites/impressions-listener.spec"));

var _expectedTreatments = _interopRequireDefault(require("./nodeSuites/expected-treatments.spec"));

var _manager = _interopRequireDefault(require("./nodeSuites/manager.spec"));

var _ipAddressesSetting = _interopRequireDefault(require("./nodeSuites/ip-addresses-setting.spec"));

var _ipAddressesSettingDebug = _interopRequireDefault(require("./nodeSuites/ip-addresses-setting.debug.spec"));

var _readyPromise = _interopRequireDefault(require("./nodeSuites/ready-promise.spec"));

var _fetchSpecificSplits = _interopRequireDefault(require("./nodeSuites/fetch-specific-splits.spec"));

var _splitchangesSince = _interopRequireDefault(require("./mocks/splitchanges.since.-1.json"));

var _splitchangesSince2 = _interopRequireDefault(require("./mocks/splitchanges.since.1457552620999.json"));

var settings = (0, _settings.default)({
  core: {
    authorizationKey: '<fake-token>'
  },
  streamingEnabled: false
});
var config = {
  core: {
    authorizationKey: '<fake-token-1>'
  },
  scheduler: {
    featuresRefreshRate: 1,
    segmentsRefreshRate: 1,
    metricsRefreshRate: 3000,
    // for now I don't want to publish metrics during E2E run.
    impressionsRefreshRate: 3000 // for now I don't want to publish impressions during E2E run.

  },
  streamingEnabled: false
};
var key = 'facundo@split.io';

_fetchMock.default.get(settings.url('/splitChanges?since=-1'), {
  status: 200,
  body: _splitchangesSince.default
});

_fetchMock.default.get(settings.url('/splitChanges?since=1457552620999'), {
  status: 200,
  body: _splitchangesSince2.default
});

_fetchMock.default.get(new RegExp("".concat(settings.url('/segmentChanges'), "/*")), {
  status: 200,
  body: {
    'name': 'segment',
    'added': [],
    'removed': [],
    'since': 1,
    'till': 1
  }
});

_fetchMock.default.post(settings.url('/testImpressions/bulk'), 200);

_fetchMock.default.post(settings.url('/testImpressions/count'), 200);

(0, _tapeCatch.default)('## Node JS - E2E CI Tests ##', /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(assert) {
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            /* Check client evaluations. */
            assert.test('E2E / In Memory', _evaluations.default.bind(null, config, key));
            /* Check impressions */

            assert.test('E2E / Impressions', _impressions.default.bind(null, key, _fetchMock.default));
            assert.test('E2E / Impressions Debug Mode', _impressionsDebug.default.bind(null, key, _fetchMock.default));
            assert.test('E2E / Impressions listener', _impressionsListener.default);
            /* Check metrics */

            assert.test('E2E / Metrics', _metrics.default.bind(null, key, _fetchMock.default));
            /* Check events in memory */

            assert.test('E2E / Events', _events.default.bind(null, _fetchMock.default));
            /* Check that a treatment is the expected one for the key */

            assert.test('E2E / Expected Treatments by key', _expectedTreatments.default.bind(null, config, settings, _fetchMock.default));
            /* Manager basic tests */

            assert.test('E2E / Manager basics', _manager.default.bind(null, settings, _fetchMock.default));
            /* Check IP address and Machine name headers when IP address setting is enabled and disabled */

            assert.test('E2E / IP Addresses Setting', _ipAddressesSetting.default.bind(null, _fetchMock.default));
            assert.test('E2E / IP Addresses Setting Debug', _ipAddressesSettingDebug.default.bind(null, _fetchMock.default));
            /* Validate readiness with ready promises */

            assert.test('E2E / Ready promise', _readyPromise.default.bind(null, key, _fetchMock.default));
            /* Validate fetching specific splits */

            assert.test('E2E / Fetch specific splits', _fetchSpecificSplits.default.bind(null, _fetchMock.default));
            assert.end();

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());