"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testSynchronization = testSynchronization;

var _splitchangesSince = _interopRequireDefault(require("../mocks/splitchanges.since.-1.json"));

var _splitchangesSince2 = _interopRequireDefault(require("../mocks/splitchanges.since.1457552620999.json"));

var _splitchangesSince1457552620999Till1457552649999SPLIT_UPDATE = _interopRequireDefault(require("../mocks/splitchanges.since.1457552620999.till.1457552649999.SPLIT_UPDATE.json"));

var _splitchangesSince1457552649999Till1457552650000SPLIT_KILL = _interopRequireDefault(require("../mocks/splitchanges.since.1457552649999.till.1457552650000.SPLIT_KILL.json"));

var _mysegmentsNicolasSplitIo = _interopRequireDefault(require("../mocks/mysegments.nicolas@split.io.json"));

var _mysegmentsNicolasSplitIoMock = _interopRequireDefault(require("../mocks/mysegments.nicolas@split.io.mock2.json"));

var _mysegmentsMarcioSplitIo = _interopRequireDefault(require("../mocks/mysegments.marcio@split.io.json"));

var _messageSPLIT_UPDATE = _interopRequireDefault(require("../mocks/message.SPLIT_UPDATE.1457552649999.json"));

var _messageSPLIT_UPDATE2 = _interopRequireDefault(require("../mocks/message.SPLIT_UPDATE.1457552620999.json"));

var _messageMY_SEGMENTS_UPDATENicolasSplitIo = _interopRequireDefault(require("../mocks/message.MY_SEGMENTS_UPDATE.nicolas@split.io.1457552640000.json"));

var _messageMY_SEGMENTS_UPDATEMarcioSplitIo = _interopRequireDefault(require("../mocks/message.MY_SEGMENTS_UPDATE.marcio@split.io.1457552645000.json"));

var _messageMY_SEGMENTS_UPDATEMarcioSplitIo2 = _interopRequireDefault(require("../mocks/message.MY_SEGMENTS_UPDATE.marcio@split.io.1457552646000.json"));

var _messageSPLIT_KILL = _interopRequireDefault(require("../mocks/message.SPLIT_KILL.1457552650000.json"));

var _authPushEnabledNicolasSplitIo = _interopRequireDefault(require("../mocks/auth.pushEnabled.nicolas@split.io.json"));

var _authPushEnabledNicolasSplitIoMarcioSplitIo = _interopRequireDefault(require("../mocks/auth.pushEnabled.nicolas@split.io.marcio@split.io.json"));

var _testUtils = require("../testUtils");

var _includes = _interopRequireDefault(require("lodash/includes"));

var _eventSourceMock = _interopRequireWildcard(require("../../sync/__tests__/mocks/eventSourceMock"));

var _index = require("../../index");

var _settings = _interopRequireDefault(require("../../utils/settings"));

// Replace original EventSource with mock
window.EventSource = _eventSourceMock.default;
var userKey = 'nicolas@split.io';
var otherUserKey = 'marcio@split.io';
var baseUrls = {
  sdk: 'https://sdk.push-synchronization/api',
  events: 'https://events.push-synchronization/api',
  auth: 'https://auth.push-synchronization/api'
};
var config = {
  core: {
    authorizationKey: '<fake-token-push-1>',
    key: userKey
  },
  urls: baseUrls,
  streamingEnabled: true // debug: true,

};
var settings = (0, _settings.default)(config);
var MILLIS_SSE_OPEN = 100;
var MILLIS_FIRST_SPLIT_UPDATE_EVENT = 200;
var MILLIS_SECOND_SPLIT_UPDATE_EVENT = 300;
var MILLIS_MYSEGMENT_UPDATE_EVENT = 400;
var MILLIS_SPLIT_KILL_EVENT = 500;
var MILLIS_NEW_CLIENT = 600;
var MILLIS_SECOND_SSE_OPEN = 700;
var MILLIS_MY_SEGMENTS_UPDATE_WITH_PAYLOAD = 800;
var MILLIS_MY_SEGMENTS_UPDATE_WITH_EMPTY_PAYLOAD = 900;
/**
 * Sequence of calls:
 *  0.0 secs: initial SyncAll (/splitChanges, /mySegments/*), auth, SSE connection
 *  0.1 secs: SSE connection opened -> syncAll (/splitChanges, /mySegments/*)
 *  0.2 secs: SPLIT_UPDATE event -> /splitChanges
 *  0.3 secs: SPLIT_UPDATE event with old changeNumber
 *  0.4 secs: MY_SEGMENTS_UPDATE event -> /mySegments/nicolas@split.io
 *  0.5 secs: SPLIT_KILL event -> /splitChanges
 *  0.6 secs: creates a new client -> new auth and SSE connection
 *  0.7 secs: SSE connection opened -> syncAll (/splitChanges, /mySegments/*)
 *  0.8 secs: MY_SEGMENTS_UPDATE event for new client (with payload).
 *  0.9 secs: MY_SEGMENTS_UPDATE event for new client (with empty payload). client destroyed
 */

function testSynchronization(fetchMock, assert) {
  assert.plan(27);
  fetchMock.reset();
  var start, splitio, client, otherClient; // mock SSE open and message events

  (0, _eventSourceMock.setMockListener)(function (eventSourceInstance) {
    var expectedSSEurl = "".concat(settings.url('/sse'), "?channels=NzM2MDI5Mzc0_NDEzMjQ1MzA0Nw%3D%3D_NTcwOTc3MDQx_mySegments,NzM2MDI5Mzc0_NDEzMjQ1MzA0Nw%3D%3D_splits,%5B%3Foccupancy%3Dmetrics.publishers%5Dcontrol_pri,%5B%3Foccupancy%3Dmetrics.publishers%5Dcontrol_sec&accessToken=").concat(_authPushEnabledNicolasSplitIo.default.token, "&v=1.1&heartbeats=true");
    assert.equals(eventSourceInstance.url, expectedSSEurl, 'EventSource URL is the expected');
    /* events on first SSE connection */

    setTimeout(function () {
      eventSourceInstance.emitOpen();
    }, MILLIS_SSE_OPEN); // open SSE connection after 0.1 seconds

    setTimeout(function () {
      assert.equal(client.getTreatment('whitelist'), 'not_allowed', 'evaluation of initial Split');
      client.once(client.Event.SDK_UPDATE, function () {
        var lapse = Date.now() - start;
        assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_FIRST_SPLIT_UPDATE_EVENT), 'SDK_UPDATE due to SPLIT_UPDATE event');
        assert.equal(client.getTreatment('whitelist'), 'allowed', 'evaluation of updated Split');
      });
      eventSourceInstance.emitMessage(_messageSPLIT_UPDATE.default);
    }, MILLIS_FIRST_SPLIT_UPDATE_EVENT); // send a SPLIT_UPDATE event with a new changeNumber after 0.2 seconds

    setTimeout(function () {
      eventSourceInstance.emitMessage(_messageSPLIT_UPDATE2.default);
    }, MILLIS_SECOND_SPLIT_UPDATE_EVENT); // send a SPLIT_UPDATE event with an old changeNumber after 0.3 seconds

    setTimeout(function () {
      assert.equal(client.getTreatment('splitters'), 'off', 'evaluation with initial MySegments list');
      client.once(client.Event.SDK_UPDATE, function () {
        var lapse = Date.now() - start;
        assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_MYSEGMENT_UPDATE_EVENT), 'SDK_UPDATE due to MY_SEGMENTS_UPDATE event');
        assert.equal(client.getTreatment('splitters'), 'on', 'evaluation with updated MySegments list');
      });
      eventSourceInstance.emitMessage(_messageMY_SEGMENTS_UPDATENicolasSplitIo.default);
    }, MILLIS_MYSEGMENT_UPDATE_EVENT); // send a MY_SEGMENTS_UPDATE event with a new changeNumber after 0.4 seconds

    setTimeout(function () {
      assert.equal(client.getTreatment('whitelist'), 'allowed', 'evaluation with not killed Split');
      client.once(client.Event.SDK_UPDATE, function () {
        var lapse = Date.now() - start;
        assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_SPLIT_KILL_EVENT), 'SDK_UPDATE due to SPLIT_KILL event');
        assert.equal(client.getTreatment('whitelist'), 'not_allowed', 'evaluation with killed Split');
      });
      eventSourceInstance.emitMessage(_messageSPLIT_KILL.default);
    }, MILLIS_SPLIT_KILL_EVENT); // send a SPLIT_KILL event with a new changeNumber after 0.5 seconds

    setTimeout(function () {
      otherClient = splitio.client(otherUserKey);
      (0, _eventSourceMock.setMockListener)(function (eventSourceInstance) {
        var expectedSSEurl = "".concat(settings.url('/sse'), "?channels=NzM2MDI5Mzc0_NDEzMjQ1MzA0Nw%3D%3D_MjE0MTkxOTU2Mg%3D%3D_mySegments,NzM2MDI5Mzc0_NDEzMjQ1MzA0Nw%3D%3D_NTcwOTc3MDQx_mySegments,NzM2MDI5Mzc0_NDEzMjQ1MzA0Nw%3D%3D_splits,%5B%3Foccupancy%3Dmetrics.publishers%5Dcontrol_pri,%5B%3Foccupancy%3Dmetrics.publishers%5Dcontrol_sec&accessToken=").concat(_authPushEnabledNicolasSplitIoMarcioSplitIo.default.token, "&v=1.1&heartbeats=true");
        assert.equals(eventSourceInstance.url, expectedSSEurl, 'new EventSource URL is the expected');
        /* events on second SSE connection */

        setTimeout(function () {
          eventSourceInstance.emitOpen();
        }, MILLIS_SECOND_SSE_OPEN - MILLIS_NEW_CLIENT); // open new SSE connection

        setTimeout(function () {
          assert.equal(otherClient.getTreatment('qc_team'), 'no', 'evaluation with initial MySegments list (shared client)');
          otherClient.once(otherClient.Event.SDK_UPDATE, function () {
            var lapse = Date.now() - start;
            assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_MY_SEGMENTS_UPDATE_WITH_PAYLOAD), 'SDK_UPDATE due to MY_SEGMENTS_UPDATE event (with payload)');
            assert.equal(otherClient.getTreatment('qc_team'), 'yes', 'evaluation with updated MySegments list (shared client)');
          });
          eventSourceInstance.emitMessage(_messageMY_SEGMENTS_UPDATEMarcioSplitIo.default);
        }, MILLIS_MY_SEGMENTS_UPDATE_WITH_PAYLOAD - MILLIS_NEW_CLIENT); // send a MY_SEGMENTS_UPDATE event with payload after 0.1 seconds from new SSE connection opened

        setTimeout(function () {
          assert.equal(otherClient.getTreatment('qc_team'), 'yes', 'evaluation with updated MySegments list (shared client)');
          otherClient.once(otherClient.Event.SDK_UPDATE, function () {
            var lapse = Date.now() - start;
            assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_MY_SEGMENTS_UPDATE_WITH_EMPTY_PAYLOAD), 'SDK_UPDATE due to MY_SEGMENTS_UPDATE event (with empty payload)');
            assert.equal(otherClient.getTreatment('qc_team'), 'no', 'evaluation with re-updated MySegments list (shared client)');
          }); // assert that user error on callback is an Uncaught Exception

          otherClient.once(otherClient.Event.SDK_UPDATE, function () {
            var previousErrorHandler = window.onerror;

            var exceptionHandler = function exceptionHandler(err) {
              if ((0, _includes.default)(err, 'willThrowFor')) {
                assert.pass("User error on SDK_UPDATE callback should throw as Uncaught Exception: ".concat(err));
              } else {
                assert.fail(err);
              }

              window.onerror = previousErrorHandler; // destroy shared client and then main client

              otherClient.destroy().then(function () {
                assert.equal(otherClient.getTreatment('whitelist'), 'control', 'evaluation returns control for shared client if it is destroyed');
                assert.equal(client.getTreatment('whitelist'), 'not_allowed', 'evaluation returns correct tratment for main client');
                client.destroy().then(function () {
                  assert.equal(client.getTreatment('whitelist'), 'control', 'evaluation returns control for main client if it is destroyed');
                  assert.end();
                });
              });
            };

            window.onerror = exceptionHandler;
            null.willThrowForUpdate();
          });
          eventSourceInstance.emitMessage(_messageMY_SEGMENTS_UPDATEMarcioSplitIo2.default);
        }, MILLIS_MY_SEGMENTS_UPDATE_WITH_EMPTY_PAYLOAD - MILLIS_NEW_CLIENT); // send a MY_SEGMENTS_UPDATE event with payload after 0.1 seconds from new SSE connection opened
      });
    }, MILLIS_NEW_CLIENT); // creates a new client after 0.6 seconds
  }); // initial auth

  fetchMock.getOnce(settings.url("/auth?users=".concat(encodeURIComponent(userKey))), function (url, opts) {
    if (!opts.headers['Authorization']) assert.fail('`/auth` request must include `Authorization` header');
    assert.pass('auth success');
    return {
      status: 200,
      body: _authPushEnabledNicolasSplitIo.default
    };
  }); // reauth due to new client

  fetchMock.getOnce(settings.url("/auth?users=".concat(encodeURIComponent(userKey), "&users=").concat(encodeURIComponent(otherUserKey))), function (url, opts) {
    if (!opts.headers['Authorization']) assert.fail('`/auth` request must include `Authorization` header');
    assert.pass('second auth success');
    return {
      status: 200,
      body: _authPushEnabledNicolasSplitIoMarcioSplitIo.default
    };
  }); // initial split and mySegments sync

  fetchMock.getOnce(settings.url('/splitChanges?since=-1'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, 0), 'initial sync');
    return {
      status: 200,
      body: _splitchangesSince.default
    };
  });
  fetchMock.getOnce(settings.url('/mySegments/nicolas%40split.io'), {
    status: 200,
    body: _mysegmentsNicolasSplitIo.default
  }); // split and segment sync after SSE opened

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_SSE_OPEN), 'sync after SSE connection is opened');
    return {
      status: 200,
      body: _splitchangesSince2.default
    };
  });
  fetchMock.getOnce(settings.url('/mySegments/nicolas%40split.io'), {
    status: 200,
    body: _mysegmentsNicolasSplitIo.default
  }); // fetch due to SPLIT_UPDATE event

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), {
    status: 200,
    body: _splitchangesSince1457552620999Till1457552649999SPLIT_UPDATE.default
  }); // fetch due to first MY_SEGMENTS_UPDATE event

  fetchMock.getOnce(settings.url('/mySegments/nicolas%40split.io'), {
    status: 200,
    body: _mysegmentsNicolasSplitIoMock.default
  }); // fetch due to SPLIT_KILL event

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552649999'), function () {
    assert.equal(client.getTreatment('whitelist'), 'not_allowed', 'evaluation with split killed immediately, before fetch is done');
    return {
      status: 200,
      body: _splitchangesSince1457552649999Till1457552650000SPLIT_KILL.default
    };
  }); // initial fetch of mySegments for new client

  fetchMock.getOnce(settings.url('/mySegments/marcio%40split.io'), {
    status: 200,
    body: _mysegmentsMarcioSplitIo.default
  }); // split and mySegment sync after second SSE opened

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552650000'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_SECOND_SSE_OPEN), 'sync after second SSE connection is opened');
    return {
      status: 200,
      body: {
        splits: [],
        since: 1457552650000,
        till: 1457552650000
      }
    };
  });
  fetchMock.getOnce(settings.url('/mySegments/nicolas%40split.io'), {
    status: 200,
    body: _mysegmentsNicolasSplitIoMock.default
  });
  fetchMock.getOnce(settings.url('/mySegments/marcio%40split.io'), {
    status: 200,
    body: _mysegmentsMarcioSplitIo.default
  });
  fetchMock.get(new RegExp('.*'), function (url) {
    assert.fail('unexpected GET request with url: ' + url);
  });
  fetchMock.post('*', 200);
  start = Date.now();
  splitio = (0, _index.SplitFactory)(config);
  client = splitio.client();
}