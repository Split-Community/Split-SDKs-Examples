"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _fetchMock = _interopRequireDefault(require("./testUtils/fetchMock"));

var _evaluations = _interopRequireDefault(require("./browserSuites/evaluations.spec"));

var _impressions = _interopRequireDefault(require("./browserSuites/impressions.spec"));

var _impressionsDebug = _interopRequireDefault(require("./browserSuites/impressions.debug.spec"));

var _metrics = _interopRequireDefault(require("./browserSuites/metrics.spec"));

var _impressionsListener = _interopRequireDefault(require("./browserSuites/impressions-listener.spec"));

var _readiness = _interopRequireDefault(require("./browserSuites/readiness.spec"));

var _readyFromCache = _interopRequireDefault(require("./browserSuites/ready-from-cache.spec"));

var _events = require("./browserSuites/events.spec");

var _sharedInstantiation = _interopRequireDefault(require("./browserSuites/shared-instantiation.spec"));

var _manager = _interopRequireDefault(require("./browserSuites/manager.spec"));

var _ignoreIpAddressesSetting = _interopRequireDefault(require("./browserSuites/ignore-ip-addresses-setting.spec"));

var _useBeaconApi = _interopRequireDefault(require("./browserSuites/use-beacon-api.spec"));

var _useBeaconApiDebug = _interopRequireDefault(require("./browserSuites/use-beacon-api.debug.spec"));

var _readyPromise = _interopRequireDefault(require("./browserSuites/ready-promise.spec"));

var _fetchSpecificSplits = _interopRequireDefault(require("./browserSuites/fetch-specific-splits.spec"));

var _settings = _interopRequireDefault(require("../utils/settings"));

var _splitchangesSince = _interopRequireDefault(require("./mocks/splitchanges.since.-1.json"));

var _splitchangesSince2 = _interopRequireDefault(require("./mocks/splitchanges.since.1457552620999.json"));

var _mysegmentsFacundoSplitIo = _interopRequireDefault(require("./mocks/mysegments.facundo@split.io.json"));

var _mysegmentsNicolasSplitIo = _interopRequireDefault(require("./mocks/mysegments.nicolas@split.io.json"));

var _mysegmentsMarcioSplitIo = _interopRequireDefault(require("./mocks/mysegments.marcio@split.io.json"));

var settings = (0, _settings.default)({
  core: {
    key: 'facundo@split.io'
  },
  streamingEnabled: false
});
var configInMemory = {
  core: {
    authorizationKey: '<fake-token>',
    key: 'facundo@split.io'
  },
  scheduler: {
    featuresRefreshRate: 1,
    segmentsRefreshRate: 1,
    metricsRefreshRate: 3000,
    // for now I don't want to publish metrics during E2E run.
    impressionsRefreshRate: 3000 // for now I don't want to publish impressions during E2E run.

  },
  streamingEnabled: false
};
var configInMemoryWithBucketingKey = {
  core: {
    authorizationKey: '<fake-token>',
    key: {
      matchingKey: 'facundo@split.io',
      bucketingKey: 'some_id'
    }
  },
  scheduler: {
    featuresRefreshRate: 1,
    segmentsRefreshRate: 1,
    metricsRefreshRate: 3000,
    // for now I don't want to publish metrics during E2E run.
    impressionsRefreshRate: 3000 // for now I don't want to publish impressions during E2E run.

  },
  streamingEnabled: false
};
var configInLocalStorage = {
  core: {
    authorizationKey: '<fake-token>',
    key: 'facundo@split.io'
  },
  scheduler: {
    featuresRefreshRate: 1,
    segmentsRefreshRate: 1,
    metricsRefreshRate: 3000,
    // for now I don't want to publish metrics during E2E run.
    impressionsRefreshRate: 3000 // for now I don't want to publish impressions during E2E run.

  },
  storage: {
    type: 'LOCALSTORAGE',
    prefix: 'e2eTEST' // Avoid storage name clashes

  },
  streamingEnabled: false
};
(0, _tapeCatch.default)('## E2E CI Tests ##', function (assert) {
  //If we change the mocks, we need to clear localstorage. Cleaning up after testing ensures "fresh data".
  localStorage.clear();

  _fetchMock.default.get(settings.url('/splitChanges?since=-1'), {
    status: 200,
    body: _splitchangesSince.default
  });

  _fetchMock.default.get(settings.url('/splitChanges?since=1457552620999'), {
    status: 200,
    body: _splitchangesSince2.default
  });

  _fetchMock.default.get(settings.url('/mySegments/facundo%40split.io'), {
    status: 200,
    body: _mysegmentsFacundoSplitIo.default
  });

  _fetchMock.default.get(settings.url('/mySegments/nicolas%40split.io'), {
    status: 200,
    body: _mysegmentsNicolasSplitIo.default
  });

  _fetchMock.default.get(settings.url('/mySegments/marcio%40split.io'), {
    status: 200,
    body: _mysegmentsMarcioSplitIo.default
  });

  _fetchMock.default.post(settings.url('/testImpressions/bulk'), 200);

  _fetchMock.default.post(settings.url('/testImpressions/count'), 200);
  /* Check client evaluations. */


  assert.test('E2E / In Memory', _evaluations.default.bind(null, configInMemory, _fetchMock.default));
  assert.test('E2E / In Memory with Bucketing Key', _evaluations.default.bind(null, configInMemoryWithBucketingKey, _fetchMock.default));
  assert.test('E2E / In LocalStorage with In Memory Fallback', _evaluations.default.bind(null, configInLocalStorage, _fetchMock.default));
  /* Check impressions */

  assert.test('E2E / Impressions', _impressions.default.bind(null, _fetchMock.default));
  assert.test('E2E / Impressions Debug Mode', _impressionsDebug.default.bind(null, _fetchMock.default));
  /* Check impression listener */

  assert.test('E2E / Impression listener', _impressionsListener.default);
  /* Check metrics */

  assert.test('E2E / Metrics', _metrics.default.bind(null, _fetchMock.default));
  /* Check events */

  assert.test('E2E / Events', _events.withoutBindingTT.bind(null, _fetchMock.default));
  assert.test('E2E / Events with TT binded', _events.bindingTT.bind(null, _fetchMock.default));
  /* Check shared clients */

  assert.test('E2E / Shared instances', _sharedInstantiation.default.bind(null, false, _fetchMock.default));
  assert.test('E2E / Shared instances with Traffic Type on factory settings', _sharedInstantiation.default.bind(null, true, _fetchMock.default));
  /* Check basic manager functionality */

  assert.test('E2E / Manager API', _manager.default.bind(null, settings, _fetchMock.default));
  /* Validate readiness */

  assert.test('E2E / Readiness', _readiness.default.bind(null, _fetchMock.default));
  /* Validate headers for ip and hostname are not sended with requests (ignore setting IPAddressesEnabled) */

  assert.test('E2E / Ignore setting IPAddressesEnabled', _ignoreIpAddressesSetting.default.bind(null, _fetchMock.default));
  /* Check that impressions and events are sended to backend via Beacon API or Fetch when page unload is triggered. */

  assert.test('E2E / Use Beacon API (or Fetch if not available) to send remaining impressions and events when browser page is unload', _useBeaconApi.default.bind(null, _fetchMock.default));
  assert.test('E2E / Use Beacon API DEBUG (or Fetch if not available) to send remaining impressions and events when browser page is unload', _useBeaconApiDebug.default.bind(null, _fetchMock.default));
  /* Validate ready from cache behaviour (might be merged into another suite if we end up having simple behavior around it as expected) */

  assert.test('E2E / Readiness from cache', _readyFromCache.default.bind(null, _fetchMock.default));
  /* Validate readiness with ready promises */

  assert.test('E2E / Ready promise', _readyPromise.default.bind(null, _fetchMock.default));
  /* Validate fetching specific splits */

  assert.test('E2E / Fetch specific splits', _fetchSpecificSplits.default.bind(null, _fetchMock.default)); //If we change the mocks, we need to clear localstorage. Cleaning up after testing ensures "fresh data".

  localStorage.clear();
  assert.end();
});