"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setMockListener = setMockListener;
exports.default = exports.sources = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _events = _interopRequireDefault(require("events"));

/**
 * EventEmitter mock based on https://github.com/gcedo/eventsourcemock/blob/master/src/EventSource.js
 *
 * To setup the mock assign it to the window object.
 * ```
 *  import EventSource from 'eventsourcemock';
 *  Object.defineProperty(window, 'EventSource', {
 *    value: EventSource,
 *  });
 * ```
 *
 */
var defaultOptions = {
  withCredentials: false
};
var sources = {};
exports.sources = sources;

var __listener;

function setMockListener(listener) {
  __listener = listener;
}

var EventSource = /*#__PURE__*/function () {
  function EventSource(url) {
    var configuration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
    (0, _classCallCheck2.default)(this, EventSource);
    this.url = url;
    this.withCredentials = configuration.withCredentials;
    this.readyState = 0; // eslint-disable-next-line no-undef

    this.__emitter = new _events.default();
    sources[url] = this;
    if (__listener) setTimeout(__listener, 0, this);
  }

  (0, _createClass2.default)(EventSource, [{
    key: "addEventListener",
    value: function addEventListener(eventName, listener) {
      this.__emitter.addListener(eventName, listener);
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(eventName, listener) {
      this.__emitter.removeListener(eventName, listener);
    }
  }, {
    key: "close",
    value: function close() {
      this.readyState = 2;
    } // The following methods can be used to mock EventSource behavior and events

  }, {
    key: "emit",
    value: function emit(eventName, messageEvent) {
      this.__emitter.emit(eventName, messageEvent);
    }
  }, {
    key: "emitError",
    value: function emitError(error) {
      if (typeof this.onerror === 'function') {
        this.onerror(error);
      }
    }
  }, {
    key: "emitOpen",
    value: function emitOpen() {
      this.readyState = 1;

      if (typeof this.onopen === 'function') {
        this.onopen();
      }
    }
  }, {
    key: "emitMessage",
    value: function emitMessage(message) {
      if (typeof this.onmessage === 'function') {
        this.onmessage(message);
      }
    }
  }]);
  return EventSource;
}();

exports.default = EventSource;
EventSource.CONNECTING = 0;
EventSource.OPEN = 1;
EventSource.CLOSED = 2;