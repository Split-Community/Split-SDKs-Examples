"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _ioredis = _interopRequireDefault(require("ioredis"));

var _input = _interopRequireDefault(require("./mocks/input"));

var _output = _interopRequireDefault(require("./mocks/output"));

var _ = _interopRequireDefault(require("../"));

var _InRedis = _interopRequireDefault(require("../../storage/SplitCache/InRedis"));

var _Keys = _interopRequireDefault(require("../../storage/Keys"));

var _settings = _interopRequireDefault(require("../../utils/settings"));

var _sinon = _interopRequireDefault(require("sinon"));

var settings = (0, _settings.default)({
  storage: {
    type: 'REDIS'
  }
});
var contextMock = {
  get: _sinon.default.stub().callsFake(function (entityName) {
    if (entityName === 'is_destroyed') return false;
    return {
      hasStatusManagerExtension: true
    };
  }),
  constants: {
    DESTROYED: 'is_destroyed',
    STATUS_MANAGER: 'status_manager'
  }
};
(0, _tapeCatch.default)('MANAGER API / In Redis', /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(assert) {
    var connection, keys, cache, manager, views;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            connection = new _ioredis.default(settings.storage.options);
            keys = new _Keys.default(settings);
            cache = new _InRedis.default(keys, connection);
            manager = new _.default(cache, contextMock);
            _context.next = 6;
            return cache.flush();

          case 6:
            _context.next = 8;
            return cache.addSplit(_input.default.name, JSON.stringify(_input.default));

          case 8:
            _context.next = 10;
            return manager.splits();

          case 10:
            views = _context.sent;
            assert.deepEqual(views[0], _output.default);
            connection.quit();
            assert.end();

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());