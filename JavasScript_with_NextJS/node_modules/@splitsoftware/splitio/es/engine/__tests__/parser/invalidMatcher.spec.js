import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
import tape from 'tape-catch';
import parser from '../../parser';
tape('PARSER / handle invalid matcher as control', /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(assert) {
    var evaluator, evaluation;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            evaluator = parser([{
              matcherGroup: {
                combiner: 'AND',
                matchers: [{
                  matcherType: 'UNKNOWN_MATCHER',
                  negate: false,
                  userDefinedSegmentMatcherData: null,
                  whitelistMatcherData: null
                }]
              },
              partitions: [{
                treatment: 'A',
                size: 20
              }, {
                treatment: 'B',
                size: 20
              }, {
                treatment: 'A',
                size: 60
              }]
            }]);
            _context.next = 3;
            return evaluator('aaaaa', 31);

          case 3:
            evaluation = _context.sent;
            assert.equal(evaluation.treatment, 'control', 'return control when invalid matcher');
            assert.equal(evaluation.label, 'exception', 'track invalid as an exception');
            assert.end();

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
tape('PARSER / handle invalid matcher as control (complex example)', /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(assert) {
    var evaluator, ev1, ev2, ev3, _i, _arr, ev;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            evaluator = parser([{
              'conditionType': 'WHITELIST',
              'matcherGroup': {
                'combiner': 'AND',
                'matchers': [{
                  'keySelector': null,
                  'matcherType': 'WHITELIST',
                  'negate': false,
                  'userDefinedSegmentMatcherData': null,
                  'whitelistMatcherData': {
                    'whitelist': ['NicoIncluded']
                  },
                  'unaryNumericMatcherData': null,
                  'betweenMatcherData': null
                }]
              },
              'partitions': [{
                'treatment': 'on',
                'size': 100
              }],
              'label': 'whitelisted'
            }, {
              'conditionType': 'WHITELIST',
              'matcherGroup': {
                'combiner': 'AND',
                'matchers': [{
                  'keySelector': null,
                  'matcherType': 'WHITELIST',
                  'negate': false,
                  'userDefinedSegmentMatcherData': null,
                  'whitelistMatcherData': {
                    'whitelist': ['NicoExcluded']
                  },
                  'unaryNumericMatcherData': null,
                  'betweenMatcherData': null
                }]
              },
              'partitions': [{
                'treatment': 'off',
                'size': 100
              }],
              'label': 'whitelisted'
            }, {
              'conditionType': 'ROLLOUT',
              'matcherGroup': {
                'combiner': 'AND',
                'matchers': [{
                  'keySelector': {
                    'trafficType': 'test',
                    'attribute': 'custom'
                  },
                  'matcherType': 'SARASA',
                  'negate': false,
                  'userDefinedSegmentMatcherData': null,
                  'unaryNumericMatcherData': null,
                  'betweenMatcherData': null
                }]
              },
              'partitions': [{
                'treatment': 'on',
                'size': 100
              }, {
                'treatment': 'off',
                'size': 0
              }],
              'label': 'custom in list [test, more test]'
            }]);
            _context2.next = 3;
            return evaluator('NicoIncluded', 31);

          case 3:
            ev1 = _context2.sent;
            _context2.next = 6;
            return evaluator('NicoExcluded', 31);

          case 6:
            ev2 = _context2.sent;
            _context2.next = 9;
            return evaluator('another_key', 31);

          case 9:
            ev3 = _context2.sent;

            for (_i = 0, _arr = [ev1, ev2, ev3]; _i < _arr.length; _i++) {
              ev = _arr[_i];
              assert.equal(ev.treatment, 'control', 'return control when invalid matcher');
              assert.equal(ev.label, 'exception', 'track invalid as an exception');
            }

            assert.end();

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());
tape('PARSER / handle invalid matcher as control (complex example mixing invalid and valid matchers)', /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(assert) {
    var evaluator, ev1, ev2, ev3, _i2, _arr2, ev;

    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            evaluator = parser([{
              'conditionType': 'WHITELIST',
              'matcherGroup': {
                'combiner': 'AND',
                'matchers': [{
                  'keySelector': null,
                  'matcherType': 'WHITELIST',
                  'negate': false,
                  'userDefinedSegmentMatcherData': null,
                  'whitelistMatcherData': {
                    'whitelist': ['NicoIncluded']
                  },
                  'unaryNumericMatcherData': null,
                  'betweenMatcherData': null
                }]
              },
              'partitions': [{
                'treatment': 'on',
                'size': 100
              }],
              'label': 'whitelisted'
            }, {
              'conditionType': 'WHITELIST',
              'matcherGroup': {
                'combiner': 'AND',
                'matchers': [{
                  'keySelector': null,
                  'matcherType': 'WHITELIST',
                  'negate': false,
                  'userDefinedSegmentMatcherData': null,
                  'whitelistMatcherData': {
                    'whitelist': ['NicoExcluded']
                  },
                  'unaryNumericMatcherData': null,
                  'betweenMatcherData': null
                }]
              },
              'partitions': [{
                'treatment': 'off',
                'size': 100
              }],
              'label': 'whitelisted'
            }, {
              'conditionType': 'ROLLOUT',
              'matcherGroup': {
                'combiner': 'AND',
                'matchers': [{
                  keySelector: {
                    trafficType: 'user',
                    attribute: 'account'
                  },
                  matcherType: 'ALL_KEYS',
                  negate: false,
                  userDefinedSegmentMatcherData: null,
                  whitelistMatcherData: null,
                  unaryNumericMatcherData: null,
                  betweenMatcherData: null,
                  unaryStringMatcherData: null
                }, {
                  'keySelector': {
                    'trafficType': 'test',
                    'attribute': 'custom'
                  },
                  'matcherType': 'SARASA',
                  'negate': false,
                  'userDefinedSegmentMatcherData': null,
                  'unaryNumericMatcherData': null,
                  'betweenMatcherData': null
                }, {
                  keySelector: {
                    trafficType: 'user',
                    attribute: 'account'
                  },
                  matcherType: 'ALL_KEYS',
                  negate: false,
                  userDefinedSegmentMatcherData: null,
                  whitelistMatcherData: null,
                  unaryNumericMatcherData: null,
                  betweenMatcherData: null,
                  unaryStringMatcherData: null
                }]
              },
              'partitions': [{
                'treatment': 'on',
                'size': 100
              }, {
                'treatment': 'off',
                'size': 0
              }],
              'label': 'custom in list [test, more test]'
            }]);
            _context3.next = 3;
            return evaluator('NicoIncluded', 31);

          case 3:
            ev1 = _context3.sent;
            _context3.next = 6;
            return evaluator('NicoExcluded', 31);

          case 6:
            ev2 = _context3.sent;
            _context3.next = 9;
            return evaluator('another_key', 31);

          case 9:
            ev3 = _context3.sent;

            for (_i2 = 0, _arr2 = [ev1, ev2, ev3]; _i2 < _arr2.length; _i2++) {
              ev = _arr2[_i2];
              assert.equal(ev.treatment, 'control', 'return control when invalid matcher');
              assert.equal(ev.label, 'exception', 'track invalid as an exception');
            }

            assert.end();

          case 12:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}());