import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
import tape from 'tape-catch';
import { types as matcherTypes } from '../../../matchers/types';
import matcherFactory from '../../../matchers';
tape('MATCHER SEGMENT / should return true ONLY when the key is defined inside the segment', /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(assert) {
    var segment, matcher;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            segment = 'employees';
            matcher = matcherFactory({
              type: matcherTypes.SEGMENT,
              value: segment
            }, {
              segments: {
                isInSegment: function isInSegment(segmentName, key) {
                  return key === 'key';
                }
              }
            });
            _context.t0 = assert;
            _context.next = 5;
            return matcher('key');

          case 5:
            _context.t1 = _context.sent;

            _context.t0.true.call(_context.t0, _context.t1, '"key" should be true');

            _context.t2 = assert;
            _context.next = 10;
            return matcher('another_key');

          case 10:
            _context.t3 = _context.sent;

            _context.t2.false.call(_context.t2, _context.t3, '"another key" should be false');

            assert.end();

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());