import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import sinon from 'sinon';
import { SplitFactory } from '../..';
import SettingsFactory from '../../utils/settings';
import { gaSpy, gaTag, addGaTag, removeGaTag } from './gaTestUtils';
var config = {
  core: {
    key: 'facundo@split.io',
    trafficType: 'user'
  },
  integrations: [{
    type: 'GOOGLE_ANALYTICS_TO_SPLIT'
  }],
  startup: {
    eventsFirstPushWindow: 0.2
  },
  streamingEnabled: false
};
var settings = SettingsFactory(config);
export default function (fetchMock, assert) {
  var client; // test default behavior on default tracker

  assert.test(function (t) {
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      var resp = JSON.parse(opts.body);
      var sentHits = window.gaSpy.getHits();
      t.equal(resp.length, sentHits.length, "Number of sent hits must be equal to sent events (".concat(resp.length, ")"));
      t.equal(resp[0].key, settings.core.key, 'Event key is same that SDK config key');
      t.equal(resp[0].trafficTypeName, settings.core.trafficType, 'Event trafficTypeName is same that SDK config key');
      setTimeout(function () {
        client.destroy();
        t.end();
      });
      return 200;
    });
    gaTag(); // siteSpeedSampleRate set to 0 to never send a site speed timing hit

    window.ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    gaSpy();
    window.ga('require', 'splitTracker');
    window.ga('send', 'pageview');
    var factory = SplitFactory(config);
    client = factory.client();
  }); // test default behavior on named tracker, tracking N events, and GA in a different global variable

  assert.test(function (t) {
    var numberOfCustomEvents = 5;
    var client;
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      var resp = JSON.parse(opts.body);
      var sentHits = window.gaSpy.getHits('myTracker');
      t.equal(resp.length, sentHits.length, "Number of sent hits must be equal to sent events (".concat(resp.length, ")"));
      t.equal(resp[0].key, settings.core.key, 'Event key is same that SDK config key');
      t.equal(resp[0].trafficTypeName, settings.core.trafficType, 'Event trafficTypeName is same that SDK config key');
      setTimeout(function () {
        client.destroy();
        t.end();
      });
      return 200;
    });
    gaTag('other_location_for_ga');
    window.other_location_for_ga('create', 'UA-00000001-1', 'example1.com', 'myTracker', {
      siteSpeedSampleRate: 0
    });
    gaSpy(['myTracker']);
    var factory = SplitFactory(config);
    client = factory.client();
    window.other_location_for_ga('myTracker.require', 'splitTracker'); // this second 'require' is not applied (does not overwrite previous command)

    window.other_location_for_ga('myTracker.require', 'splitTracker', {
      mapper: function mapper() {
        throw 'error';
      }
    });

    for (var i = 0; i < numberOfCustomEvents; i++) {
      window.other_location_for_ga('myTracker.send', 'pageview');
    }
  }); // test error: no TT in SDK config

  assert.test(function (t) {
    var numberOfCustomEvents = 5;
    gaTag();
    window.ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    gaSpy();
    var logSpy = sinon.spy(console, 'log');
    var factory = SplitFactory(_objectSpread(_objectSpread({}, config), {}, {
      core: {
        key: config.core.key
      },
      debug: true
    }));
    window.ga('require', 'splitTracker');

    for (var i = 0; i < numberOfCustomEvents; i++) {
      window.ga('send', 'pageview');
    } // We must wait until ga is ready to get SplitTracker required and invoked, and to assert the test


    window.ga(function () {
      t.ok(logSpy.calledWith('[WARN]  splitio-ga-to-split => No valid identities were provided. Please check that you are passing a valid list of identities or providing a traffic type at the SDK configuration.'));
      t.equal(window.gaSpy.getHits().length, numberOfCustomEvents, "Number of sent hits must be equal to ".concat(numberOfCustomEvents));
      logSpy.restore();
      t.end();
    });
    factory.client().destroy();
  }); // test default behavior, providing a list of identities as SDK options

  assert.test(function (t) {
    var numberOfCustomEvents = 3;
    var identities = [{
      key: 'user1',
      trafficType: 'user'
    }, {
      key: 'user2',
      trafficType: 'user'
    }];
    var client;
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      var resp = JSON.parse(opts.body);
      var sentHits = window.gaSpy.getHits('myTracker3');
      t.equal(sentHits.length, numberOfCustomEvents, "Number of sent hits must be equal to sent custom events (".concat(numberOfCustomEvents, ")"));
      t.equal(resp.length, numberOfCustomEvents * identities.length, 'The number of sent events must be equal to the number of sent hits multiply by the number of identities');
      setTimeout(function () {
        client.destroy();
        t.end();
      });
      return 200;
    });
    gaTag();
    window.ga('create', 'UA-00000003-1', 'example3.com', 'myTracker3', {
      siteSpeedSampleRate: 0
    });
    gaSpy(['myTracker3']);
    var factory = SplitFactory(_objectSpread(_objectSpread({}, config), {}, {
      core: {
        key: config.core.key
      },
      integrations: [{
        type: 'GOOGLE_ANALYTICS_TO_SPLIT',
        identities: identities
      }]
    }));
    client = factory.client();
    window.ga('myTracker3.require', 'splitTracker');

    for (var i = 0; i < numberOfCustomEvents; i++) {
      window.ga('myTracker3.send', 'pageview');
    }
  }); // test default behavior in multiple trackers, providing a list of identities in plugin options for one tracker and in sdk options for another

  assert.test(function (t) {
    var identitiesPluginOpts = [{
      key: 'user1',
      trafficType: 'user'
    }, {
      key: 'user2',
      trafficType: 'user'
    }];
    var identitiesSdkOpts = [{
      key: 'user3',
      trafficType: 'user'
    }];
    var gaSendIterations = 3;
    var expectedNumberOfSplitEvents = gaSendIterations * (identitiesPluginOpts.length + identitiesSdkOpts.length);
    var client;
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      var resp = JSON.parse(opts.body);
      t.equal(resp.length, expectedNumberOfSplitEvents, 'The number of sent Split events must be equal to the number of sent hits multiply by the number of identities');
      var sentHitsTracker4 = window.gaSpy.getHits('myTracker4');
      var sentHitsTracker5 = window.gaSpy.getHits('myTracker5');
      t.equal(sentHitsTracker4.length, gaSendIterations, "Number of sent hits must be equal to the times 'send' command was invoked (".concat(gaSendIterations, ")"));
      t.equal(sentHitsTracker5.length, gaSendIterations, "Number of sent hits must be equal to the times 'send' command was invoked (".concat(gaSendIterations, ")"));
      setTimeout(function () {
        client.destroy();
        t.end();
      });
      return 200;
    });
    gaTag();
    window.ga('create', 'UA-00000004-1', 'example4.com', 'myTracker4', {
      siteSpeedSampleRate: 0
    });
    window.ga('create', 'UA-00000005-1', 'example5.com', 'myTracker5', {
      siteSpeedSampleRate: 0
    });
    gaSpy(['myTracker4', 'myTracker5']);
    var factory = SplitFactory(_objectSpread(_objectSpread({}, config), {}, {
      core: {
        key: config.core.key
      },
      integrations: [{
        type: 'GOOGLE_ANALYTICS_TO_SPLIT',
        identities: identitiesSdkOpts
      }]
    }));
    client = factory.client();
    window.ga('myTracker4.require', 'splitTracker', {
      identities: identitiesPluginOpts
    });
    window.ga('myTracker5.require', 'splitTracker');

    for (var i = 0; i < gaSendIterations; i++) {
      window.ga('myTracker4.send', 'pageview');
      window.ga('myTracker5.send', 'event', 'mycategory', 'myaction');
    }
  }); // test custom filter and mapper in multiple trackers, passed as plugin options for one tracker and as sdk options for another

  assert.test(function (t) {
    var gaSendIterations = 3;
    var prefixPluginOpts = 'plugin';
    var prefixSdkOpts = 'sdk';
    var client;
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      var resp = JSON.parse(opts.body);
      t.equal(resp.length, gaSendIterations * 2, 'The number of sent Split events must be equal to the number of no filtered sent hits');
      t.equal(resp.filter(function (event) {
        return event.eventTypeId === prefixSdkOpts + '.mapperSdkOpts';
      }).length, gaSendIterations, 'Custom Split events');
      t.equal(resp.filter(function (event) {
        return event.eventTypeId === prefixPluginOpts + '.mapperPluginOpts';
      }).length, gaSendIterations, 'Custom Split events');
      var sentHitsTracker4 = window.gaSpy.getHits('myTracker4');
      var sentHitsTracker5 = window.gaSpy.getHits('myTracker5');
      t.equal(sentHitsTracker4.length, gaSendIterations * 2, 'Number of sent hits must be equal to the times `send` command was invoked');
      t.equal(sentHitsTracker5.length, gaSendIterations * 2, 'Number of sent hits must be equal to the times `send` command was invoked');
      setTimeout(function () {
        client.destroy();
        t.end();
      });
      return 200;
    });
    gaTag();
    window.ga('create', 'UA-00000004-1', 'example4.com', 'myTracker4', {
      siteSpeedSampleRate: 0
    });
    window.ga('create', 'UA-00000005-1', 'example5.com', 'myTracker5', {
      siteSpeedSampleRate: 0
    });
    gaSpy(['myTracker4', 'myTracker5']);
    var factory = SplitFactory(_objectSpread(_objectSpread({}, config), {}, {
      integrations: [{
        type: 'GOOGLE_ANALYTICS_TO_SPLIT',
        filter: function filter(model) {
          return model.get('hitType') === 'pageview';
        },
        // accepts only pageviews
        mapper: function mapper() {
          return {
            eventTypeId: 'mapperSdkOpts'
          };
        },
        // return a fixed event instance
        prefix: prefixSdkOpts
      }]
    }));
    client = factory.client();
    window.ga('myTracker4.require', 'splitTracker', {
      filter: function filter(model) {
        return model.get('hitType') === 'event';
      },
      // accepts only events
      mapper: function mapper(model, defaultEvent) {
        return _objectSpread(_objectSpread({}, defaultEvent), {}, {
          eventTypeId: 'mapperPluginOpts'
        });
      },
      // updates the eventTypeId of default event
      prefix: prefixPluginOpts
    });
    window.ga('myTracker5.require', 'splitTracker');

    for (var i = 0; i < gaSendIterations; i++) {
      window.ga('myTracker4.send', 'pageview');
      window.ga('myTracker5.send', 'pageview');
      window.ga('myTracker4.send', 'event', 'mycategory', 'myaction');
      window.ga('myTracker5.send', 'event', 'mycategory', 'myaction');
    }
  }); // exception in custom mapper or invalid mapper result must not block sending hits

  assert.test(function (t) {
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      var resp = JSON.parse(opts.body);
      t.equal(resp.length, 1, 'only a custom event is sent. no events associated to ga hit');
      return 200;
    });
    gaTag(); // siteSpeedSampleRate set to 0 to never send a site speed timing hit

    window.ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    window.ga('create', 'UA-00000001-1', 'example1.com', 'myTracker', {
      siteSpeedSampleRate: 0
    });
    gaSpy(['t0', 'myTracker']);
    window.ga('require', 'splitTracker', {
      mapper: function mapper() {
        throw 'error';
      }
    }); // this second 'require' is not applied (it does not overwrite previous command)

    window.ga('require', 'splitTracker');
    window.ga('myTracker.require', 'splitTracker', {
      mapper: function mapper() {
        return {
          value: 'invalid value'
        };
      }
    });
    var logSpy = sinon.spy(console, 'log');
    window.ga('send', 'pageview');
    window.ga('myTracker.send', 'pageview');
    var factory = SplitFactory(config);
    client = factory.client();
    client.track('some_event');
    setTimeout(function () {
      var sentHitsT0 = window.gaSpy.getHits('t0');
      var sentHitsMyTracker = window.gaSpy.getHits('myTracker');
      t.equal(sentHitsT0.length, 1, 'Hits must be sent even if a custom mapper throw an exception');
      t.equal(sentHitsMyTracker.length, 1, 'Hits must be sent even if a custom mapper return an invalid event instance');
      t.ok(logSpy.calledWith('[ERROR] splitio-ga-to-split:mapper: value must be a finite number.'));
      client.destroy();
      logSpy.restore();
      t.end();
    });
  }); // test default behavior on default tracker: Split ready before GA init, and keep sending hits after Split destroyed

  assert.test(function (t) {
    var hits = [{
      hitType: 'pageview'
    }, {
      hitType: 'event'
    }];
    var hitsAfterDestroyed = [{
      hitType: 'screenview'
    }];
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      var resp = JSON.parse(opts.body);
      var sentHits = window.gaSpy.getHits();
      t.equal(resp.length, sentHits.length, "Number of sent hits must be equal to sent events (".concat(hits.length, ")"));
      t.equal(resp.length, hits.length, "Number of sent hits must be equal to sent events (".concat(hits.length, ")"));
      setTimeout(function () {
        client.destroy().then(function () {
          hitsAfterDestroyed.forEach(function (hit) {
            return window.ga('send', hit);
          });
          setTimeout(function () {
            t.equal(sentHits.length, hits.length + hitsAfterDestroyed.length, 'sending hits must not be bloqued if Split SDK is destroyed');
            t.end();
          });
        });
      });
      return 200;
    });
    removeGaTag();
    var factory = SplitFactory(_objectSpread(_objectSpread({}, config), {}, {
      startup: {
        eventsFirstPushWindow: 1000
      },
      scheduler: {
        eventsQueueSize: hits.length
      }
    }));
    client = factory.client();
    client.ready().then(function () {
      addGaTag();
      window.ga('create', 'UA-00000000-1', 'auto', {
        siteSpeedSampleRate: 0
      });
      gaSpy();
      window.ga('require', 'splitTracker');
      hits.forEach(function (hit) {
        return window.ga('send', hit);
      });
    });
  }); // test `hits` flag

  assert.test(function (t) {
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      var resp = JSON.parse(opts.body);
      var sentHits = window.gaSpy.getHits();
      t.equal(resp.filter(function (event) {
        return event.eventTypeId === 'ga.pageview';
      }).length, 0, 'No events associated to GA hits must be sent');
      t.equal(resp.filter(function (event) {
        return event.eventTypeId === 'some_event';
      }).length, 1, 'Tracked events must be sent to Split');
      t.equal(sentHits.length, 1, 'Hits must be sent to GA');
      setTimeout(function () {
        client.destroy();
        t.end();
      });
      return 200;
    });
    gaTag(); // siteSpeedSampleRate set to 0 to never send a site speed timing hit

    window.ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    gaSpy();
    window.ga('require', 'splitTracker', {
      hits: false
    });
    window.ga('send', 'pageview');
    var factory = SplitFactory(config);
    client = factory.client();
    client.track('some_event');
  });
}