import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { SplitFactory } from '../../';
import fs from 'fs';
import rl from 'readline';
import splitChangesMockReal from '../mocks/splitchanges.real.json';
export default function (_x, _x2, _x3, _x4) {
  return _ref.apply(this, arguments);
}

function _ref() {
  _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config, settings, fetchMock, assert) {
    var splitio, client, parser;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            fetchMock.get({
              url: settings.url('/splitChanges?since=-1'),
              overwriteRoutes: true
            }, {
              status: 200,
              body: splitChangesMockReal
            });
            splitio = SplitFactory(config);
            client = splitio.client();
            _context.next = 5;
            return client.ready();

          case 5:
            parser = rl.createInterface({
              terminal: false,
              input: fs.createReadStream(require.resolve('../mocks/expected-treatments.csv'))
            });
            parser.on('line', function (line) {
              var parts = line.toString('utf8').split(',');

              if (parts.length === 2) {
                var key = parts[0];
                var treatment = parts[1];
                assert.equal(client.getTreatment(key, 'real_split'), treatment, "Checking expected treatment \"".concat(treatment, "\" for key: ").concat(key));
              }
            }).on('close', function () {
              return client.destroy().then(assert.end);
            });

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _ref.apply(this, arguments);
}