import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import sinon from 'sinon';
import { SplitFactory } from '../../';
import SettingsFactory from '../../utils/settings';
var settings = SettingsFactory({
  core: {
    key: '<fake id>'
  },
  streamingEnabled: false
});
var listener = {
  logImpression: sinon.stub()
};
var config = {
  core: {
    authorizationKey: '<fake-token-3>'
  },
  scheduler: {
    featuresRefreshRate: 1,
    segmentsRefreshRate: 1,
    metricsRefreshRate: 3000,
    impressionsRefreshRate: 3000
  },
  startup: {
    eventsFirstPushWindow: 3000
  },
  impressionListener: listener,
  streamingEnabled: false
};
export default function (assert) {
  var splitio = SplitFactory(config);
  var client = splitio.client();
  return client.ready().then(function () {
    var metaData = {
      ip: settings.runtime.ip,
      hostname: settings.runtime.hostname,
      sdkLanguageVersion: settings.version
    };
    var testAttrs = {
      is_test: true
    }; // Generate one impression, depends on hierarchical_dep_hierarchical which depends on hierarchical_dep_always_on

    client.getTreatment('nicolas@split.io', 'hierarchical_splits_test');
    client.getTreatment({
      matchingKey: 'marcio@split.io',
      bucketingKey: 'impr_bucketing_2'
    }, 'qc_team');
    client.getTreatment('facundo@split.io', 'qc_team', testAttrs);
    client.getTreatment('facundo@split.io', 'qc_team', testAttrs);
    setTimeout(function () {
      assert.true(listener.logImpression.callCount, 4, 'Impression listener logImpression method should be called after we call client.getTreatment, once per each impression generated.');
      assert.true(listener.logImpression.getCall(0).calledWithMatch(_objectSpread({
        impression: {
          feature: 'hierarchical_splits_test',
          keyName: 'nicolas@split.io',
          treatment: 'on',
          bucketingKey: undefined,
          label: 'expected label'
        },
        attributes: undefined
      }, metaData)));
      assert.true(listener.logImpression.getCall(1).calledWithMatch(_objectSpread({
        impression: {
          feature: 'qc_team',
          keyName: 'marcio@split.io',
          treatment: 'no',
          bucketingKey: 'impr_bucketing_2',
          label: 'default rule'
        },
        attributes: undefined
      }, metaData)));
      assert.true(listener.logImpression.getCall(2).calledWithMatch(_objectSpread({
        impression: {
          feature: 'qc_team',
          keyName: 'facundo@split.io',
          treatment: 'no',
          bucketingKey: undefined,
          label: 'default rule'
        },
        attributes: testAttrs
      }, metaData)));
      assert.true(listener.logImpression.getCall(3).calledWithMatch(_objectSpread({
        impression: {
          feature: 'qc_team',
          keyName: 'facundo@split.io',
          treatment: 'no',
          bucketingKey: undefined,
          label: 'default rule',
          pt: listener.logImpression.getCall(2).lastArg.impression.time
        },
        attributes: testAttrs
      }, metaData)));
      client.destroy();
      assert.end();
    }, 0);
  });
}