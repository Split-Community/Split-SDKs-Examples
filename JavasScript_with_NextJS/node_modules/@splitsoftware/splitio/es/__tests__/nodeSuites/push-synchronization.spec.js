import splitChangesMock1 from '../mocks/splitchanges.since.-1.json';
import splitChangesMock2 from '../mocks/splitchanges.since.1457552620999.json';
import splitChangesMock3 from '../mocks/splitchanges.since.1457552620999.till.1457552649999.SPLIT_UPDATE.json';
import splitChangesMock4 from '../mocks/splitchanges.since.1457552649999.till.1457552650000.SPLIT_KILL.json';
import splitUpdateMessage from '../mocks/message.SPLIT_UPDATE.1457552649999.json';
import oldSplitUpdateMessage from '../mocks/message.SPLIT_UPDATE.1457552620999.json';
import segmentUpdateMessage from '../mocks/message.SEGMENT_UPDATE.1457552640000.json';
import splitKillMessage from '../mocks/message.SPLIT_KILL.1457552650000.json';
import authPushEnabled from '../mocks/auth.pushEnabled.node.json';
import { nearlyEqual, mockSegmentChanges } from '../testUtils';
import EventSourceMock, { setMockListener } from '../../sync/__tests__/mocks/eventSourceMock';
import { __setEventSource } from '../../services/getEventSource/node';
import { SplitFactory } from '../../index';
import SettingsFactory from '../../utils/settings';
var key = 'nicolas@split.io';
var baseUrls = {
  sdk: 'https://sdk.push-synchronization/api',
  events: 'https://events.push-synchronization/api',
  auth: 'https://auth.push-synchronization/api'
};
var config = {
  core: {
    authorizationKey: '<fake-token-push-1>'
  },
  urls: baseUrls,
  streamingEnabled: true // debug: true,

};
var settings = SettingsFactory(config);
var MILLIS_SSE_OPEN = 100;
var MILLIS_FIRST_SPLIT_UPDATE_EVENT = 200;
var MILLIS_SECOND_SPLIT_UPDATE_EVENT = 300;
var MILLIS_SEGMENT_UPDATE_EVENT = 400;
var MILLIS_SPLIT_KILL_EVENT = 500;
var MILLIS_DESTROY = 600;
/**
 * Sequence of calls:
 *  0.0 secs: initial SyncAll (/splitChanges, /segmentChanges/*), auth, SSE connection
 *  0.1 secs: SSE connection opened -> syncAll (/splitChanges, /segmentChanges/*)
 *  0.2 secs: SPLIT_UPDATE event -> /splitChanges
 *  0.3 secs: SPLIT_UPDATE event with old changeNumber
 *  0.4 secs: SEGMENT_UPDATE event -> /segmentChanges/
 *  0.5 secs: SPLIT_KILL event -> /splitChanges
 */

export function testSynchronization(fetchMock, assert) {
  assert.plan(15);
  fetchMock.reset();

  __setEventSource(EventSourceMock);

  var start, splitio, client; // mock SSE open and message events

  setMockListener(function (eventSourceInstance) {
    var expectedSSEurl = "".concat(settings.url('/sse'), "?channels=NzM2MDI5Mzc0_NDEzMjQ1MzA0Nw%3D%3D_segments,NzM2MDI5Mzc0_NDEzMjQ1MzA0Nw%3D%3D_splits,%5B%3Foccupancy%3Dmetrics.publishers%5Dcontrol_pri,%5B%3Foccupancy%3Dmetrics.publishers%5Dcontrol_sec&accessToken=").concat(authPushEnabled.token, "&v=1.1&heartbeats=true");
    assert.equals(eventSourceInstance.url, expectedSSEurl, 'EventSource URL is the expected');
    setTimeout(function () {
      eventSourceInstance.emitOpen();
    }, MILLIS_SSE_OPEN); // open SSE connection after 0.1 seconds

    setTimeout(function () {
      assert.equal(client.getTreatment(key, 'whitelist'), 'not_allowed', 'evaluation of initial Split');
      client.once(client.Event.SDK_UPDATE, function () {
        var lapse = Date.now() - start;
        assert.true(nearlyEqual(lapse, MILLIS_FIRST_SPLIT_UPDATE_EVENT), 'SDK_UPDATE due to SPLIT_UPDATE event');
        assert.equal(client.getTreatment(key, 'whitelist'), 'allowed', 'evaluation of updated Split');
      });
      eventSourceInstance.emitMessage(splitUpdateMessage);
    }, MILLIS_FIRST_SPLIT_UPDATE_EVENT); // send a SPLIT_UPDATE event with a new changeNumber after 0.2 seconds

    setTimeout(function () {
      eventSourceInstance.emitMessage(oldSplitUpdateMessage);
    }, MILLIS_SECOND_SPLIT_UPDATE_EVENT); // send a SPLIT_UPDATE event with an old changeNumber after 0.3 seconds

    setTimeout(function () {
      assert.equal(client.getTreatment(key, 'splitters'), 'on', 'evaluation with initial segment');
      client.once(client.Event.SDK_UPDATE, function () {
        var lapse = Date.now() - start;
        assert.true(nearlyEqual(lapse, MILLIS_SEGMENT_UPDATE_EVENT), 'SDK_UPDATE due to SEGMENT_UPDATE event');
        assert.equal(client.getTreatment(key, 'splitters'), 'off', 'evaluation with updated segment');
      });
      eventSourceInstance.emitMessage(segmentUpdateMessage);
    }, MILLIS_SEGMENT_UPDATE_EVENT); // send a SEGMENT_UPDATE event with a new changeNumber after 0.4 seconds

    setTimeout(function () {
      assert.equal(client.getTreatment(key, 'whitelist'), 'allowed', 'evaluation with not killed Split');
      client.once(client.Event.SDK_UPDATE, function () {
        var lapse = Date.now() - start;
        assert.true(nearlyEqual(lapse, MILLIS_SPLIT_KILL_EVENT), 'SDK_UPDATE due to SPLIT_KILL event');
        assert.equal(client.getTreatment(key, 'whitelist'), 'not_allowed', 'evaluation with killed Split');
      });
      eventSourceInstance.emitMessage(splitKillMessage);
    }, MILLIS_SPLIT_KILL_EVENT); // send a SPLIT_KILL event with a new changeNumber after 0.5 seconds

    setTimeout(function () {
      client.destroy().then(function () {
        assert.equal(client.getTreatment(key, 'whitelist'), 'control', 'evaluation returns control if client is destroyed');
        assert.end();
      });
    }, MILLIS_DESTROY); // destroy client after 0.6 seconds
  }); // initial auth

  fetchMock.getOnce(settings.url('/auth'), function (url, opts) {
    if (!opts.headers['Authorization']) assert.fail('`/auth` request must include `Authorization` header');
    assert.pass('auth success');
    return {
      status: 200,
      body: authPushEnabled
    };
  }); // initial split and segment sync

  fetchMock.getOnce(settings.url('/splitChanges?since=-1'), function () {
    var lapse = Date.now() - start;
    assert.true(nearlyEqual(lapse, 0), 'initial sync');
    return {
      status: 200,
      body: splitChangesMock1
    };
  });
  fetchMock.getOnce(settings.url('/segmentChanges/splitters?since=-1'), {
    status: 200,
    body: {
      since: -1,
      till: 1457552620999,
      name: 'splitters',
      added: [key],
      removed: []
    }
  }); // extra retry due to double request (greedy fetch). @TODO: remove once `SplitChangesUpdaterFactory` and `segmentChangesFetcher` are updated

  fetchMock.getOnce(settings.url('/segmentChanges/splitters?since=1457552620999'), {
    status: 200,
    body: {
      since: 1457552620999,
      till: 1457552620999,
      name: 'splitters',
      added: [],
      removed: []
    }
  }); // split and segment sync after SSE opened

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), function () {
    var lapse = Date.now() - start;
    assert.true(nearlyEqual(lapse, MILLIS_SSE_OPEN), 'sync after SSE connection is opened');
    return {
      status: 200,
      body: splitChangesMock2
    };
  });
  fetchMock.getOnce(settings.url('/segmentChanges/splitters?since=1457552620999'), {
    status: 200,
    body: {
      since: 1457552620999,
      till: 1457552620999,
      name: 'splitters',
      added: [],
      removed: []
    }
  }); // fetch due to SPLIT_UPDATE event

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), {
    status: 200,
    body: splitChangesMock3
  }); // fetch due to SEGMENT_UPDATE event

  fetchMock.getOnce(settings.url('/segmentChanges/splitters?since=1457552620999'), {
    status: 200,
    body: {
      since: 1457552620999,
      till: 1457552640000,
      name: 'splitters',
      added: [],
      removed: [key]
    }
  }); // extra retry (fetch until since === till)

  fetchMock.getOnce(settings.url('/segmentChanges/splitters?since=1457552640000'), {
    status: 200,
    body: {
      since: 1457552640000,
      till: 1457552640000,
      name: 'splitters',
      added: [],
      removed: []
    }
  }); // fetch due to SPLIT_KILL event

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552649999'), function () {
    assert.equal(client.getTreatment(key, 'whitelist'), 'not_allowed', 'evaluation with split killed immediately, before fetch is done');
    return {
      status: 200,
      body: splitChangesMock4
    };
  });
  mockSegmentChanges(fetchMock, new RegExp("".concat(settings.url('/segmentChanges'), "/(employees|developers)")), [key]);
  fetchMock.get(new RegExp('.*'), function (url) {
    assert.fail('unexpected GET request with url: ' + url);
  });
  fetchMock.post('*', 200);
  start = Date.now();
  splitio = SplitFactory(config);
  client = splitio.client();
}