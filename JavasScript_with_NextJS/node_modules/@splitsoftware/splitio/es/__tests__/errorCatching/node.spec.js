// Here we are testing exceptions and the handler should be ours, we need to avoid tape-catch
import tape from 'tape';
import includes from 'lodash/includes';
import fetchMock from '../testUtils/fetchMock';
import { SplitFactory } from '../../';
import SettingsFactory from '../../utils/settings';
import splitChangesMock1 from './splitChanges.since.-1.json';
import splitChangesMock2 from './splitChanges.since.1500492097547.json';
import splitChangesMock3 from './splitChanges.since.1500492297547.json'; // Option object used to configure mocked routes with a delay of 1.5 seconds.

var responseDelay = {
  delay: 1500
};
var settings = SettingsFactory({
  core: {
    authorizationKey: '<fake-token>'
  },
  streamingEnabled: false
});
fetchMock.get(settings.url('/splitChanges?since=-1'), {
  status: 200,
  body: splitChangesMock1
}, responseDelay);
fetchMock.get(settings.url('/splitChanges?since=1500492097547'), {
  status: 200,
  body: splitChangesMock2
}, responseDelay);
fetchMock.get(settings.url('/splitChanges?since=1500492297547'), {
  status: 200,
  body: splitChangesMock3
}, responseDelay);
tape('Error catching on callbacks', function (assert) {
  var assertionsPlanned = 3;
  var errCount = 0;
  var factory = SplitFactory({
    core: {
      authorizationKey: '<fake-token-1>'
    },
    startup: {
      eventsFirstPushWindow: 10000,
      readyTimeout: 1
    },
    scheduler: {
      featuresRefreshRate: 2,
      segmentsRefreshRate: 10000,
      metricsRefreshRate: 10000,
      impressionsRefreshRate: 10000,
      eventsPushRate: 10000
    },
    debug: false,
    streamingEnabled: false
  });
  var client = factory.client();
  client.once(client.Event.SDK_READY_TIMED_OUT, function () {
    null.willThrowForTimedOut();
  });
  client.once(client.Event.SDK_READY, function () {
    null.willThrowForReady();
  });
  client.once(client.Event.SDK_UPDATE, function () {
    null.willThrowForUpdate();
  });

  var exceptionHandler = function exceptionHandler(err) {
    if (includes(err.message, 'willThrowFor')) {
      errCount++;
      assert.pass("But this should be loud, all should throw as Uncaught Exception: ".concat(err.message));

      if (errCount === assertionsPlanned) {
        process.off('uncaughException', exceptionHandler);
        client.destroy();
        fetchMock.restore();
        assert.end();
      }
    }
  };

  process.on('uncaughtException', exceptionHandler);
});