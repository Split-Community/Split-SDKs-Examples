import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { SplitFactory } from '../../';
import splitChangesMock1 from '../mocks/splitchanges.since.-1.json';
import splitChangesMock2 from '../mocks/splitchanges.since.1457552620999.json';
import mySegmentsNicolas from '../mocks/mysegments.nicolas@split.io.json'; // mocks for mySegments readiness tests

import splitChangesStartWithoutSegmentsMock from '../mocks/splitchanges.real.json';
import splitChangesUpdateWithSegmentsMock from '../mocks/splitchanges.real.updateWithSegments.json';
import splitChangesUpdateWithoutSegmentsMock from '../mocks/splitchanges.real.updateWithoutSegments.json';
import splitChangesStartWithSegmentsMock from '../mocks/splitchanges.real.withSegments.json';
var baseConfig = {
  core: {
    authorizationKey: '<fake-token-3>',
    key: 'nicolas@split.io'
  },
  scheduler: {
    featuresRefreshRate: 3000,
    segmentsRefreshRate: 3000,
    metricsRefreshRate: 3000,
    impressionsRefreshRate: 3000
  },
  startup: {
    eventsFirstPushWindow: 3000 // We use default for the readiness related ones.

  },
  streamingEnabled: false
};
export default function (fetchMock, assert) {
  assert.test(function (t) {
    // Timeout test, we have retries but splitChanges takes too long
    var testUrls = {
      sdk: 'https://sdk.baseurl/readinessSuite1',
      events: 'https://events.baseurl/readinessSuite1'
    };
    fetchMock.get(testUrls.sdk + '/splitChanges?since=-1', function () {
      return new Promise(function (res) {
        setTimeout(function () {
          res({
            status: 200,
            body: splitChangesMock1,
            headers: {}
          });
        }, 5100);
      });
    });
    fetchMock.get(testUrls.sdk + '/mySegments/nicolas%40split.io', function () {
      return new Promise(function (res) {
        setTimeout(function () {
          res({
            status: 200,
            body: mySegmentsNicolas,
            headers: {}
          });
        }, 4900);
      });
    });
    fetchMock.get(testUrls.sdk + '/splitChanges?since=1457552620999', {
      status: 200,
      body: splitChangesMock2
    });
    var splitio = SplitFactory(_objectSpread(_objectSpread({}, baseConfig), {}, {
      urls: testUrls
    }));
    var client = splitio.client();
    client.once(client.Event.SDK_READY, function () {
      t.fail('### IS READY - NOT TIMED OUT when it should.');
      t.end();
    });
    client.once(client.Event.SDK_READY_TIMED_OUT, function () {
      t.pass('### SDK TIMED OUT - Requests took longer than we allowed per requestTimeoutBeforeReady on both attempts, timed out.');
      client.destroy().then(function () {
        t.end();
      });
    });
  });
  assert.test(function (t) {
    // Timeout test, we have retries but mySegmnets takes too long
    var testUrls = {
      sdk: 'https://sdk.baseurl/readinessSuite2',
      events: 'https://events.baseurl/readinessSuite2'
    };
    fetchMock.get(testUrls.sdk + '/splitChanges?since=-1', function () {
      return new Promise(function (res) {
        setTimeout(function () {
          res({
            status: 200,
            body: splitChangesMock1,
            headers: {}
          });
        }, 4900);
      });
    });
    fetchMock.get(testUrls.sdk + '/mySegments/nicolas%40split.io', function () {
      return new Promise(function (res) {
        setTimeout(function () {
          res({
            status: 200,
            body: mySegmentsNicolas,
            headers: {}
          });
        }, 5100);
      });
    });
    fetchMock.get(testUrls.sdk + '/splitChanges?since=1457552620999', {
      status: 200,
      body: splitChangesMock2
    });
    var splitio = SplitFactory(_objectSpread(_objectSpread({}, baseConfig), {}, {
      urls: testUrls
    }));
    var client = splitio.client();
    client.once(client.Event.SDK_READY, function () {
      t.fail('### IS READY - NOT TIMED OUT when it should.');
      t.end();
    });
    client.once(client.Event.SDK_READY_TIMED_OUT, function () {
      t.pass('### SDK TIMED OUT - Requests took longer than we allowed per requestTimeoutBeforeReady on both attempts, timed out.');
      client.destroy().then(function () {
        t.end();
      });
    });
  });
  assert.test(function (t) {
    // Readiness test, first splitChanges above the limit (req timeout) second one below so final state should be ready.
    var testUrls = {
      sdk: 'https://sdk.baseurl/readinessSuite3',
      events: 'https://events.baseurl/readinessSuite3'
    };
    fetchMock.getOnce(testUrls.sdk + '/splitChanges?since=-1', function () {
      return new Promise(function (res) {
        setTimeout(function () {
          res({
            status: 200,
            body: splitChangesMock1,
            headers: {}
          });
        }, 5100);
      });
    });
    fetchMock.getOnce(testUrls.sdk + '/splitChanges?since=-1', function () {
      return new Promise(function (res) {
        setTimeout(function () {
          res({
            status: 200,
            body: splitChangesMock1,
            headers: {}
          });
        }, 4900);
      }); // Faster, it should get ready on the retry.
    });
    fetchMock.get(testUrls.sdk + '/mySegments/nicolas%40split.io', function () {
      return new Promise(function (res) {
        setTimeout(function () {
          res({
            status: 200,
            body: mySegmentsNicolas,
            headers: {}
          });
        }, 4900);
      });
    });
    fetchMock.get(testUrls.sdk + '/splitChanges?since=1457552620999', {
      status: 200,
      body: splitChangesMock2
    });
    var splitio = SplitFactory(_objectSpread(_objectSpread({}, baseConfig), {}, {
      urls: testUrls
    }));
    var client = splitio.client();
    client.once(client.Event.SDK_READY, function () {
      t.pass('### SDK IS READY as it should, both requests are under the limits');
      client.destroy().then(function () {
        t.end();
      });
    });
    client.once(client.Event.SDK_READY_TIMED_OUT, function () {
      t.fail('### SDK TIMED OUT - It should not in this scenario');
      t.end();
    });
  });
  /************** Now we will validate the intelligent mySegments pausing, which requires lots of code. Related code below. **************/

  localStorage.clear();
  var mySegmentsEndpointDelay = 450;

  function mockForSegmentsPauseTest(testUrls) {
    var startWithSegments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var mySegmentsHits = 0;
    fetchMock.get(new RegExp("".concat(testUrls.sdk, "/mySegments/nicolas\\d?%40split.io")), function () {
      // Mock any mySegments call, so we can test with multiple clients.
      mySegmentsHits++;
      return new Promise(function (res) {
        setTimeout(function () {
          res({
            status: 200,
            body: {
              mySegments: []
            }
          });
        }, mySegmentsEndpointDelay);
      });
    }); // Now mock the no more updates state

    fetchMock.get(testUrls.sdk + '/splitChanges?since=1457552669999', {
      status: 200,
      body: {
        splits: [],
        since: 1457552669999,
        till: 1457552669999
      }
    });

    if (startWithSegments) {
      // Adjust since and till so the order is inverted.
      fetchMock.get(testUrls.sdk + '/splitChanges?since=-1', {
        status: 200,
        body: splitChangesStartWithSegmentsMock
      });
      fetchMock.get(testUrls.sdk + '/splitChanges?since=1457552620999', {
        status: 200,
        body: _objectSpread(_objectSpread({}, splitChangesUpdateWithoutSegmentsMock), {}, {
          since: 1457552620999,
          till: 1457552649999
        })
      });
      fetchMock.get(testUrls.sdk + '/splitChanges?since=1457552649999', {
        status: 200,
        body: _objectSpread(_objectSpread({}, splitChangesUpdateWithSegmentsMock), {}, {
          since: 1457552649999,
          till: 1457552669999
        })
      });
    } else {
      fetchMock.get(testUrls.sdk + '/splitChanges?since=-1', {
        status: 200,
        body: splitChangesStartWithoutSegmentsMock
      });
      fetchMock.get(testUrls.sdk + '/splitChanges?since=1457552620999', {
        status: 200,
        body: splitChangesUpdateWithSegmentsMock
      });
      fetchMock.get(testUrls.sdk + '/splitChanges?since=1457552649999', {
        status: 200,
        body: splitChangesUpdateWithoutSegmentsMock
      });
    }

    return function () {
      return mySegmentsHits;
    };
  }

  assert.test(function (t) {
    // Testing how the SDK pauses/resumes segments synchronization.
    var testUrls = {
      sdk: 'https://sdk.baseurl/readinessMySegmentsSuite',
      events: 'https://events.baseurl/readinessMySegmentsSuite'
    };
    var getMySegmentsHits = mockForSegmentsPauseTest(testUrls, false);
    var start = Date.now();
    var splitio = SplitFactory(_objectSpread(_objectSpread({}, baseConfig), {}, {
      startup: {
        retriesOnFailureBeforeReady: 0
      },
      scheduler: {
        featuresRefreshRate: 3.1,
        segmentsRefreshRate: 1,
        metricsRefreshRate: 3000,
        impressionsRefreshRate: 3000
      },
      urls: testUrls
    }));
    var CLIENTS_COUNT = 3; // Just so it's easier to read the assertions.

    var client = splitio.client();
    var client2 = splitio.client('nicolas2@split.io');
    var client3 = splitio.client('nicolas3@split.io');
    client.once(client.Event.SDK_READY, function () {
      t.ok(Date.now() - start < 50, 'It should be ready really quickly, without waiting for mySegments, as there were no segments in the first splits payload.');
      setTimeout(function () {
        t.equal(getMySegmentsHits(), 1 * CLIENTS_COUNT, 'mySegments should had been hit once per client on the first attempt, but it stopped syncing afterwards.');
      }, 2500); // Now we will wait until it picks up Splits, using the SDK_UPDATE event. Features are refreshed every 3s, but segments every 1s.

      client.once(client.Event.SDK_UPDATE, function () {
        // This update came with segments, it should have tried to fetch mySegments for all used keys.
        setTimeout(function () {
          t.equal(getMySegmentsHits(), 2 * CLIENTS_COUNT, 'It should have tried to synchronize mySegments as soon as it received a new Split with segments.');
        }, 0);
        setTimeout(function () {
          // Nasty ugly crap to avoid listening to the update coming from mySegment calls.
          client.once(client.Event.SDK_UPDATE, function () {
            setTimeout(function () {
              // This update left us in an state with no segments (removed the matcher we fetched on the previous one), it should stop the producer and not trigger more requests.
              t.equal(getMySegmentsHits(), 4 * CLIENTS_COUNT, 'It should have tried to synchronize mySegments periodically.');
              setTimeout(function () {
                t.equal(getMySegmentsHits(), 4 * CLIENTS_COUNT, 'It should have not tried to synchronize segments again after the last update that left us in a no segment state.');
                Promise.all([client2.destroy(), client3.destroy(), client.destroy()]).then(function () {
                  t.end();
                });
              }, 10000);
            }, 0);
          });
        }, 3000);
      });
    });
    client.once(client.Event.SDK_READY_TIMED_OUT, function () {
      t.fail('### SDK TIMED OUT - It should not timeout in this scenario as segments were not necessary.');
      t.end();
    });
  });
  assert.test(function (t) {
    // Testing how the SDK pauses/resumes segments synchronization in localstorage.
    var testUrls = {
      sdk: 'https://sdk.baseurl/readinessLSMySegmentsSuite',
      events: 'https://events.baseurl/readinessLSMySegmentsSuite'
    };
    var getMySegmentsHits = mockForSegmentsPauseTest(testUrls, false);
    var start = Date.now();
    var splitio = SplitFactory(_objectSpread(_objectSpread({}, baseConfig), {}, {
      startup: {
        retriesOnFailureBeforeReady: 0
      },
      scheduler: {
        featuresRefreshRate: 3.1,
        segmentsRefreshRate: 1,
        metricsRefreshRate: 3000,
        impressionsRefreshRate: 3000
      },
      storage: {
        type: 'LOCALSTORAGE',
        prefix: 'not_using_segments'
      },
      urls: testUrls
    }));
    var CLIENTS_COUNT = 3; // Just so it's easier to read the assertions.

    var client = splitio.client();
    var client2 = splitio.client('nicolas2@split.io');
    var client3 = splitio.client('nicolas3@split.io');
    client.once(client.Event.SDK_READY, function () {
      t.ok(Date.now() - start < 50, 'It should be ready really quickly, without waiting for mySegments, as there were no segments in the first splits payload.');
      setTimeout(function () {
        t.equal(getMySegmentsHits(), 1 * CLIENTS_COUNT, 'mySegments should had been hit once per client on the first attempt, but it stopped syncing afterwards.');
      }, 2500); // Now we will wait until it picks up Splits, using the SDK_UPDATE event. Features are refreshed every 3s, but segments every 1s.

      client.once(client.Event.SDK_UPDATE, function () {
        // This update came with segments, it should have tried to fetch mySegments for all used keys.
        setTimeout(function () {
          t.equal(getMySegmentsHits(), 2 * CLIENTS_COUNT, 'It should have tried to synchronize mySegments as soon as it received a new Split with segments.');
        }, 0);
        setTimeout(function () {
          // Nasty ugly crap to avoid listening to the update coming from mySegment calls.
          client.once(client.Event.SDK_UPDATE, function () {
            setTimeout(function () {
              // This update left us in an state with no segments (removed the matcher we fetched on the previous one), it should stop the producer and not trigger more requests.
              t.equal(getMySegmentsHits(), 4 * CLIENTS_COUNT, 'It should have tried to synchronize mySegments periodically.');
              setTimeout(function () {
                t.equal(getMySegmentsHits(), 4 * CLIENTS_COUNT, 'It should have not tried to synchronize segments again after the last update that left us in a no segment state.');
                Promise.all([client2.destroy(), client3.destroy(), client.destroy()]).then(function () {
                  t.end();
                });
              }, 10000);
            }, 0);
          });
        }, 3000);
      });
    });
    client.once(client.Event.SDK_READY_TIMED_OUT, function () {
      t.fail('### SDK TIMED OUT - It should not timeout in this scenario as segments were not necessary.');
      t.end();
    });
  });
  assert.test(function (t) {
    // Testing how the SDK pauses/resumes segments synchronization.
    var testUrls = {
      sdk: 'https://sdk.baseurl/readinessMySegmentsSuite2',
      events: 'https://events.baseurl/readinessMySegmentsSuite2'
    };
    var getMySegmentsHits = mockForSegmentsPauseTest(testUrls, true);
    var start = Date.now();
    var splitio = SplitFactory(_objectSpread(_objectSpread({}, baseConfig), {}, {
      startup: {
        retriesOnFailureBeforeReady: 0
      },
      scheduler: {
        featuresRefreshRate: 3.1,
        segmentsRefreshRate: 1,
        metricsRefreshRate: 3000,
        impressionsRefreshRate: 3000
      },
      urls: testUrls
    }));
    var CLIENTS_COUNT = 3; // Just so it's easier to read the assertions.

    var client = splitio.client();
    var client2 = splitio.client('nicolas2@split.io');
    var client3 = splitio.client('nicolas3@split.io');
    client.once(client.Event.SDK_READY, function () {
      t.ok(Date.now() - start >= mySegmentsEndpointDelay, 'It should not be ready without waiting for mySegments, as there are segments in the first splits payload.');
      setTimeout(function () {
        t.equal(getMySegmentsHits(), 3 * CLIENTS_COUNT, 'mySegments should had been hit once per client on the first attempt and keep syncing afterwards.');
      }, 2500); // Now we will wait until it picks up splits, using the SDK_UPDATE event. Features are refreshed every 3s, but segments every 1s (plus sync time).

      client.once(client.Event.SDK_UPDATE, function () {
        // This update came without segments, it should not trigger an extra fetch.
        setTimeout(function () {
          t.equal(getMySegmentsHits(), 3 * CLIENTS_COUNT, 'It should have stopped synchronizing mySegments since it transitioned to no segments state.');
        }, 0);
        setTimeout(function () {
          client.once(client.Event.SDK_UPDATE, function () {
            setTimeout(function () {
              // This update left us in an state with segments again, it should trigger a request ASAP and restart the producer.
              t.equal(getMySegmentsHits(), 4 * CLIENTS_COUNT, 'It should have tried to synchronize mySegments periodically.');
              setTimeout(function () {
                t.equal(getMySegmentsHits(), 6 * CLIENTS_COUNT, 'It should keep the producer synchronizing periodically..');
                Promise.all([client2.destroy(), client3.destroy(), client.destroy()]).then(function () {
                  t.end();
                });
              }, 3000);
            }, 0);
          });
        }, 3000);
      });
    });
    client.once(client.Event.SDK_READY_TIMED_OUT, function () {
      t.fail('### SDK TIMED OUT - It should not timeout in this scenario as segments were not necessary.');
      t.end();
    });
  });
  assert.test(function (t) {
    // Testing when we start from scratch
    var testUrls = {
      sdk: 'https://sdk.baseurl/readinessLSMySegmentsSuite2',
      events: 'https://events.baseurl/readinessLSMySegmentsSuite2'
    };
    var getMySegmentsHits = mockForSegmentsPauseTest(testUrls, true);
    var start = Date.now();
    var splitio = SplitFactory(_objectSpread(_objectSpread({}, baseConfig), {}, {
      startup: {
        retriesOnFailureBeforeReady: 0
      },
      scheduler: {
        featuresRefreshRate: 3.1,
        segmentsRefreshRate: 1,
        metricsRefreshRate: 3000,
        impressionsRefreshRate: 3000
      },
      storage: {
        type: 'LOCALSTORAGE',
        prefix: 'using_segments'
      },
      urls: testUrls
    }));
    var CLIENTS_COUNT = 3; // Just so it's easier to read the assertions.

    var client = splitio.client();
    var client2 = splitio.client('nicolas2@split.io');
    var client3 = splitio.client('nicolas3@split.io');
    client.once(client.Event.SDK_READY, function () {
      t.ok(Date.now() - start >= mySegmentsEndpointDelay, 'It should not be ready without waiting for mySegments, as there are segments in the first splits payload.');
      setTimeout(function () {
        t.equal(getMySegmentsHits(), 3 * CLIENTS_COUNT, 'mySegments should had been hit once per client on the first attempt and keep syncing afterwards.');
      }, 2500); // Now we will wait until it picks up splits, using the SDK_UPDATE event. Features are refreshed every 3s, but segments every 1s (plus sync time).

      client.once(client.Event.SDK_UPDATE, function () {
        // This update came without segments, it should not trigger an extra fetch.
        setTimeout(function () {
          t.equal(getMySegmentsHits(), 3 * CLIENTS_COUNT, 'It should have stopped synchronizing mySegments since it transitioned to no segments state.');
        }, 0);
        setTimeout(function () {
          client.once(client.Event.SDK_UPDATE, function () {
            setTimeout(function () {
              // This update left us in an state with segments again, it should trigger a request ASAP and restart the producer.
              t.equal(getMySegmentsHits(), 4 * CLIENTS_COUNT, 'It should have tried to synchronize mySegments periodically.');
              setTimeout(function () {
                t.equal(getMySegmentsHits(), 6 * CLIENTS_COUNT, 'It should keep the producer synchronizing periodically..');
                Promise.all([client2.destroy(), client3.destroy(), client.destroy()]).then(function () {
                  t.end();
                });
              }, 3000);
            }, 0);
          });
        }, 3000);
      });
    });
    client.once(client.Event.SDK_READY_TIMED_OUT, function () {
      t.fail('### SDK TIMED OUT - It should not timeout in this scenario as segments were not necessary.');
      t.end();
    });
  });
  assert.test(function (t) {
    // Testing when we start from scratch with segments being previously used
    var testUrls = {
      sdk: 'https://sdk.baseurl/readinessLSMySegmentsSuite3',
      events: 'https://events.baseurl/readinessLSMySegmentsSuite3'
    };
    var getMySegmentsHits = mockForSegmentsPauseTest(testUrls, true);
    var start = Date.now();
    var splitio = SplitFactory(_objectSpread(_objectSpread({}, baseConfig), {}, {
      startup: {
        retriesOnFailureBeforeReady: 0
      },
      scheduler: {
        featuresRefreshRate: 3.1,
        segmentsRefreshRate: 1,
        metricsRefreshRate: 3000,
        impressionsRefreshRate: 3000
      },
      storage: {
        type: 'LOCALSTORAGE',
        prefix: 'using_segments'
      },
      urls: testUrls
    }));
    var CLIENTS_COUNT = 3; // Just so it's easier to read the assertions.

    var client = splitio.client();
    var client2 = splitio.client('nicolas2@split.io');
    var client3 = splitio.client('nicolas3@split.io');
    client.once(client.Event.SDK_READY, function () {
      t.ok(Date.now() - start >= mySegmentsEndpointDelay, 'It should not be ready without waiting for mySegments, when we start from cache it might be stale.');
      setTimeout(function () {
        t.equal(getMySegmentsHits(), 3 * CLIENTS_COUNT, 'mySegments should had been hit once per client on the first attempt and keep syncing afterwards.');
        Promise.all([client2.destroy(), client3.destroy(), client.destroy()]).then(function () {
          t.end();
        });
      }, 2500);
    });
    client.once(client.Event.SDK_READY_TIMED_OUT, function () {
      t.fail('### SDK TIMED OUT - It should not timeout in this scenario as segments were not necessary.');
      t.end();
    });
  });
  assert.test(function (t) {
    // Testing when we start from cache without segments being previously used, and first update has no segments.
    var testUrls = {
      sdk: 'https://sdk.baseurl/readinessLSMySegmentsSuite4',
      events: 'https://events.baseurl/readinessLSMySegmentsSuite4'
    };
    var getMySegmentsHits = mockForSegmentsPauseTest(testUrls, false);
    var start = Date.now();
    var splitio = SplitFactory(_objectSpread(_objectSpread({}, baseConfig), {}, {
      startup: {
        retriesOnFailureBeforeReady: 0
      },
      scheduler: {
        featuresRefreshRate: 3.1,
        segmentsRefreshRate: 1,
        metricsRefreshRate: 3000,
        impressionsRefreshRate: 3000
      },
      storage: {
        type: 'LOCALSTORAGE',
        prefix: 'not_using_segments'
      },
      urls: testUrls
    }));
    var CLIENTS_COUNT = 3; // Just so it's easier to read the assertions.

    var client = splitio.client();
    var client2 = splitio.client('nicolas2@split.io');
    var client3 = splitio.client('nicolas3@split.io');
    client.once(client.Event.SDK_READY, function () {
      t.ok(Date.now() - start < 50, 'It should be ready quickly, since it had no segments and update has no segments either.');
      setTimeout(function () {
        t.equal(getMySegmentsHits(), 1 * CLIENTS_COUNT, 'mySegments should had been hit once per client on the first attempt but stopped syncing afterwards');
        Promise.all([client2.destroy(), client3.destroy(), client.destroy()]).then(function () {
          t.end();
        });
      }, 4500);
    });
    client.once(client.Event.SDK_READY_TIMED_OUT, function () {
      t.fail('### SDK TIMED OUT - It should not timeout in this scenario as segments were not necessary.');
      t.end();
    });
  });
  assert.test(function (t) {
    // Testing when we start from cache without segments being previously used, and first update HAS segments.
    var testUrls = {
      sdk: 'https://sdk.baseurl/readinessLSMySegmentsSuite5',
      events: 'https://events.baseurl/readinessLSMySegmentsSuite5'
    };
    var getMySegmentsHits = mockForSegmentsPauseTest(testUrls, false); // I'm having the first update of Splits come with segments. In this scenario it'll wait for mySegments to download before being ready.

    fetchMock.get({
      url: testUrls.sdk + '/splitChanges?since=1457552669999',
      overwriteRoutes: true
    }, {
      status: 200,
      body: _objectSpread(_objectSpread({}, splitChangesUpdateWithSegmentsMock), {}, {
        since: 1457552669999,
        till: 1457552679999
      })
    });
    fetchMock.get(testUrls.sdk + '/splitChanges?since=1457552679999', {
      status: 200,
      body: {
        splits: [],
        since: 1457552679999,
        till: 1457552679999
      }
    });
    var start = Date.now();
    var splitio = SplitFactory(_objectSpread(_objectSpread({}, baseConfig), {}, {
      startup: {
        retriesOnFailureBeforeReady: 0
      },
      scheduler: {
        featuresRefreshRate: 3.1,
        segmentsRefreshRate: 1,
        metricsRefreshRate: 3000,
        impressionsRefreshRate: 3000
      },
      storage: {
        type: 'LOCALSTORAGE',
        prefix: 'not_using_segments'
      },
      urls: testUrls
    }));
    var CLIENTS_COUNT = 3; // Just so it's easier to read the assertions.

    var client = splitio.client();
    var client2 = splitio.client('nicolas2@split.io');
    var client3 = splitio.client('nicolas3@split.io');
    client.once(client.Event.SDK_READY, function () {
      var delay = Date.now() - start;
      t.ok(delay >= mySegmentsEndpointDelay, 'It should not be ready without waiting for mySegments, when we start from cache it might be stale.');
      console.log(delay);
      setTimeout(function () {
        t.equal(getMySegmentsHits(), 3 * CLIENTS_COUNT, 'mySegments should had been hit once per client on the first attempt but stopped syncing afterwards');
        Promise.all([client2.destroy(), client3.destroy(), client.destroy()]).then(function () {
          t.end();
        });
      }, 3000);
    });
    client.once(client.Event.SDK_READY_TIMED_OUT, function () {
      t.fail('### SDK TIMED OUT - It should not timeout in this scenario as segments were not necessary.');
      t.end();
    });
  });
  assert.test(function (t) {
    // Testing when we start from cache with segments being previously used, and update is empty.
    var testUrls = {
      sdk: 'https://sdk.baseurl/readinessLSMySegmentsSuite6',
      events: 'https://events.baseurl/readinessLSMySegmentsSuite6'
    };
    var getMySegmentsHits = mockForSegmentsPauseTest(testUrls, false);
    var start = Date.now();
    var splitio = SplitFactory(_objectSpread(_objectSpread({}, baseConfig), {}, {
      startup: {
        retriesOnFailureBeforeReady: 0
      },
      scheduler: {
        featuresRefreshRate: 3.1,
        segmentsRefreshRate: 1,
        metricsRefreshRate: 3000,
        impressionsRefreshRate: 3000
      },
      storage: {
        type: 'LOCALSTORAGE',
        prefix: 'using_segments'
      },
      urls: testUrls
    }));
    var CLIENTS_COUNT = 3; // Just so it's easier to read the assertions.

    var client = splitio.client();
    var client2 = splitio.client('nicolas2@split.io');
    var client3 = splitio.client('nicolas3@split.io');
    client.once(client.Event.SDK_READY, function () {
      t.ok(Date.now() - start >= mySegmentsEndpointDelay, 'It should not be ready without waiting for mySegments, when we start from cache it might be stale and we had segments even though the update has nothing.');
      setTimeout(function () {
        t.equal(getMySegmentsHits(), 3 * CLIENTS_COUNT, 'mySegments should had been hit once per client on the first attempt and kept syncing afterwards');
        Promise.all([client2.destroy(), client3.destroy(), client.destroy()]).then(function () {
          t.end();
        });
      }, 3000);
    });
    client.once(client.Event.SDK_READY_TIMED_OUT, function () {
      t.fail('### SDK TIMED OUT - It should not timeout in this scenario as segments were not necessary.');
      t.end();
    });
  });
  assert.test(function (t) {
    // Testing when we start from cache with segments being previously used and first update removes segments
    var testUrls = {
      sdk: 'https://sdk.baseurl/readinessLSMySegmentsSuite7',
      events: 'https://events.baseurl/readinessLSMySegmentsSuite7'
    };
    var getMySegmentsHits = mockForSegmentsPauseTest(testUrls, false); // I'm having the first update of Splits come without segments. In this scenario it'll NOT wait for mySegments to download before being ready.

    fetchMock.get({
      url: testUrls.sdk + '/splitChanges?since=1457552669999',
      overwriteRoutes: true
    }, {
      status: 200,
      body: _objectSpread(_objectSpread({}, splitChangesUpdateWithoutSegmentsMock), {}, {
        since: 1457552669999,
        till: 1457552679999
      })
    });
    fetchMock.get(testUrls.sdk + '/splitChanges?since=1457552679999', {
      status: 200,
      body: {
        splits: [],
        since: 1457552679999,
        till: 1457552679999
      }
    });
    var start = Date.now();
    var splitio = SplitFactory(_objectSpread(_objectSpread({}, baseConfig), {}, {
      startup: {
        retriesOnFailureBeforeReady: 0
      },
      scheduler: {
        featuresRefreshRate: 3.1,
        segmentsRefreshRate: 1,
        metricsRefreshRate: 3000,
        impressionsRefreshRate: 3000
      },
      storage: {
        type: 'LOCALSTORAGE',
        prefix: 'using_segments'
      },
      urls: testUrls
    }));
    var CLIENTS_COUNT = 3; // Just so it's easier to read the assertions.

    var client = splitio.client();
    var client2 = splitio.client('nicolas2@split.io');
    var client3 = splitio.client('nicolas3@split.io');
    client.once(client.Event.SDK_READY, function () {
      t.ok(Date.now() - start < 50, 'It should be ready without waiting for mySegments, since when it downloads changes it will have no more use for them.');
      setTimeout(function () {
        t.equal(getMySegmentsHits(), 1 * CLIENTS_COUNT, 'mySegments should had been hit once per client on the first attempt and stopped syncing afterwards');
        Promise.all([client2.destroy(), client3.destroy(), client.destroy()]).then(function () {
          t.end();
        });
      }, 3000);
    });
    client.once(client.Event.SDK_READY_TIMED_OUT, function () {
      t.fail('### SDK TIMED OUT - It should not timeout in this scenario as segments were not necessary.');
      t.end();
    });
  });
}