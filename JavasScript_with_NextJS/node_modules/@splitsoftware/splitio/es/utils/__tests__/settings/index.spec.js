import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
import _ from 'lodash';
import tape from 'tape-catch';
import SettingsFactory from '../../settings';
import { OPTIMIZED, DEBUG } from '../../constants';
tape('SETTINGS / check defaults', function (assert) {
  var settings = SettingsFactory({
    core: {
      authorizationKey: 'dummy token'
    }
  });
  assert.deepEqual(settings.urls, {
    sdk: 'https://sdk.split.io/api',
    events: 'https://events.split.io/api',
    auth: 'https://auth.split.io/api',
    streaming: 'https://streaming.split.io'
  });
  assert.equal(settings.sync.impressionsMode, OPTIMIZED);
  assert.end();
});
tape('SETTINGS / override with defaults', function (assert) {
  var settings = SettingsFactory({
    core: {
      authorizationKey: 'dummy token'
    },
    sync: {
      impressionsMode: 'some'
    }
  });
  assert.equal(settings.sync.impressionsMode, OPTIMIZED);
  assert.end();
});
tape('SETTINGS / impressionsMode should be configurable', function (assert) {
  var settings = SettingsFactory({
    core: {
      authorizationKey: 'dummy token'
    },
    sync: {
      impressionsMode: DEBUG
    }
  });
  assert.deepEqual(settings.sync.impressionsMode, DEBUG);
  assert.end();
});
tape('SETTINGS / key and traffic type should be overwritable', function (assert) {
  var settings = SettingsFactory({
    core: {
      authorizationKey: 'dummy token',
      key: 'start_key'
    }
  });
  assert.equal(settings.core.key, 'start_key', 'When creating a setting instance, it will have the provided value for key');
  assert.equal(settings.core.trafficType, undefined, 'and if no traffic type was provided, it will be undefined.');
  var settings2 = settings.overrideKeyAndTT('second_key');
  assert.notEqual(settings, settings2, 'If we call overrideKeyAndTT we get a new settings instance');
  assert.equal(settings2.core.key, 'second_key', 'with the key overriden by the value passed to it.');
  assert.equal(settings2.core.trafficType, undefined, 'As no traffic type was provided, it will still be undefined.');
  assert.deepEqual(_objectSpread(_objectSpread({}, settings), {}, {
    core: _objectSpread(_objectSpread({}, settings.core), {}, {
      key: 'second_key',
      trafficType: undefined
    })
  }), settings2, 'Of course, the new instance should match with the origin settings on every property but the overriden key.');
  var settings3 = settings.overrideKeyAndTT('third_key', 'myTT');
  assert.equal(settings3.core.key, 'third_key', 'If we call overrideKeyAndTT with both key and traffic type, new instance has key overriden as before');
  assert.equal(settings3.core.trafficType, 'myTT', 'and as we provided a traffic type, we have that traffic type now.');
  assert.deepEqual(_objectSpread(_objectSpread({}, settings), {}, {
    core: _objectSpread(_objectSpread({}, settings.core), {}, {
      key: 'third_key',
      trafficType: 'myTT'
    })
  }), settings3, 'Of course, the new instance should match with the origin settings on every property but the overriden key and trafficType.');
  var settings4 = settings3.overrideKeyAndTT('fourth_key');
  assert.equal(settings4.core.key, 'fourth_key', 'If we call overrideKeyAndTT with only key and NO traffic type, new instance has key overriden as before');
  assert.equal(settings4.core.trafficType, undefined, 'but traffic type should be blanked. (new key may be different tt)');
  assert.deepEqual(_objectSpread(_objectSpread({}, settings3), {}, {
    core: _objectSpread(_objectSpread({}, settings3.core), {}, {
      key: 'fourth_key',
      trafficType: undefined
    })
  }), settings4, 'Of course, the new instance should match with the origin settings on every property but the overriden key and trafficType.');
  assert.end();
});
tape('SETTINGS / urls should be configurable', function (assert) {
  var urls = {
    sdk: 'sdk-url',
    events: 'events-url',
    auth: 'auth-url',
    streaming: 'streaming-url'
  };
  var settings = SettingsFactory({
    core: {
      authorizationKey: 'dummy token'
    },
    urls: urls
  });
  assert.deepEqual(settings.urls, urls);
  assert.end();
});
tape('SETTINGS / required properties should be always present', function (assert) {
  var locatorAuthorizationKey = _.property('core.authorizationKey');

  var locatorSchedulerFeaturesRefreshRate = _.property('scheduler.featuresRefreshRate');

  var locatorSchedulerSegmentsRefreshRate = _.property('scheduler.segmentsRefreshRate');

  var locatorSchedulerMetricsRefreshRate = _.property('scheduler.metricsRefreshRate');

  var locatorSchedulerImpressionsRefreshRate = _.property('scheduler.impressionsRefreshRate');

  var locatorUrlsSDK = _.property('urls.sdk');

  var locatorUrlsEvents = _.property('urls.events');

  var locatorStartupRequestTimeoutBeforeReady = _.property('startup.requestTimeoutBeforeReady');

  var locatorStartupRetriesOnFailureBeforeReady = _.property('startup.retriesOnFailureBeforeReady');

  var locatorStartupReadyTimeout = _.property('startup.readyTimeout');

  var settings = SettingsFactory({
    core: {
      authorizationKey: 'dummy token'
    },
    scheduler: {
      featuresRefreshRate: undefined,
      segmentsRefreshRate: undefined,
      metricsRefreshRate: undefined,
      impressionsRefreshRate: undefined
    },
    urls: {
      sdk: undefined,
      events: undefined
    },
    startup: {
      requestTimeoutBeforeReady: undefined,
      retriesOnFailureBeforeReady: undefined,
      readyTimeout: undefined
    }
  });
  assert.ok(locatorAuthorizationKey(settings) !== undefined, 'authorizationKey should be present');
  assert.ok(locatorSchedulerFeaturesRefreshRate(settings) !== undefined, 'scheduler.featuresRefreshRate should be present');
  assert.ok(locatorSchedulerSegmentsRefreshRate(settings) !== undefined, 'scheduler.segmentsRefreshRate should be present');
  assert.equal(locatorSchedulerMetricsRefreshRate(settings), 120 * 1000, 'scheduler.metricsRefreshRate should be present');
  assert.ok(locatorSchedulerImpressionsRefreshRate(settings) !== undefined, 'scheduler.impressionsRefreshRate should be present');
  assert.ok(locatorUrlsSDK(settings) !== undefined, 'urls.sdk should be present');
  assert.ok(locatorUrlsEvents(settings) !== undefined, 'urls.events should be present');
  assert.ok(locatorStartupRequestTimeoutBeforeReady(settings) !== undefined, 'startup.requestTimeoutBeforeReady should be present');
  assert.ok(locatorStartupRetriesOnFailureBeforeReady(settings) !== undefined, 'startup.retriesOnFailureBeforeReady should be present');
  assert.ok(locatorStartupReadyTimeout(settings) !== undefined, 'startup.readyTimeout should be present');
  assert.end();
});
tape('SETTINGS / urls should be correctly assigned', function (assert) {
  var settings = SettingsFactory({
    core: {
      authorizationKey: 'dummy token'
    }
  });
  var baseSdkUrl = 'https://sdk.split.io/api';
  var baseEventsUrl = 'https://events.split.io/api';
  ['/mySegments/nico', '/mySegments/events@split', '/mySegments/metrics@split', '/mySegments/testImpressions@split', '/mySegments/testImpressions', '/mySegments/events', '/mySegments/metrics', '/splitChanges?since=-1', '/splitChanges?since=100', '/segmentChanges/segment1?since=100', '/segmentChanges/events?since=100', '/segmentChanges/beacon?since=100', '/segmentChanges/metrics?since=100', '/segmentChanges/testImpressions?since=100'].forEach(function (relativeUrl) {
    assert.equal(settings.url(relativeUrl), "".concat(baseSdkUrl).concat(relativeUrl), "Our settings URL function should use ".concat(baseSdkUrl, " as base for ").concat(relativeUrl));
  });
  ['/metrics/times', '/metrics/counters', '/events/bulk', '/events/beacon', '/testImpressions/bulk', '/testImpressions/beacon', '/testImpressions/count/beacon'].forEach(function (relativeUrl) {
    assert.equal(settings.url(relativeUrl), "".concat(baseEventsUrl).concat(relativeUrl), "Our settings URL function should use ".concat(baseEventsUrl, " as base for ").concat(relativeUrl));
  });
  assert.end();
});