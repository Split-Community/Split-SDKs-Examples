import _regeneratorRuntime from "@babel/runtime/regenerator";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
import Redis from 'ioredis';
import tape from 'tape-catch';
import KeyBuilder from '../../../Keys';
import CountCacheInRedis from '../../../CountCache/InRedis';
import SettingsFactory from '../../../../utils/settings';
var settings = SettingsFactory({
  storage: {
    type: 'REDIS',
    prefix: 'count_cache_UT'
  }
});
tape('COUNT CACHE IN REDIS / cover basic behavior', /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(assert) {
    var connection, keys, cache, keyOne, keyTwo, metricOneValue, metricTwoValue, keysToClean;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            connection = new Redis(settings.storage.options);
            keys = new KeyBuilder(settings);
            cache = new CountCacheInRedis(keys, connection);
            assert.true(cache.isEmpty(), 'isEmpty always returns true, just there to respect the interface.');
            assert.notEqual(_typeof(cache.clear), 'undefined', 'Clear method should be there to respect interface.');
            _context.next = 7;
            return cache.track('counted-metric-one');

          case 7:
            _context.next = 9;
            return cache.track('counted-metric-one');

          case 9:
            keyOne = keys.buildCountKey('counted-metric-one');
            keyTwo = keys.buildCountKey('counted-metric-two');
            _context.next = 13;
            return connection.get(keyOne);

          case 13:
            metricOneValue = _context.sent;
            assert.equal(metricOneValue, '2');
            _context.next = 17;
            return cache.track('counted-metric-two');

          case 17:
            _context.next = 19;
            return connection.get(keyOne);

          case 19:
            metricOneValue = _context.sent;
            _context.next = 22;
            return connection.get(keyTwo);

          case 22:
            metricTwoValue = _context.sent;
            assert.equal(metricOneValue, '2');
            assert.equal(metricTwoValue, '1');
            assert.true(cache.isEmpty(), 'isEmpty always returns true, just there to respect the interface.'); // Clean up

            _context.next = 28;
            return connection.keys('count_cache_UT.*');

          case 28:
            keysToClean = _context.sent;

            if (!keysToClean.length) {
              _context.next = 32;
              break;
            }

            _context.next = 32;
            return connection.del(keysToClean);

          case 32:
            connection.quit();
            assert.end();

          case 34:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());