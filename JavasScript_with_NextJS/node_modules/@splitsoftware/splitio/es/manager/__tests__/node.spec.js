import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import tape from 'tape-catch';
import Redis from 'ioredis';
import splitObject from './mocks/input';
import splitView from './mocks/output';
import Manager from '../';
import SplitCacheInRedis from '../../storage/SplitCache/InRedis';
import KeyBuilder from '../../storage/Keys';
import SettingsFactory from '../../utils/settings';
import sinon from 'sinon';
var settings = SettingsFactory({
  storage: {
    type: 'REDIS'
  }
});
var contextMock = {
  get: sinon.stub().callsFake(function (entityName) {
    if (entityName === 'is_destroyed') return false;
    return {
      hasStatusManagerExtension: true
    };
  }),
  constants: {
    DESTROYED: 'is_destroyed',
    STATUS_MANAGER: 'status_manager'
  }
};
tape('MANAGER API / In Redis', /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(assert) {
    var connection, keys, cache, manager, views;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            connection = new Redis(settings.storage.options);
            keys = new KeyBuilder(settings);
            cache = new SplitCacheInRedis(keys, connection);
            manager = new Manager(cache, contextMock);
            _context.next = 6;
            return cache.flush();

          case 6:
            _context.next = 8;
            return cache.addSplit(splitObject.name, JSON.stringify(splitObject));

          case 8:
            _context.next = 10;
            return manager.splits();

          case 10:
            views = _context.sent;
            assert.deepEqual(views[0], splitView);
            connection.quit();
            assert.end();

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());