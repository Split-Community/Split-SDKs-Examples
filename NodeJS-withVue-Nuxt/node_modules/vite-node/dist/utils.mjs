import { fileURLToPath, pathToFileURL } from 'url';
import { existsSync } from 'fs';
import { relative, resolve } from 'pathe';
import { isNodeBuiltin } from 'mlly';

const isWindows = process.platform === "win32";
function slash(str) {
  return str.replace(/\\/g, "/");
}
function mergeSlashes(str) {
  return str.replace(/\/\//g, "/");
}
function normalizeRequestId(id, base) {
  if (base && id.startsWith(base))
    id = `/${id.slice(base.length)}`;
  return id.replace(/^\/@id\/__x00__/, "\0").replace(/^\/@id\//, "").replace(/^__vite-browser-external:/, "").replace(/^(node|file):/, "").replace(/^\/+/, "/").replace(/\?v=\w+/, "?").replace(/&v=\w+/, "").replace(/\?t=\w+/, "?").replace(/&t=\w+/, "").replace(/\?import/, "?").replace(/&import/, "").replace(/\?&/, "?").replace(/\?+$/, "");
}
function normalizeModuleId(id) {
  return id.replace(/\\/g, "/").replace(/^\/@fs\//, "/").replace(/^file:\//, "/").replace(/^\/+/, "/");
}
function isPrimitive(v) {
  return v !== Object(v);
}
function pathFromRoot(root, filename) {
  if (isNodeBuiltin(filename))
    return filename;
  filename = filename.replace(/^\/@fs\//, isWindows ? "" : "/");
  if (!filename.startsWith(root))
    return filename;
  const relativePath = relative(root, filename);
  const segments = relativePath.split("/");
  const startIndex = segments.findIndex((segment) => segment !== ".." && segment !== ".");
  return `/${segments.slice(startIndex).join("/")}`;
}
function toFilePath(id, root) {
  let absolute = (() => {
    if (id.startsWith("/@fs/"))
      return id.slice(4);
    if (!id.startsWith(root) && id.startsWith("/")) {
      const resolved = resolve(root, id.slice(1));
      if (existsSync(resolved.replace(/\?.*$/, "")))
        return resolved;
    }
    return id;
  })();
  if (absolute.startsWith("//"))
    absolute = absolute.slice(1);
  return isWindows && absolute.startsWith("/") ? slash(fileURLToPath(pathToFileURL(absolute.slice(1)).href)) : absolute;
}
let SOURCEMAPPING_URL = "sourceMa";
SOURCEMAPPING_URL += "ppingURL";
async function withInlineSourcemap(result) {
  const { code, map } = result;
  if (code.includes(`${SOURCEMAPPING_URL}=`))
    return result;
  if (map)
    result.code = `${code}

//# ${SOURCEMAPPING_URL}=data:application/json;charset=utf-8;base64,${Buffer.from(JSON.stringify(map), "utf-8").toString("base64")}
`;
  return result;
}
function toArray(array) {
  if (array === null || array === void 0)
    array = [];
  if (Array.isArray(array))
    return array;
  return [array];
}

export { isPrimitive, isWindows, mergeSlashes, normalizeModuleId, normalizeRequestId, pathFromRoot, slash, toArray, toFilePath, withInlineSourcemap };
