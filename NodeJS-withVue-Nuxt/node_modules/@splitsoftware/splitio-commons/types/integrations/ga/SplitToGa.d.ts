/// <reference types="google.analytics" />
import { SplitIO } from '../../types';
import { IIntegration } from '../types';
import { SplitToGoogleAnalyticsOptions } from './types';
import { ILogger } from '../../logger/types';
export declare class SplitToGa implements IIntegration {
    static defaultTrackerNames: string[];
    private trackerNames;
    private filter?;
    private mapper?;
    private impressions;
    private events;
    private log;
    static defaultMapper({ type, payload }: SplitIO.IntegrationData): UniversalAnalytics.FieldsObject;
    static getGa(): UniversalAnalytics.ga | undefined;
    /**
     * Validates if a given object is a UniversalAnalytics.FieldsObject instance, and logs a warning if not.
     * It checks that the object contains a `hitType`, since it is the minimal field required to send the hit
     * and avoid the GA error `No hit type specified. Aborting hit.`.
     * Other validations (e.g., an `event` hitType must have a `eventCategory` and `eventAction`) are handled
     * and logged (as warnings or errors depending the case) by GA debugger, but the hit is sent anyway.
     *
     * @param {object} log factory logger
     * @param {UniversalAnalytics.FieldsObject} fieldsObject object to validate.
     * @returns {boolean} Whether the data instance is a valid FieldsObject or not.
     */
    static validateFieldsObject(log: ILogger, fieldsObject: any): fieldsObject is UniversalAnalytics.FieldsObject;
    /**
     * constructor description
     * @param {object} options options passed at the SDK integrations settings (isomorphic SDK) or the SplitToGoogleAnalytics plugin (pluggable browser SDK)
     */
    constructor(log: ILogger, options: SplitToGoogleAnalyticsOptions);
    queue(data: SplitIO.IntegrationData): void;
}
