import { ISplitsCacheSync } from './types';
import { ISplit } from '../dtos/types';
/**
 * This class provides a skeletal implementation of the ISplitsCacheSync interface
 * to minimize the effort required to implement this interface.
 */
export declare abstract class AbstractSplitsCacheSync implements ISplitsCacheSync {
    abstract addSplit(name: string, split: string): boolean;
    addSplits(entries: [string, string][]): boolean[];
    abstract removeSplit(name: string): boolean;
    removeSplits(names: string[]): boolean[];
    abstract getSplit(name: string): string | null;
    getSplits(names: string[]): Record<string, string | null>;
    abstract setChangeNumber(changeNumber: number): boolean;
    abstract getChangeNumber(): number;
    getAll(): string[];
    abstract getSplitNames(): string[];
    abstract trafficTypeExists(trafficType: string): boolean;
    abstract usesSegments(): boolean;
    abstract clear(): void;
    /**
     * Check if the splits information is already stored in cache. This data can be preloaded.
     * It is used as condition to emit SDK_SPLITS_CACHE_LOADED, and then SDK_READY_FROM_CACHE.
     */
    checkCache(): boolean;
    /**
     * Kill `name` split and set `defaultTreatment` and `changeNumber`.
     * Used for SPLIT_KILL push notifications.
     *
     * @param {string} name
     * @param {string} defaultTreatment
     * @param {number} changeNumber
     * @returns {Promise} a promise that is resolved once the split kill is performed. The fulfillment value is a boolean: `true` if the kill success updating the split or `false` if no split is updated,
     * for instance, if the `changeNumber` is old, or if the split is not found (e.g., `/splitchanges` hasn't been fetched yet), or if the storage fails to apply the update.
     */
    killLocally(name: string, defaultTreatment: string, changeNumber: number): boolean;
}
/**
 * Given a parsed split, it returns a boolean flagging if its conditions use segments matchers (rules & whitelists).
 * This util is intended to simplify the implementation of `splitsCache::usesSegments` method
 */
export declare function usesSegments(split: ISplit): boolean;
