import { KeyBuilderSS } from '../KeyBuilderSS';
import { IPluggableStorageWrapper, ISegmentsCacheAsync } from '../types';
import { ILogger } from '../../logger/types';
/**
 * ISegmentsCacheAsync implementation for pluggable storages.
 */
export declare class SegmentsCachePluggable implements ISegmentsCacheAsync {
    private readonly log;
    private readonly keys;
    private readonly wrapper;
    constructor(log: ILogger, keys: KeyBuilderSS, wrapper: IPluggableStorageWrapper);
    /**
     * Add a list of `segmentKeys` to the given segment `name`.
     * The returned promise is resolved when the operation success
     * or rejected if wrapper operation fails.
     */
    addToSegment(name: string, segmentKeys: string[]): Promise<boolean | void>;
    /**
     * Remove a list of `segmentKeys` from the given segment `name`.
     * The returned promise is resolved when the operation success
     * or rejected if wrapper operation fails.
     */
    removeFromSegment(name: string, segmentKeys: string[]): Promise<boolean | void>;
    /**
     * Returns a promise that resolves with a boolean value indicating if `key` is part of `name` segment.
     * Promise can be rejected if wrapper operation fails.
     */
    isInSegment(name: string, key: string): Promise<boolean>;
    /**
     * Set till number for the given segment `name`.
     * The returned promise is resolved when the operation success,
     * or rejected if it fails (e.g., wrapper operation fails).
     */
    setChangeNumber(name: string, changeNumber: number): Promise<boolean | void>;
    /**
     * Get till number or -1 if it's not defined.
     * The returned promise is resolved with the changeNumber or -1 if it doesn't exist or a wrapper operation fails.
     * The promise will never be rejected.
     */
    getChangeNumber(name: string): Promise<number>;
    /**
     * Add the given segment names to the set of registered segments.
     * The returned promise is resolved when the operation success,
     * or rejected if it fails (e.g., wrapper operation fails).
     */
    registerSegments(segments: string[]): Promise<boolean | void>;
    /**
     * Returns a promise that resolves with the set of registered segments in a list,
     * or rejected if it fails (e.g., wrapper operation fails).
     */
    getRegisteredSegments(): Promise<string[]>;
    /** @TODO implement if required by DataLoader or Producer mode  */
    clear(): Promise<boolean>;
}
