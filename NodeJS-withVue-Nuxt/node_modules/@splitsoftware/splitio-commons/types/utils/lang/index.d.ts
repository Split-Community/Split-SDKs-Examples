/**
 * Checks if the target string ends with the sub string.
 */
export declare function endsWith(target: any, sub: any, caseInsensitive?: boolean): boolean;
/**
 * Loops through a source collection (an object or an array) running iteratee
 * against each element. It returns the first element for which iteratee returned
 * a truthy value and stops the loop.
 * Iteratee receives three arguments (element, key/index, collection)
 */
export declare function find<T extends any[] | Record<string, any>, V = T extends any[] ? T[0] : T[keyof T], K = T extends any[] ? number : keyof T & string>(source: T | null | undefined, iteratee: (value: V, key: K, source: T) => boolean): V | undefined;
/**
 * Evaluates iteratee for each element of the source array. Returns the index of the first element
 * for which iteratee returns truthy. If no element is found or there's an issue with the params it returns -1.
 */
export declare function findIndex<T>(source: T[], iteratee: (value: T, index: number, source: T[]) => boolean): number;
/**
 * Executes iteratee for given obj own props.
 */
export declare function forOwn<T>(obj: {
    [key: string]: T;
}, iteratee: (value: T, key: string, obj: {
    [key: string]: T;
}) => any): {
    [key: string]: T;
};
/**
 * Safely retrieve the specified prop from obj. If we can't retrieve
 * that property value, we return the default value.
 */
export declare function get(obj: any, prop: any, val?: any): any;
/**
 * Parses an array into a map of different arrays, grouping by the specified prop value.
 */
export declare function groupBy<T extends Record<string, any>>(source: T[], prop: string): Record<string, T[]>;
/**
 * Checks if a given value is a boolean.
 */
export declare function isBoolean(val: any): boolean;
/**
 * Checks if a given value is a finite value of number type or Number object.
 * Unlike `Number.isFinite`, it also tests Number object instances.
 * Unlike global `isFinite`, it returns false if the value is not a number or Number object instance.
 */
export declare function isFiniteNumber(val: any): boolean;
/**
 * Checks if a given value is an integer value of number type or Number object.
 * Unlike `Number.isInteger`, it also tests Number object instances.
 */
export declare function isIntegerNumber(val: any): boolean;
/**
 * Checks if a given value is a NaN value of number type or Number object.
 * Unlike `Number.isNaN`, it also tests Number object instances.
 * Unlike global `isNan`, it returns false if the value is not a number or Number object instance.
 */
export declare function isNaNNumber(val: any): boolean;
/**
 * Validates if a value is an object created by the Object constructor (plain object).
 * It checks `constructor.name` to avoid false negatives when validating values on a separate VM context, which has its own global built-ins.
 */
export declare function isObject(obj: any): boolean;
/**
 * Checks if a given value is a string.
 */
export declare function isString(val: any): val is string;
/**
 * String sanitizer. Returns the provided value converted to uppercase if it is a string.
 */
export declare function stringToUpperCase(val: any): any;
/**
 * Deep copy version of Object.assign using recursion.
 * There are some assumptions here. It's for internal use and we don't need verbose errors
 * or to ensure the data types or whatever. Parameters should always be correct (at least have a target and a source, of type object).
 */
export declare function merge(target: {
    [key: string]: any;
}, source: {
    [key: string]: any;
}, ...rest: any[]): object;
/**
 * Checks if the target string starts with the sub string.
 */
export declare function startsWith(target: any, sub: any): boolean;
/**
 * Transforms a value into a number.
 * Note: We're not expecting anything fancy here. If we are at some point, add more type checks.
 */
export declare function toNumber(val: any): number;
/**
 * Transforms a value into it's string representation.
 */
export declare function toString(val: any): string;
/**
 * Removes duplicate items on an array of strings.
 */
export declare function uniq(arr: string[]): string[];
/**
 * Removes duplicate items on an array of objects using an optional `stringify` function as equality criteria.
 * It uses JSON.stringify as default criteria.
 */
export declare function uniqAsStrings<T>(arr: T[], stringify?: (value: T) => string): T[];
/**
 * Returns a number to be used as ID, which will be unique.
 */
export declare function uniqueId(): number;
