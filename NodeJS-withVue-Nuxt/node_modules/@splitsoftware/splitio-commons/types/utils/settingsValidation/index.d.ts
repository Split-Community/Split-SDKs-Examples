import { ISettingsValidationParams } from './types';
import { ISettings } from '../../types';
export declare const base: {
    mode: import("../../types").SDKMode;
    core: {
        authorizationKey: undefined;
        key: undefined;
        trafficType: undefined;
        labelsEnabled: boolean;
        IPAddressesEnabled: undefined;
    };
    scheduler: {
        featuresRefreshRate: number;
        segmentsRefreshRate: number;
        telemetryRefreshRate: number;
        impressionsRefreshRate: number;
        offlineRefreshRate: number;
        eventsPushRate: number;
        eventsQueueSize: number;
        impressionsQueueSize: number;
        pushRetryBackoffBase: number;
    };
    urls: {
        sdk: string;
        events: string;
        auth: string;
        streaming: string;
        telemetry: string;
    };
    storage: undefined;
    debug: undefined;
    impressionListener: undefined;
    version: undefined;
    integrations: undefined;
    streamingEnabled: boolean;
    sync: {
        splitFilters: undefined;
        impressionsMode: string;
        localhostMode: undefined;
    };
    log: undefined;
};
/**
 * Validates the given config and use it to build a settings object.
 * NOTE: it doesn't validate the Api Key. Call `validateApikey` or `validateAndTrackApiKey` for that after settings validation.
 *
 * @param config user defined configuration
 * @param validationParams defaults and fields validators used to validate and creates a settings object from a given config
 */
export declare function settingsValidation(config: unknown, validationParams: ISettingsValidationParams): ISettings;
