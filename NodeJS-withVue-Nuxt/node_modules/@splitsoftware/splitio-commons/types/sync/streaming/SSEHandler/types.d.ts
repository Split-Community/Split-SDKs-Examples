import { ControlType } from '../constants';
import { MY_SEGMENTS_UPDATE, MY_SEGMENTS_UPDATE_V2, SEGMENT_UPDATE, SPLIT_UPDATE, SPLIT_KILL, CONTROL, OCCUPANCY } from '../types';
export interface IMySegmentsUpdateData {
    type: MY_SEGMENTS_UPDATE;
    changeNumber: number;
    includesPayload: boolean;
    segmentList?: string[];
}
export declare enum Compression {
    None = 0,
    Gzip = 1,
    Zlib = 2
}
export declare enum UpdateStrategy {
    UnboundedFetchRequest = 0,
    BoundedFetchRequest = 1,
    KeyList = 2,
    SegmentRemoval = 3
}
export interface KeyList {
    a?: string[];
    r?: string[];
}
export interface IMySegmentsUpdateV2Data {
    type: MY_SEGMENTS_UPDATE_V2;
    changeNumber: number;
    segmentName: string;
    c: Compression;
    d: string;
    u: UpdateStrategy;
}
export interface ISegmentUpdateData {
    type: SEGMENT_UPDATE;
    changeNumber: number;
    segmentName: string;
}
export interface ISplitUpdateData {
    type: SPLIT_UPDATE;
    changeNumber: number;
}
export interface ISplitKillData {
    type: SPLIT_KILL;
    changeNumber: number;
    splitName: string;
    defaultTreatment: string;
}
export interface IControlData {
    type: CONTROL;
    controlType: ControlType;
}
export interface IOccupancyData {
    type: OCCUPANCY;
    metrics: {
        publishers: number;
    };
}
export declare type INotificationData = IMySegmentsUpdateData | IMySegmentsUpdateV2Data | ISegmentUpdateData | ISplitUpdateData | ISplitKillData | IControlData | IOccupancyData;
export declare type INotificationMessage = {
    parsedData: INotificationData;
    channel: string;
    timestamp: number;
    data: string;
};
export declare type INotificationError = Event & {
    parsedData?: any;
    message?: string;
};
export declare type SegmentsData = string[] | {
    name: string;
    add: boolean;
};
