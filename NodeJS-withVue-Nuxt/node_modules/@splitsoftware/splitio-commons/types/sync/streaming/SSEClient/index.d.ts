import { IEventSourceConstructor } from '../../../services/types';
import { ISettings } from '../../../types';
import { IAuthTokenPushEnabled } from '../AuthClient/types';
import { ISSEClient, ISseEventHandler } from './types';
/**
 * Handles streaming connections with EventSource API
 */
export declare class SSEClient implements ISSEClient {
    eventSource?: IEventSourceConstructor;
    streamingUrl: string;
    connection?: InstanceType<IEventSourceConstructor>;
    handler?: ISseEventHandler;
    useHeaders?: boolean;
    headers: Record<string, string>;
    /**
     * SSEClient constructor.
     *
     * @param settings Validated settings.
     * @param useHeaders True to send metadata as headers or false to send as query params. If `true`, the provided EventSource must support headers.
     * @param getEventSource Function to get the EventSource constructor.
     * @throws 'EventSource API is not available. ' if EventSource is not available.
     */
    constructor(settings: ISettings, useHeaders?: boolean, getEventSource?: () => (IEventSourceConstructor | undefined));
    setEventHandler(handler: ISseEventHandler): void;
    /**
     * Open the connection with a given authToken
     *
     * @param {IAuthTokenPushEnabled} authToken
     * @throws {TypeError} Will throw an error if `authToken` is undefined
     */
    open(authToken: IAuthTokenPushEnabled): void;
    /** Close connection  */
    close(): void;
}
