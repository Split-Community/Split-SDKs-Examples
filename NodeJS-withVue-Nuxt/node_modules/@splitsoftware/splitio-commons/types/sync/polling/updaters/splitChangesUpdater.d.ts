import { ISet } from '../../../utils/lang/sets';
import { ISegmentsCacheBase, ISplitsCacheBase } from '../../../storages/types';
import { ISplitChangesFetcher } from '../fetchers/types';
import { ISplit } from '../../../dtos/types';
import { ISplitsEventEmitter } from '../../../readiness/types';
import { ILogger } from '../../../logger/types';
declare type ISplitChangesUpdater = (noCache?: boolean) => Promise<boolean>;
/**
 * Collect segments from a raw split definition.
 * Exported for testing purposes.
 */
export declare function parseSegments({ conditions }: ISplit): ISet<string>;
interface ISplitMutations {
    added: [string, string][];
    removed: string[];
    segments: string[];
}
/**
 * Given the list of splits from /splitChanges endpoint, it returns the mutations,
 * i.e., an object with added splits, removed splits and used segments.
 * Exported for testing purposes.
 */
export declare function computeSplitsMutation(entries: ISplit[]): ISplitMutations;
/**
 * factory of SplitChanges updater, a task that:
 *  - fetches split changes using `splitChangesFetcher`
 *  - updates `splitsCache`
 *  - uses `splitsEventEmitter` to emit events related to split data updates
 *
 * @param log  Logger instance
 * @param splitChangesFetcher  Fetcher of `/splitChanges`
 * @param splits  Splits storage, with sync or async methods
 * @param segments  Segments storage, with sync or async methods
 * @param splitsEventEmitter  Optional readiness manager. Not required for synchronizer or producer mode.
 * @param requestTimeoutBeforeReady  How long the updater will wait for the request to timeout. Default 0, i.e., never timeout.
 * @param retriesOnFailureBeforeReady  How many retries on `/splitChanges` we the updater do in case of failure or timeout. Default 0, i.e., no retries.
 */
export declare function splitChangesUpdaterFactory(log: ILogger, splitChangesFetcher: ISplitChangesFetcher, splits: ISplitsCacheBase, segments: ISegmentsCacheBase, splitsEventEmitter?: ISplitsEventEmitter, requestTimeoutBeforeReady?: number, retriesOnFailureBeforeReady?: number, isClientSide?: boolean): ISplitChangesUpdater;
export {};
