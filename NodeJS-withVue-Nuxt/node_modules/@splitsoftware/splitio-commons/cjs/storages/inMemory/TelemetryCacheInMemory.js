"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelemetryCacheInMemory = exports.shouldRecordTelemetry = void 0;
var findLatencyIndex_1 = require("../findLatencyIndex");
var MAX_STREAMING_EVENTS = 20;
var MAX_TAGS = 10;
function newBuckets() {
    // MAX_LATENCY_BUCKET_COUNT (length) is 23;
    return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
}
var ACCEPTANCE_RANGE = 0.001;
/**
 * Used on client-side. 0.1% of instances will track telemetry
 */
function shouldRecordTelemetry() {
    return Math.random() <= ACCEPTANCE_RANGE;
}
exports.shouldRecordTelemetry = shouldRecordTelemetry;
var TelemetryCacheInMemory = /** @class */ (function () {
    function TelemetryCacheInMemory() {
        this.notReadyUsage = 0;
        this.impressionStats = [0, 0, 0];
        this.eventStats = [0, 0];
        // @ts-expect-error
        this.lastSync = {};
        // @ts-expect-error
        this.httpErrors = {};
        // @ts-expect-error
        this.httpLatencies = {};
        this.authRejections = 0;
        this.tokenRefreshes = 0;
        this.streamingEvents = [];
        this.tags = [];
        // @ts-expect-error
        this.exceptions = {};
        // @ts-expect-error
        this.latencies = {};
    }
    TelemetryCacheInMemory.prototype.getTimeUntilReady = function () {
        return this.timeUntilReady;
    };
    TelemetryCacheInMemory.prototype.recordTimeUntilReady = function (ms) {
        this.timeUntilReady = ms;
    };
    TelemetryCacheInMemory.prototype.getTimeUntilReadyFromCache = function () {
        return this.timeUntilReadyFromCache;
    };
    TelemetryCacheInMemory.prototype.recordTimeUntilReadyFromCache = function (ms) {
        this.timeUntilReadyFromCache = ms;
    };
    TelemetryCacheInMemory.prototype.getNonReadyUsage = function () {
        return this.notReadyUsage;
    };
    TelemetryCacheInMemory.prototype.recordNonReadyUsage = function () {
        this.notReadyUsage++;
    };
    TelemetryCacheInMemory.prototype.getImpressionStats = function (type) {
        return this.impressionStats[type];
    };
    TelemetryCacheInMemory.prototype.recordImpressionStats = function (type, count) {
        this.impressionStats[type] += count;
    };
    TelemetryCacheInMemory.prototype.getEventStats = function (type) {
        return this.eventStats[type];
    };
    TelemetryCacheInMemory.prototype.recordEventStats = function (type, count) {
        this.eventStats[type] += count;
    };
    TelemetryCacheInMemory.prototype.getLastSynchronization = function () {
        return this.lastSync;
    };
    TelemetryCacheInMemory.prototype.recordSuccessfulSync = function (resource, timeMs) {
        this.lastSync[resource] = timeMs;
    };
    TelemetryCacheInMemory.prototype.popHttpErrors = function () {
        var result = this.httpErrors; // @ts-expect-error
        this.httpErrors = {};
        return result;
    };
    TelemetryCacheInMemory.prototype.recordHttpError = function (resource, status) {
        if (!this.httpErrors[resource])
            this.httpErrors[resource] = {};
        if (!this.httpErrors[resource][status]) {
            this.httpErrors[resource][status] = 1;
        }
        else {
            this.httpErrors[resource][status]++;
        }
    };
    TelemetryCacheInMemory.prototype.popHttpLatencies = function () {
        var result = this.httpLatencies; // @ts-expect-error
        this.httpLatencies = {};
        return result;
    };
    TelemetryCacheInMemory.prototype.recordHttpLatency = function (resource, latencyMs) {
        if (!this.httpLatencies[resource]) {
            this.httpLatencies[resource] = newBuckets();
        }
        this.httpLatencies[resource][(0, findLatencyIndex_1.findLatencyIndex)(latencyMs)]++;
    };
    TelemetryCacheInMemory.prototype.popAuthRejections = function () {
        var result = this.authRejections;
        this.authRejections = 0;
        return result;
    };
    TelemetryCacheInMemory.prototype.recordAuthRejections = function () {
        this.authRejections++;
    };
    TelemetryCacheInMemory.prototype.popTokenRefreshes = function () {
        var result = this.tokenRefreshes;
        this.tokenRefreshes = 0;
        return result;
    };
    TelemetryCacheInMemory.prototype.recordTokenRefreshes = function () {
        this.tokenRefreshes++;
    };
    TelemetryCacheInMemory.prototype.popStreamingEvents = function () {
        return this.streamingEvents.splice(0);
    };
    TelemetryCacheInMemory.prototype.recordStreamingEvents = function (streamingEvent) {
        if (this.streamingEvents.length < MAX_STREAMING_EVENTS) {
            this.streamingEvents.push(streamingEvent);
        }
    };
    TelemetryCacheInMemory.prototype.popTags = function () {
        return this.tags.splice(0);
    };
    TelemetryCacheInMemory.prototype.addTag = function (tag) {
        if (this.tags.length < MAX_TAGS) {
            this.tags.push(tag);
        }
    };
    TelemetryCacheInMemory.prototype.getSessionLength = function () {
        return this.sessionLength;
    };
    TelemetryCacheInMemory.prototype.recordSessionLength = function (ms) {
        this.sessionLength = ms;
    };
    TelemetryCacheInMemory.prototype.popExceptions = function () {
        var result = this.exceptions; // @ts-expect-error
        this.exceptions = {};
        return result;
    };
    TelemetryCacheInMemory.prototype.recordException = function (method) {
        if (!this.exceptions[method]) {
            this.exceptions[method] = 1;
        }
        else {
            this.exceptions[method]++;
        }
    };
    TelemetryCacheInMemory.prototype.popLatencies = function () {
        var result = this.latencies; // @ts-expect-error
        this.latencies = {};
        return result;
    };
    TelemetryCacheInMemory.prototype.recordLatency = function (method, latencyMs) {
        if (!this.latencies[method]) {
            this.latencies[method] = newBuckets();
        }
        this.latencies[method][(0, findLatencyIndex_1.findLatencyIndex)(latencyMs)]++;
    };
    return TelemetryCacheInMemory;
}());
exports.TelemetryCacheInMemory = TelemetryCacheInMemory;
