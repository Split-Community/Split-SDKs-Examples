"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SegmentsCacheInMemory = void 0;
var tslib_1 = require("tslib");
var AbstractSegmentsCacheSync_1 = require("../AbstractSegmentsCacheSync");
var sets_1 = require("../../utils/lang/sets");
var lang_1 = require("../../utils/lang");
/**
 * Default ISplitsCacheSync implementation that stores split definitions in memory.
 * Supported by all JS runtimes.
 */
var SegmentsCacheInMemory = /** @class */ (function (_super) {
    (0, tslib_1.__extends)(SegmentsCacheInMemory, _super);
    function SegmentsCacheInMemory() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.segmentCache = {};
        _this.segmentChangeNumber = {};
        return _this;
    }
    SegmentsCacheInMemory.prototype.addToSegment = function (name, segmentKeys) {
        var values = this.segmentCache[name];
        var keySet = values ? values : new sets_1._Set();
        segmentKeys.forEach(function (k) { return keySet.add(k); });
        this.segmentCache[name] = keySet;
        return true;
    };
    SegmentsCacheInMemory.prototype.removeFromSegment = function (name, segmentKeys) {
        var values = this.segmentCache[name];
        var keySet = values ? values : new sets_1._Set();
        segmentKeys.forEach(function (k) { return keySet.delete(k); });
        this.segmentCache[name] = keySet;
        return true;
    };
    SegmentsCacheInMemory.prototype.isInSegment = function (name, key) {
        var segmentValues = this.segmentCache[name];
        if (segmentValues) {
            return segmentValues.has(key);
        }
        return false;
    };
    SegmentsCacheInMemory.prototype.clear = function () {
        this.segmentCache = {};
        this.segmentChangeNumber = {};
    };
    SegmentsCacheInMemory.prototype._registerSegment = function (name) {
        if (!this.segmentCache[name]) {
            this.segmentCache[name] = new sets_1._Set();
        }
        return true;
    };
    SegmentsCacheInMemory.prototype.registerSegments = function (names) {
        for (var i = 0; i < names.length; i++) {
            this._registerSegment(names[i]);
        }
        return true;
    };
    SegmentsCacheInMemory.prototype.getRegisteredSegments = function () {
        return Object.keys(this.segmentCache);
    };
    SegmentsCacheInMemory.prototype.getKeysCount = function () {
        var _this = this;
        return Object.keys(this.segmentCache).reduce(function (acum, segmentName) {
            return acum + _this.segmentCache[segmentName].size;
        }, 0);
    };
    SegmentsCacheInMemory.prototype.setChangeNumber = function (name, changeNumber) {
        this.segmentChangeNumber[name] = changeNumber;
        return true;
    };
    SegmentsCacheInMemory.prototype.getChangeNumber = function (name) {
        var value = this.segmentChangeNumber[name];
        return (0, lang_1.isIntegerNumber)(value) ? value : -1;
    };
    return SegmentsCacheInMemory;
}(AbstractSegmentsCacheSync_1.AbstractSegmentsCacheSync));
exports.SegmentsCacheInMemory = SegmentsCacheInMemory;
