"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluggableStorage = void 0;
var tslib_1 = require("tslib");
var KeyBuilderSS_1 = require("../KeyBuilderSS");
var SplitsCachePluggable_1 = require("./SplitsCachePluggable");
var SegmentsCachePluggable_1 = require("./SegmentsCachePluggable");
var ImpressionsCachePluggable_1 = require("./ImpressionsCachePluggable");
var EventsCachePluggable_1 = require("./EventsCachePluggable");
var wrapperAdapter_1 = require("./wrapperAdapter");
var lang_1 = require("../../utils/lang");
var KeyBuilder_1 = require("../KeyBuilder");
var constants_1 = require("../../utils/constants");
var ImpressionsCacheInMemory_1 = require("../inMemory/ImpressionsCacheInMemory");
var EventsCacheInMemory_1 = require("../inMemory/EventsCacheInMemory");
var ImpressionCountsCacheInMemory_1 = require("../inMemory/ImpressionCountsCacheInMemory");
var NO_VALID_WRAPPER = 'Expecting pluggable storage `wrapper` in options, but no valid wrapper instance was provided.';
var NO_VALID_WRAPPER_INTERFACE = 'The provided wrapper instance doesnâ€™t follow the expected interface. Check our docs.';
/**
 * Validate pluggable storage factory options.
 *
 * @param options user options
 * @throws Will throw an error if the options are invalid. Example: wrapper is not provided or doesn't have some methods.
 */
function validatePluggableStorageOptions(options) {
    if (!(0, lang_1.isObject)(options) || !(0, lang_1.isObject)(options.wrapper))
        throw new Error(NO_VALID_WRAPPER);
    var wrapper = options.wrapper;
    var missingMethods = wrapperAdapter_1.METHODS_TO_PROMISE_WRAP.filter(function (method) { return typeof wrapper[method] !== 'function'; });
    if (missingMethods.length)
        throw new Error(NO_VALID_WRAPPER_INTERFACE + " The following methods are missing or invalid: " + missingMethods);
}
// subscription to wrapper connect event in order to emit SDK_READY event
function wrapperConnect(wrapper, onReadyCb) {
    wrapper.connect().then(function () {
        onReadyCb();
        // At the moment, we don't synchronize config with pluggable storage
    }).catch(function (e) {
        onReadyCb(e || new Error('Error connecting wrapper'));
    });
}
// Async return type in `client.track` method on consumer partial mode
// No need to promisify impressions cache
function promisifyEventsTrack(events) {
    var origTrack = events.track;
    events.track = function () {
        return Promise.resolve(origTrack.apply(this, arguments));
    };
    return events;
}
/**
 * Pluggable storage factory for consumer server-side & client-side SplitFactory.
 */
function PluggableStorage(options) {
    validatePluggableStorageOptions(options);
    var prefix = (0, KeyBuilder_1.validatePrefix)(options.prefix);
    function PluggableStorageFactory(_a) {
        var log = _a.log, metadata = _a.metadata, onReadyCb = _a.onReadyCb, mode = _a.mode, eventsQueueSize = _a.eventsQueueSize, impressionsQueueSize = _a.impressionsQueueSize, optimize = _a.optimize;
        var keys = new KeyBuilderSS_1.KeyBuilderSS(prefix, metadata);
        var wrapper = (0, wrapperAdapter_1.wrapperAdapter)(log, options.wrapper);
        var isPartialConsumer = mode === constants_1.CONSUMER_PARTIAL_MODE;
        // Connects to wrapper and emits SDK_READY event on main client
        wrapperConnect(wrapper, onReadyCb);
        return {
            splits: new SplitsCachePluggable_1.SplitsCachePluggable(log, keys, wrapper),
            segments: new SegmentsCachePluggable_1.SegmentsCachePluggable(log, keys, wrapper),
            impressions: isPartialConsumer ? new ImpressionsCacheInMemory_1.ImpressionsCacheInMemory(impressionsQueueSize) : new ImpressionsCachePluggable_1.ImpressionsCachePluggable(log, keys.buildImpressionsKey(), wrapper, metadata),
            impressionCounts: optimize ? new ImpressionCountsCacheInMemory_1.ImpressionCountsCacheInMemory() : undefined,
            events: isPartialConsumer ? promisifyEventsTrack(new EventsCacheInMemory_1.EventsCacheInMemory(eventsQueueSize)) : new EventsCachePluggable_1.EventsCachePluggable(log, keys.buildEventsKey(), wrapper, metadata),
            // @TODO Not using TelemetryCachePluggable yet because it's not supported by the Split Synchronizer, and needs to drop or queue operations while the wrapper is not ready
            // telemetry: isPartialConsumer ? new TelemetryCacheInMemory() : new TelemetryCachePluggable(log, keys, wrapper),
            // Disconnect the underlying storage
            destroy: function () {
                return wrapper.disconnect();
            },
            // emits SDK_READY event on shared clients and returns a reference to the storage
            shared: function (_, onReadyCb) {
                wrapperConnect(wrapper, onReadyCb);
                return (0, tslib_1.__assign)((0, tslib_1.__assign)({}, this), { 
                    // no-op destroy, to disconnect the wrapper only when the main client is destroyed
                    destroy: function () { } });
            }
        };
    }
    PluggableStorageFactory.type = constants_1.STORAGE_PLUGGABLE;
    return PluggableStorageFactory;
}
exports.PluggableStorage = PluggableStorage;
