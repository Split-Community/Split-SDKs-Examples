"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.releaseApiKey = exports.validateAndTrackApiKey = exports.usedKeysMap = exports.validateApiKey = void 0;
var constants_1 = require("../../logger/constants");
var lang_1 = require("../lang");
var item = 'api_key';
/** validates the given api key */
function validateApiKey(log, maybeApiKey) {
    var apiKey = false;
    if (maybeApiKey == undefined) { // eslint-disable-line eqeqeq
        log.error(constants_1.ERROR_NULL, [constants_1.LOG_PREFIX_INSTANTIATION, item]);
    }
    else if ((0, lang_1.isString)(maybeApiKey)) {
        if (maybeApiKey.length > 0)
            apiKey = maybeApiKey;
        else
            log.error(constants_1.ERROR_EMPTY, [constants_1.LOG_PREFIX_INSTANTIATION, item]);
    }
    else {
        log.error(constants_1.ERROR_INVALID, [constants_1.LOG_PREFIX_INSTANTIATION, item]);
    }
    return apiKey;
}
exports.validateApiKey = validateApiKey;
// Exported for telemetry
exports.usedKeysMap = {};
/** validates the given api key and also warns if it is in use */
function validateAndTrackApiKey(log, maybeApiKey) {
    var apiKey = validateApiKey(log, maybeApiKey);
    // If the apiKey is correct, we'll save it as the instance creation should work.
    if (apiKey) {
        if (!exports.usedKeysMap[apiKey]) {
            // If this key is not present, only warning scenarios is that we have factories for other keys.
            exports.usedKeysMap[apiKey] = 1;
            if (Object.keys(exports.usedKeysMap).length > 1) {
                log.warn(constants_1.WARN_API_KEY, ['an instance of the Split factory']);
            }
        }
        else {
            log.warn(constants_1.WARN_API_KEY, [exports.usedKeysMap[apiKey] + " factory/ies with this API Key"]);
            exports.usedKeysMap[apiKey]++;
        }
    }
    return apiKey;
}
exports.validateAndTrackApiKey = validateAndTrackApiKey;
function releaseApiKey(apiKey) {
    if (exports.usedKeysMap[apiKey])
        exports.usedKeysMap[apiKey]--;
    if (exports.usedKeysMap[apiKey] === 0)
        delete exports.usedKeysMap[apiKey];
}
exports.releaseApiKey = releaseApiKey;
