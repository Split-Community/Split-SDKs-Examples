"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromObjectSyncTaskFactory = exports.fromObjectUpdaterFactory = void 0;
var lang_1 = require("../../../utils/lang");
var syncTask_1 = require("../../syncTask");
var constants_1 = require("../../../utils/constants");
var constants_2 = require("../../../readiness/constants");
var constants_3 = require("../../../logger/constants");
/**
 * Offline equivalent of `splitChangesUpdaterFactory`
 */
function fromObjectUpdaterFactory(splitsParser, storage, readiness, settings) {
    var log = settings.log, splitsCache = storage.splits;
    var startingUp = true;
    return function objectUpdater() {
        var splits = [];
        var loadError = null;
        var splitsMock = {};
        try {
            splitsMock = splitsParser(settings);
        }
        catch (err) {
            loadError = err;
            log.error(constants_3.ERROR_SYNC_OFFLINE_LOADING, [err]);
        }
        if (!loadError && splitsMock) {
            log.debug(constants_3.SYNC_OFFLINE_DATA, [JSON.stringify(splitsMock)]);
            (0, lang_1.forOwn)(splitsMock, function (val, name) {
                splits.push([
                    name,
                    JSON.stringify({
                        name: name,
                        status: 'ACTIVE',
                        killed: false,
                        trafficAllocation: 100,
                        defaultTreatment: constants_1.CONTROL,
                        conditions: val.conditions || [],
                        configurations: val.configurations,
                        trafficTypeName: val.trafficTypeName
                    })
                ]);
            });
            return Promise.all([
                splitsCache.clear(),
                splitsCache.addSplits(splits)
            ]).then(function () {
                readiness.splits.emit(constants_2.SDK_SPLITS_ARRIVED);
                if (startingUp) {
                    startingUp = false;
                    Promise.resolve(splitsCache.checkCache()).then(function (cacheReady) {
                        // Emits SDK_READY_FROM_CACHE
                        if (cacheReady)
                            readiness.splits.emit(constants_2.SDK_SPLITS_CACHE_LOADED);
                        // Emits SDK_READY
                        readiness.segments.emit(constants_2.SDK_SEGMENTS_ARRIVED);
                    });
                }
                return true;
            });
        }
        else {
            return Promise.resolve(true);
        }
    };
}
exports.fromObjectUpdaterFactory = fromObjectUpdaterFactory;
/**
 * PollingManager in Offline mode
 */
function fromObjectSyncTaskFactory(splitsParser, storage, readiness, settings) {
    return (0, syncTask_1.syncTaskFactory)(settings.log, fromObjectUpdaterFactory(splitsParser, storage, readiness, settings), settings.scheduler.offlineRefreshRate, 'offlineUpdater');
}
exports.fromObjectSyncTaskFactory = fromObjectSyncTaskFactory;
