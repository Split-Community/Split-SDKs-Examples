import { SplitsCacheInMemory } from './SplitsCacheInMemory';
import { SegmentsCacheInMemory } from './SegmentsCacheInMemory';
import { ImpressionsCacheInMemory } from './ImpressionsCacheInMemory';
import { EventsCacheInMemory } from './EventsCacheInMemory';
import { ImpressionCountsCacheInMemory } from './ImpressionCountsCacheInMemory';
import { LOCALHOST_MODE, STORAGE_MEMORY } from '../../utils/constants';
import { TelemetryCacheInMemory } from './TelemetryCacheInMemory';
/**
 * InMemory storage factory for standalone server-side SplitFactory
 *
 * @param params parameters required by EventsCacheSync
 */
export function InMemoryStorageFactory(params) {
    return {
        splits: new SplitsCacheInMemory(),
        segments: new SegmentsCacheInMemory(),
        impressions: new ImpressionsCacheInMemory(params.impressionsQueueSize),
        impressionCounts: params.optimize ? new ImpressionCountsCacheInMemory() : undefined,
        events: new EventsCacheInMemory(params.eventsQueueSize),
        telemetry: params.mode !== LOCALHOST_MODE ? new TelemetryCacheInMemory() : undefined,
        // When using MEMORY we should clean all the caches to leave them empty
        destroy: function () {
            this.splits.clear();
            this.segments.clear();
            this.impressions.clear();
            this.impressionCounts && this.impressionCounts.clear();
            this.events.clear();
        }
    };
}
InMemoryStorageFactory.type = STORAGE_MEMORY;
