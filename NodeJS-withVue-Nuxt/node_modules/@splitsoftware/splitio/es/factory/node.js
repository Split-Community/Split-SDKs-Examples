import { splitApiFactory } from '@splitsoftware/splitio-commons/esm/services/splitApi';
import { syncManagerOnlineFactory } from '@splitsoftware/splitio-commons/esm/sync/syncManagerOnline';
import { pushManagerFactory } from '@splitsoftware/splitio-commons/esm/sync/streaming/pushManager';
import { pollingManagerSSFactory } from '@splitsoftware/splitio-commons/esm/sync/polling/pollingManagerSS';
import { InRedisStorage } from '@splitsoftware/splitio-commons/esm/storages/inRedis';
import { InMemoryStorageFactory } from '@splitsoftware/splitio-commons/esm/storages/inMemory/InMemoryStorage';
import { sdkManagerFactory } from '@splitsoftware/splitio-commons/esm/sdkManager';
import { sdkClientMethodFactory } from '@splitsoftware/splitio-commons/esm/sdkClient/sdkClientMethod';
import { impressionObserverSSFactory } from '@splitsoftware/splitio-commons/esm/trackers/impressionObserver/impressionObserverSS';
import { sdkFactory } from '@splitsoftware/splitio-commons/esm/sdkFactory';
import { CONSUMER_MODE, LOCALHOST_MODE } from '@splitsoftware/splitio-commons/esm/utils/constants';
import { shouldAddPt } from '@splitsoftware/splitio-commons/esm/trackers/impressionObserver/utils';
import { settingsFactory } from '../settings/node';
import { platform, SignalListener } from '../platform';
var syncManagerOnlineSSFactory = syncManagerOnlineFactory(pollingManagerSSFactory, pushManagerFactory);
function getStorage(settings) {
    return settings.storage.type === 'REDIS' ?
        InRedisStorage(settings.storage) :
        InMemoryStorageFactory;
}
/**
 *
 * @param {import("@splitsoftware/splitio-commons/types/types").ISettings} settings
 */
function getModules(settings) {
    var modules = {
        settings: settings,
        platform: platform,
        storageFactory: getStorage(settings),
        splitApiFactory: splitApiFactory,
        syncManagerFactory: syncManagerOnlineSSFactory,
        sdkManagerFactory: sdkManagerFactory,
        sdkClientMethodFactory: sdkClientMethodFactory,
        SignalListener: SignalListener,
        impressionsObserverFactory: shouldAddPt(settings) ? impressionObserverSSFactory : undefined,
    };
    switch (settings.mode) {
        case LOCALHOST_MODE:
            modules.splitApiFactory = undefined;
            modules.syncManagerFactory = settings.sync.localhostMode;
            modules.SignalListener = undefined;
            break;
        case CONSUMER_MODE:
            modules.syncManagerFactory = undefined;
            break;
    }
    return modules;
}
/**
 * SplitFactory for server-side.
 *
 * @param {SplitIO.INodeSettings | SplitIO.INodeAsyncSettings} config configuration object used to instantiate the SDK
 * @param {Function=} __updateModules optional function that lets redefine internal SDK modules. Use with
 * caution since, unlike `config`, this param is not validated neither considered part of the public API.
 * @throws Will throw an error if the provided config is invalid.
 */
export function SplitFactory(config, __updateModules) {
    var settings = settingsFactory(config);
    var modules = getModules(settings);
    if (__updateModules)
        __updateModules(modules);
    return sdkFactory(modules);
}
