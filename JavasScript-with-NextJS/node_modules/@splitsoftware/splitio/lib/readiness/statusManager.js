"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = callbackHandlerContext;

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _wrapper = _interopRequireDefault(require("../utils/promise/wrapper"));

var _logger = _interopRequireDefault(require("../utils/logger"));

var log = (0, _logger.default)('');
var NEW_LISTENER_EVENT = 'newListener';
var REMOVE_LISTENER_EVENT = 'removeListener'; // default onRejected handler, that just logs the error, if ready promise doesn't have one.

function defaultOnRejected(err) {
  log.error(err);
}
/**
 * StatusManager factory.
 * Responsable of exposing public status API: ready promise, event emitter and constants (SDK_READY, etc).
 * It also updates client context according to status events and logs related warnings and errors.
 *
 * @param {Object} context client context
 * @param {number} internalReadyCbCount offset value of SDK_READY listeners that are added/removed internally
 * by the SDK. It is required to properly log the warning 'No listeners for SDK Readiness detected'
 */


function callbackHandlerContext(context) {
  var internalReadyCbCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var gate = context.get(context.constants.READINESS).gate;
  var readyCbCount = 0;
  var isReady = false;
  var hasTimedout = false;
  var SDK_READY = gate.SDK_READY,
      SDK_READY_FROM_CACHE = gate.SDK_READY_FROM_CACHE,
      SDK_UPDATE = gate.SDK_UPDATE,
      SDK_READY_TIMED_OUT = gate.SDK_READY_TIMED_OUT;
  gate.on(REMOVE_LISTENER_EVENT, function (event) {
    if (event === SDK_READY) readyCbCount--;
  });
  gate.on(NEW_LISTENER_EVENT, function (event) {
    if (event === SDK_READY || event === SDK_READY_TIMED_OUT) {
      if (isReady) {
        log.error("A listener was added for ".concat(event === SDK_READY ? 'SDK_READY' : 'SDK_READY_TIMED_OUT', " on the SDK, which has already fired and won't be emitted again. The callback won't be executed."));
      } else if (event === SDK_READY) {
        readyCbCount++;
      }
    }
  });
  var readyPromise = generateReadyPromise();
  gate.once(SDK_READY_FROM_CACHE, function () {
    log.info('Split SDK is ready from cache.');
    context.put(context.constants.READY_FROM_CACHE, true);
  });

  function generateReadyPromise() {
    var promise = (0, _wrapper.default)(new Promise(function (resolve, reject) {
      gate.once(SDK_READY, function () {
        if (readyCbCount === internalReadyCbCount && !promise.hasOnFulfilled()) log.warn('No listeners for SDK Readiness detected. Incorrect control treatments could have been logged if you called getTreatment/s while the SDK was not yet ready.');
        context.put(context.constants.READY, true);
        isReady = true;
        resolve();
      });
      gate.once(SDK_READY_TIMED_OUT, function (error) {
        context.put(context.constants.HAS_TIMEDOUT, true);
        hasTimedout = true;
        reject(error);
      });
    }), defaultOnRejected);
    return promise;
  }

  return (0, _objectAssign.default)( // Expose Event Emitter functionality
  Object.create(gate), {
    // Expose the event constants without changing the interface
    Event: {
      SDK_READY: SDK_READY,
      SDK_READY_FROM_CACHE: SDK_READY_FROM_CACHE,
      SDK_UPDATE: SDK_UPDATE,
      SDK_READY_TIMED_OUT: SDK_READY_TIMED_OUT
    },
    // Expose the ready promise flag
    ready: function ready() {
      if (hasTimedout) {
        if (!isReady) {
          return (0, _wrapper.default)(Promise.reject('Split SDK has emitted SDK_READY_TIMED_OUT event.'), defaultOnRejected);
        } else {
          return Promise.resolve();
        }
      }

      return readyPromise;
    },
    // Expose context for internal purposes only. Not considered part of the public API, and will be removed eventually.
    __context: context
  });
}