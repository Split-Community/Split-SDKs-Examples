"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testAuthWithPushDisabled = testAuthWithPushDisabled;
exports.testAuthWith401 = testAuthWith401;
exports.testNoEventSource = testNoEventSource;
exports.testNoBase64Support = testNoBase64Support;

var _ = require("../..");

var _settings = _interopRequireDefault(require("../../utils/settings"));

var _splitchangesSince = _interopRequireDefault(require("../mocks/splitchanges.since.-1.json"));

var _splitchangesSince2 = _interopRequireDefault(require("../mocks/splitchanges.since.1457552620999.json"));

var _mysegmentsNicolasSplitIo = _interopRequireDefault(require("../mocks/mysegments.nicolas@split.io.json"));

var _authPushDisabled = _interopRequireDefault(require("../mocks/auth.pushDisabled.json"));

var _authInvalidCredentials = _interopRequireDefault(require("../mocks/auth.invalidCredentials.txt"));

var _testUtils = require("../testUtils");

var baseUrls = {
  sdk: 'https://sdk.push-initialization-nopush/api',
  events: 'https://events.push-initialization-nopush/api',
  auth: 'https://auth.push-initialization-nopush/api'
};
var userKey = 'nicolas@split.io';
var config = {
  core: {
    authorizationKey: '<fake-token-push-1>',
    key: userKey
  },
  scheduler: {
    featuresRefreshRate: 0.1,
    segmentsRefreshRate: 0.1,
    metricsRefreshRate: 3000,
    impressionsRefreshRate: 3000
  },
  urls: baseUrls,
  startup: {
    eventsFirstPushWindow: 3000
  },
  streamingEnabled: true,
  debug: true
};
var settings = (0, _settings.default)(config);
/**
 * Sequence of calls:
 *  0.0 secs: initial SyncAll (/splitChanges, /mySegments/*) and auth (success but push disabled)
 *  0.0 secs: syncAll if falling back to polling (/splitChanges, /mySegments/*)
 *  0.1 secs: polling (/splitChanges, /mySegments/*)
 */

function testInitializationFail(fetchMock, assert, fallbackToPolling) {
  var start,
      splitio,
      client,
      ready = false;
  fetchMock.get(settings.url('/mySegments/nicolas%40split.io'), {
    status: 200,
    body: _mysegmentsNicolasSplitIo.default
  });
  fetchMock.getOnce(settings.url('/splitChanges?since=-1'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, 0), 'initial sync');
    return {
      status: 200,
      body: _splitchangesSince.default
    };
  });

  if (fallbackToPolling) {
    fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), function () {
      assert.true(ready, 'client ready');
      var lapse = Date.now() - start;
      assert.true((0, _testUtils.nearlyEqual)(lapse, 0), 'polling (first fetch)');
      return {
        status: 200,
        body: _splitchangesSince2.default
      };
    });
  }

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), function () {
    assert.true(ready, 'client ready');
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, settings.scheduler.featuresRefreshRate), 'polling (second fetch)');
    client.destroy().then(function () {
      assert.end();
    });
    return {
      status: 200,
      body: _splitchangesSince2.default
    };
  });
  start = Date.now();
  splitio = (0, _.SplitFactory)(config);
  client = splitio.client();
  client.on(client.Event.SDK_READY, function () {
    ready = true;
  });
}

function testAuthWithPushDisabled(fetchMock, assert) {
  assert.plan(6);
  fetchMock.getOnce(settings.url("/auth?users=".concat(encodeURIComponent(userKey))), function (url, opts) {
    if (!opts.headers['Authorization']) assert.fail('`/auth` request must include `Authorization` header');
    assert.pass('auth');
    return {
      status: 200,
      body: _authPushDisabled.default
    };
  });
  testInitializationFail(fetchMock, assert, true);
}

function testAuthWith401(fetchMock, assert) {
  assert.plan(6);
  fetchMock.getOnce(settings.url("/auth?users=".concat(encodeURIComponent(userKey))), function (url, opts) {
    if (!opts.headers['Authorization']) assert.fail('`/auth` request must include `Authorization` header');
    assert.pass('auth');
    return {
      status: 401,
      body: _authInvalidCredentials.default
    };
  });
  testInitializationFail(fetchMock, assert, true);
}

function testNoEventSource(fetchMock, assert) {
  assert.plan(3);
  var originalEventSource = window.EventSource;
  window.EventSource = undefined;
  fetchMock.getOnce(settings.url("/auth?users=".concat(encodeURIComponent(userKey))), function () {
    assert.fail('not authenticate if EventSource is not available');
  });
  testInitializationFail(fetchMock, assert, false);
  window.EventSource = originalEventSource;
}

function testNoBase64Support(fetchMock, assert) {
  assert.plan(3);
  var originalAtoB = window.atob;
  window.atob = undefined;
  fetchMock.getOnce(settings.url("/auth?users=".concat(encodeURIComponent(userKey))), function () {
    assert.fail('not authenticate if `atob` or `btoa` functions are not available');
  });
  testInitializationFail(fetchMock, assert, false);
  window.atob = originalAtoB;
}