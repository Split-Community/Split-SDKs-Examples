"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = metricsBrowserSuite;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _ = require("../../");

var _splitchangesSince = _interopRequireDefault(require("../mocks/splitchanges.since.-1.json"));

var _splitchangesSince2 = _interopRequireDefault(require("../mocks/splitchanges.since.1457552620999.json"));

var baseUrls = {
  sdk: 'https://sdk.baseurl/metricsSuite',
  events: 'https://events.baseurl/metricsSuite'
};
var config = {
  core: {
    authorizationKey: '<fake-token-2>',
    key: 'metrics-browser-tests-key'
  },
  scheduler: {
    featuresRefreshRate: 99999,
    segmentsRefreshRate: 99999,
    metricsRefreshRate: 3,
    impressionsRefreshRate: 99999
  },
  urls: baseUrls,
  startup: {
    eventsFirstPushWindow: 3000
  },
  streamingEnabled: false
};

function metricsBrowserSuite(_x, _x2) {
  return _metricsBrowserSuite.apply(this, arguments);
}

function _metricsBrowserSuite() {
  _metricsBrowserSuite = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(fetchMock, assert) {
    var splitio, client, finish;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            fetchMock.getOnce(baseUrls.sdk + '/splitChanges?since=-1', 500);
            fetchMock.get(baseUrls.sdk + '/splitChanges?since=-1', {
              status: 200,
              body: _splitchangesSince.default
            });
            fetchMock.getOnce(baseUrls.sdk + '/mySegments/metrics-browser-tests-key', 500);
            fetchMock.get(baseUrls.sdk + '/mySegments/metrics-browser-tests-key', {
              status: 200,
              body: {
                'mySegments': []
              }
            }); // Should not execute but adding just in case.

            fetchMock.get(baseUrls.sdk + '/splitChanges?since=1457552620999', {
              status: 200,
              body: _splitchangesSince2.default
            }); // We need to handle all requests properly

            fetchMock.postOnce(baseUrls.events + '/testImpressions/bulk', 200);
            fetchMock.postOnce(baseUrls.events + '/testImpressions/count', 200);
            splitio = (0, _.SplitFactory)(config);
            client = splitio.client();
            finish = /*#__PURE__*/_regenerator.default.mark(function _callee() {
              return _regenerator.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.next = 2;
                      return;

                    case 2:
                      client.destroy();
                      assert.end();

                    case 4:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            })();
            fetchMock.postOnce(baseUrls.events + '/metrics/times', function (url, opts) {
              var data = JSON.parse(opts.body);
              assert.equal(data.length, 7, 'We performed 4 correct evaluation requests (one per method) plus ready, splits and segments, so we should have 7 latency metrics.');
              var latencyMetricsRecorded = data.filter(function (metric) {
                // At least one latency registed per metric
                return metric.latencies.some(function (count) {
                  return count > 0;
                });
              }); // If we have 7 items, it is because each one had at least ONE entry.

              assert.equal(latencyMetricsRecorded.length, 7, 'Each metric has at least one enty, matching the calls.');

              var getLatencyCount = function getLatencyCount(metricName) {
                var latencyMetric = data.find(function (metric) {
                  return metric.name === metricName;
                });
                if (!latencyMetric && !Array.isArray(latencyMetric.latencies)) return 0;
                return latencyMetric.latencies.reduce(function (accum, entry) {
                  return accum + entry;
                }, 0);
              }; // Validate both names and values.


              assert.equal(getLatencyCount('splitChangeFetcher.time'), 2, 'Two latency metrics for splitChanges'); // 1 err 1 ok

              assert.equal(getLatencyCount('mySegmentsFetcher.time'), 2, 'One latency metric for mySegmentsFetcher'); // 1 err 1 ok

              assert.equal(getLatencyCount('sdk.ready'), 1, 'One latency metric for ready');
              assert.equal(getLatencyCount('sdk.getTreatment'), 1, 'One latency metric for getTreatment');
              assert.equal(getLatencyCount('sdk.getTreatments'), 1, 'One latency metric for getTreatments');
              assert.equal(getLatencyCount('sdk.getTreatmentWithConfig'), 1, 'One latency metric for getTreatmentWithConfig');
              assert.equal(getLatencyCount('sdk.getTreatmentsWithConfig'), 1, 'One latency metric for getTreatmentsWithConfig');
              finish.next();
              return 200;
            });
            fetchMock.postOnce(baseUrls.events + '/metrics/counters', function (url, opts) {
              var data = JSON.parse(opts.body);
              assert.equal(data.length, 4, 'Based on the mock setup, we should have four items.');
              var countMetricsRecorded = data.reduce(function (accum, metric) {
                return accum + metric.delta;
              }, 0);

              var getRecodsCount = function getRecodsCount(metricName) {
                var countMetric = data.find(function (metric) {
                  return metric.name === metricName;
                });
                if (!countMetric) return 0;
                return countMetric.delta;
              }; // 4 items:
              // For splitChanges, 1 exception and 1 200.
              // For mySegments 1 exception and 1  200.


              assert.equal(countMetricsRecorded, 4, 'Each metric has one entry, same as the amount of calls.'); // break down

              assert.equal(getRecodsCount('splitChangeFetcher.exception'), 1, 'The metric names and delta should correspond to the SDK behaviour.');
              assert.equal(getRecodsCount('mySegmentsFetcher.exception'), 1, 'The metric names and delta should correspond to the SDK behaviour.');
              assert.equal(getRecodsCount('splitChangeFetcher.status.200'), 1, 'The metric names and delta should correspond to the SDK behaviour.');
              assert.equal(getRecodsCount('mySegmentsFetcher.status.200'), 1, 'The metric names and delta should correspond to the SDK behaviour.');
              finish.next();
              return 200;
            });
            _context2.next = 14;
            return client.ready();

          case 14:
            // treatments and results are only validated so we know for sure when the function was actually running to compare the metrics.
            assert.equal(client.getTreatment('always_on'), 'on', 'Evaluation was correct.');
            assert.equal(client.getTreatment('always_on', function () {}), 'control', 'We should return control with invalid input.');
            assert.deepEqual(client.getTreatmentWithConfig('split_with_config'), {
              treatment: 'on',
              config: '{"color":"brown","dimensions":{"height":12,"width":14},"text":{"inner":"click me"}}'
            }, 'Evaluation with config was correct.');
            assert.deepEqual(client.getTreatmentWithConfig('split_with_config', function () {}), {
              treatment: 'control',
              config: null
            }, 'Evaluation with config returned control state for invalid input.');
            assert.deepEqual(client.getTreatments(['always_on', 'always_off']), {
              always_on: 'on',
              always_off: 'off'
            }, 'Evaluations were correct.');
            assert.deepEqual(client.getTreatments(['always_on', 'always_off', null], function () {}), {
              always_on: 'control',
              always_off: 'control'
            }, 'We should return map of controls with invalid input.');
            assert.deepEqual(client.getTreatmentsWithConfig(['split_with_config', 'always_on', null]), {
              split_with_config: {
                treatment: 'on',
                config: '{"color":"brown","dimensions":{"height":12,"width":14},"text":{"inner":"click me"}}'
              },
              always_on: {
                treatment: 'on',
                config: null
              }
            }, 'Evaluations with config were correct.');
            assert.deepEqual(client.getTreatmentsWithConfig(['split_with_config', 'always_on', null], function () {}), {
              split_with_config: {
                treatment: 'control',
                config: null
              },
              always_on: {
                treatment: 'control',
                config: null
              }
            }, 'Evaluations with config returned control states for invalid input.');

          case 22:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _metricsBrowserSuite.apply(this, arguments);
}