"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testSynchronizationRetries = testSynchronizationRetries;

var _splitchangesSince = _interopRequireDefault(require("../mocks/splitchanges.since.-1.json"));

var _splitchangesSince2 = _interopRequireDefault(require("../mocks/splitchanges.since.1457552620999.json"));

var _splitchangesSince1457552620999Till1457552649999SPLIT_UPDATE = _interopRequireDefault(require("../mocks/splitchanges.since.1457552620999.till.1457552649999.SPLIT_UPDATE.json"));

var _messageSPLIT_UPDATE = _interopRequireDefault(require("../mocks/message.SPLIT_UPDATE.1457552649999.json"));

var _messageSPLIT_UPDATE2 = _interopRequireDefault(require("../mocks/message.SPLIT_UPDATE.1457552620999.json"));

var _messageSEGMENT_UPDATE = _interopRequireDefault(require("../mocks/message.SEGMENT_UPDATE.1457552640000.json"));

var _messageSPLIT_KILL = _interopRequireDefault(require("../mocks/message.SPLIT_KILL.1457552650000.json"));

var _authPushEnabledNode = _interopRequireDefault(require("../mocks/auth.pushEnabled.node.json"));

var _testUtils = require("../testUtils");

var _backoff = _interopRequireDefault(require("../../utils/backoff"));

var _eventSourceMock = _interopRequireWildcard(require("../../sync/__tests__/mocks/eventSourceMock"));

var _node = require("../../services/getEventSource/node");

var _index = require("../../index");

var _settings = _interopRequireDefault(require("../../utils/settings"));

var key = 'nicolas@split.io';
var baseUrls = {
  sdk: 'https://sdk.push-synchronization/api',
  events: 'https://events.push-synchronization/api',
  auth: 'https://auth.push-synchronization/api'
};
var config = {
  core: {
    authorizationKey: '<fake-token-push-1>'
  },
  urls: baseUrls,
  streamingEnabled: true // debug: true,

};
var settings = (0, _settings.default)(config);
var MILLIS_SSE_OPEN = 100;
var MILLIS_FIRST_SPLIT_UPDATE_EVENT = 200;
var MILLIS_RETRY_FOR_FIRST_SPLIT_UPDATE_EVENT = 300;
var MILLIS_SECOND_SPLIT_UPDATE_EVENT = 400;
var MILLIS_SEGMENT_UPDATE_EVENT = 500;
var MILLIS_THIRD_RETRY_FOR_SEGMENT_UPDATE_EVENT = 1200;
var MILLIS_SPLIT_KILL_EVENT = 1300;
var MILLIS_THIRD_RETRY_FOR_SPLIT_KILL_EVENT = 2000;
/**
 * Sequence of calls:
 *  0.0 secs: initial SyncAll (/splitChanges, /segmentChanges/*), auth, SSE connection
 *  0.1 secs: SSE connection opened -> syncAll (/splitChanges, /segmentChanges/*)
 *
 *  0.2 secs: SPLIT_UPDATE event -> /splitChanges: network error
 *  0.3 secs: SPLIT_UPDATE event -> /splitChanges retry: success -> SDK_UPDATE triggered
 *
 *  0.4 secs: SPLIT_UPDATE event with old changeNumber -> SDK_UPDATE not triggered
 *
 *  0.5 secs: SEGMENT_UPDATE event -> /segmentChanges/*: server error (cannot test outdated response, since it is not supported)
 *  0.6 secs: SEGMENT_UPDATE event -> /segmentChanges/* retry: network error
 *  0.8 secs: SEGMENT_UPDATE event -> /segmentChanges/* retry: invalid JSON response
 *  1.2 secs: SEGMENT_UPDATE event -> /segmentChanges/* retry: success -> SDK_UPDATE triggered
 *
 *  1.3 secs: SPLIT_KILL event -> /splitChanges: outdated response -> SDK_UPDATE triggered although fetches fail
 *  1.4 secs: SPLIT_KILL event -> /splitChanges retry: invalid JSON response
 *  1.6 secs: SPLIT_KILL event -> /splitChanges retry: network error
 *  2.0 secs: SPLIT_KILL event -> /splitChanges retry: 408 request timeout
 *    (we destroy the client here, to assert that all scheduled tasks are clean)
 */

function testSynchronizationRetries(fetchMock, assert) {
  // we update the backoff default base, to reduce the time of the test
  var ORIGINAL_DEFAULT_BASE_MILLIS = _backoff.default.DEFAULT_BASE_MILLIS;
  _backoff.default.DEFAULT_BASE_MILLIS = 100;
  assert.plan(19);
  fetchMock.reset();
  (0, _node.__setEventSource)(_eventSourceMock.default);
  var start, splitio, client; // mock SSE open and message events

  (0, _eventSourceMock.setMockListener)(function (eventSourceInstance) {
    start = Date.now();
    var expectedSSEurl = "".concat(settings.url('/sse'), "?channels=NzM2MDI5Mzc0_NDEzMjQ1MzA0Nw%3D%3D_segments,NzM2MDI5Mzc0_NDEzMjQ1MzA0Nw%3D%3D_splits,%5B%3Foccupancy%3Dmetrics.publishers%5Dcontrol_pri,%5B%3Foccupancy%3Dmetrics.publishers%5Dcontrol_sec&accessToken=").concat(_authPushEnabledNode.default.token, "&v=1.1&heartbeats=true");
    assert.equals(eventSourceInstance.url, expectedSSEurl, 'EventSource URL is the expected');
    setTimeout(function () {
      eventSourceInstance.emitOpen();
    }, MILLIS_SSE_OPEN); // open SSE connection after 0.1 seconds

    setTimeout(function () {
      assert.equal(client.getTreatment(key, 'whitelist'), 'not_allowed', 'evaluation of initial Split');
      client.once(client.Event.SDK_UPDATE, function () {
        var lapse = Date.now() - start;
        assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_RETRY_FOR_FIRST_SPLIT_UPDATE_EVENT), 'SDK_UPDATE due to SPLIT_UPDATE event');
        assert.equal(client.getTreatment(key, 'whitelist'), 'allowed', 'evaluation of updated Split');
      });
      eventSourceInstance.emitMessage(_messageSPLIT_UPDATE.default);
    }, MILLIS_FIRST_SPLIT_UPDATE_EVENT); // send a SPLIT_UPDATE event with a new changeNumber after 0.2 seconds

    setTimeout(function () {
      eventSourceInstance.emitMessage(_messageSPLIT_UPDATE2.default);
    }, MILLIS_SECOND_SPLIT_UPDATE_EVENT); // send a SPLIT_UPDATE event with an old changeNumber after 0.3 seconds

    setTimeout(function () {
      assert.equal(client.getTreatment(key, 'splitters'), 'on', 'evaluation with initial segment');
      client.once(client.Event.SDK_UPDATE, function () {
        var lapse = Date.now() - start;
        assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_THIRD_RETRY_FOR_SEGMENT_UPDATE_EVENT), 'SDK_UPDATE due to SEGMENT_UPDATE event');
        assert.equal(client.getTreatment(key, 'splitters'), 'off', 'evaluation with updated segment');
      });
      eventSourceInstance.emitMessage(_messageSEGMENT_UPDATE.default);
    }, MILLIS_SEGMENT_UPDATE_EVENT); // send a SEGMENT_UPDATE event with a new changeNumber after 0.4 seconds

    setTimeout(function () {
      assert.equal(client.getTreatment(key, 'whitelist'), 'allowed', 'evaluation with not killed Split');
      client.once(client.Event.SDK_UPDATE, function () {
        var lapse = Date.now() - start;
        assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_SPLIT_KILL_EVENT), 'SDK_UPDATE due to SPLIT_KILL event');
        assert.equal(client.getTreatment(key, 'whitelist'), 'not_allowed', 'evaluation with killed Split. SDK_UPDATE event must be triggered only once due to SPLIT_KILL, even if fetches fail.');
        client.once(client.Event.SDK_UPDATE, function () {
          assert.fail('SDK_UPDATE event must not be triggered again');
        });
      });
      eventSourceInstance.emitMessage(_messageSPLIT_KILL.default);
    }, MILLIS_SPLIT_KILL_EVENT); // send a SPLIT_KILL event with a new changeNumber after 1.3 seconds
  }); // initial auth

  fetchMock.getOnce(settings.url('/auth'), function (url, opts) {
    if (!opts.headers['Authorization']) assert.fail('`/auth` request must include `Authorization` header');
    assert.pass('auth success');
    return {
      status: 200,
      body: _authPushEnabledNode.default
    };
  }); // initial split and segment sync

  fetchMock.getOnce(settings.url('/splitChanges?since=-1'), {
    status: 200,
    body: _splitchangesSince.default
  });
  fetchMock.getOnce(settings.url('/segmentChanges/splitters?since=-1'), {
    status: 200,
    body: {
      since: -1,
      till: 1457552620999,
      name: 'splitters',
      added: [key],
      removed: []
    }
  }); // extra retry due to double request (greedy fetch). @TODO: remove once `SplitChangesUpdaterFactory` and `segmentChangesFetcher` are updated

  fetchMock.getOnce(settings.url('/segmentChanges/splitters?since=1457552620999'), {
    status: 200,
    body: {
      since: 1457552620999,
      till: 1457552620999,
      name: 'splitters',
      added: [],
      removed: []
    }
  }); // split and segment sync after SSE opened

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_SSE_OPEN), 'sync after SSE connection is opened');
    return {
      status: 200,
      body: _splitchangesSince2.default
    };
  });
  fetchMock.getOnce(settings.url('/segmentChanges/splitters?since=1457552620999'), {
    status: 200,
    body: {
      since: 1457552620999,
      till: 1457552620999,
      name: 'splitters',
      added: [],
      removed: []
    }
  }); // fetch due to SPLIT_UPDATE event

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), {
    throws: new TypeError('Network error')
  }); // fetch retry for SPLIT_UPDATE event, due to previous fail

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_RETRY_FOR_FIRST_SPLIT_UPDATE_EVENT), 'fetch retry due to SPLIT_UPDATE event');
    return {
      status: 200,
      body: _splitchangesSince1457552620999Till1457552649999SPLIT_UPDATE.default
    };
  }); // fetch due to SEGMENT_UPDATE event

  fetchMock.getOnce(settings.url('/segmentChanges/splitters?since=1457552620999'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_SEGMENT_UPDATE_EVENT), 'sync due to SEGMENT_UPDATE event');
    return {
      status: 500,
      body: 'server error'
    }; // server error
    // return { status: 200, body: { since: 1457552620999, till: 1457552620999, name: 'splitters', added: [], removed: [] } }; // outdated response is not handled currently
  }); // first fetch retry for SEGMENT_UPDATE event, due to previous unexpected response (response till minor than SEGMENT_UPDATE changeNumber)

  fetchMock.getOnce(settings.url('/segmentChanges/splitters?since=1457552620999'), {
    throws: new TypeError('Network error')
  }); // second fetch retry for SEGMENT_UPDATE event, due to previous network error

  fetchMock.getOnce(settings.url('/segmentChanges/splitters?since=1457552620999'), {
    status: 200,
    body: '{ "since": 1457552620999, "til'
  }); // third fetch retry for SEGMENT_UPDATE event, due to previous unexpected response (invalid JSON)

  fetchMock.getOnce(settings.url('/segmentChanges/splitters?since=1457552620999'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_THIRD_RETRY_FOR_SEGMENT_UPDATE_EVENT), 'sync third retry for SEGMENT_UPDATE event');
    return {
      status: 200,
      body: {
        since: 1457552620999,
        till: 1457552640000,
        name: 'splitters',
        added: [],
        removed: [key]
      }
    };
  }); // extra retry (fetch until since === till)

  fetchMock.getOnce(settings.url('/segmentChanges/splitters?since=1457552640000'), {
    status: 200,
    body: {
      since: 1457552640000,
      till: 1457552640000,
      name: 'splitters',
      added: [],
      removed: []
    }
  }); // fetch due to SPLIT_KILL event

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552649999'), function () {
    assert.equal(client.getTreatment(key, 'whitelist'), 'not_allowed', 'evaluation with split killed immediately, before fetch is done');
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_SPLIT_KILL_EVENT), 'sync due to SPLIT_KILL event');
    return {
      status: 200,
      body: {
        since: 1457552649999,
        till: 1457552649999,
        splits: []
      }
    }; // returning old state
  }); // first fetch retry for SPLIT_KILL event, due to previous unexpected response (response till minor than SPLIT_KILL changeNumber)

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552649999'), {
    status: 200,
    body: '{ "since": 1457552620999, "til'
  }); // invalid JSON
  // second fetch retry for SPLIT_KILL event

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552649999'), {
    throws: new TypeError('Network error')
  }); // third fetch retry for SPLIT_KILL event

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552649999'), function () {
    var lapse = Date.now() - start;
    assert.true((0, _testUtils.nearlyEqual)(lapse, MILLIS_THIRD_RETRY_FOR_SPLIT_KILL_EVENT), 'third fetch retry due to SPLIT_KILL event');
    setTimeout(function () {
      client.destroy().then(function () {
        assert.equal(client.getTreatment(key, 'whitelist'), 'control', 'evaluation returns control if client is destroyed');
        _backoff.default.DEFAULT_BASE_MILLIS = ORIGINAL_DEFAULT_BASE_MILLIS;
        assert.end();
      });
    });
    return {
      status: 408,
      body: 'request timeout'
    };
  });
  (0, _testUtils.mockSegmentChanges)(fetchMock, new RegExp("".concat(settings.url('/segmentChanges'), "/(employees|developers)")), [key]);
  fetchMock.get(new RegExp('.*'), function (url) {
    assert.fail('unexpected GET request with url: ' + url);
  });
  fetchMock.post('*', 200);
  splitio = (0, _index.SplitFactory)(config);
  client = splitio.client();
}