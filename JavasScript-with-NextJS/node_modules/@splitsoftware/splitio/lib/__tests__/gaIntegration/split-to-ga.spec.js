"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _sinon = _interopRequireDefault(require("sinon"));

var _ = require("../..");

var _settings = _interopRequireDefault(require("../../utils/settings"));

var _gaTestUtils = require("./gaTestUtils");

var _constants = require("../../utils/constants");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function countImpressions(parsedImpressionsBulkPayload) {
  return parsedImpressionsBulkPayload.reduce(function (accumulator, currentValue) {
    return accumulator + currentValue.i.length;
  }, 0);
}

var config = {
  core: {
    authorizationKey: '<some-token>',
    key: 'facundo@split.io',
    trafficType: 'user'
  },
  integrations: [{
    type: 'SPLIT_TO_GOOGLE_ANALYTICS'
  }],
  scheduler: {
    impressionsRefreshRate: 0.2,
    eventsQueueSize: 1
  },
  streamingEnabled: false,
  sync: {
    impressionsMode: _constants.DEBUG
  }
};
var settings = (0, _settings.default)(config);

function _default(fetchMock, assert) {
  // test default behavior
  assert.test(function (t) {
    var client; // Generator to synchronize the call of t.end() when both impressions and events endpoints were invoked.

    var finish = /*#__PURE__*/_regenerator.default.mark(function _callee() {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return;

            case 2:
              t.equal(window.gaSpy.getHits().length, 3, 'Total hits are 3: pageview, split event and impression');
              setTimeout(function () {
                client.destroy();
                t.end();
              });

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })();

    fetchMock.postOnce(settings.url('/testImpressions/bulk'), function (url, opts) {
      // we can assert payload and ga hits, once ga is ready and after `SplitToGa.queue`, that is timeout wrapped, make to the queue stack.
      setTimeout(function () {
        window.ga(function () {
          var resp = JSON.parse(opts.body);
          var sentImpressions = countImpressions(resp);
          var sentImpressionHits = window.gaSpy.getHits().filter(function (hit) {
            return hit.eventCategory === 'split-impression';
          });
          t.equal(sentImpressions, 1, 'Number of impressions');
          t.equal(sentImpressions, sentImpressionHits.length, "Number of sent impression hits must be equal to the number of impressions (".concat(sentImpressions, ")"));
          finish.next();
        });
      });
      return 200;
    });
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      // @TODO review why it is not working with a delay of 0
      setTimeout(function () {
        window.ga(function () {
          var resp = JSON.parse(opts.body);
          var sentEvents = resp.length;
          var sentEventHits = window.gaSpy.getHits().filter(function (hit) {
            return hit.eventCategory === 'split-event';
          });
          t.equal(sentEvents, 1, 'Number of events');
          t.equal(sentEvents, sentEventHits.length, "Number of sent event hits must be equal to sent events: (".concat(sentEvents, ")"));
          finish.next();
        });
      }, 10);
      return 200;
    });
    (0, _gaTestUtils.gaTag)(); // siteSpeedSampleRate set to 0 to never send a site speed timing hit

    window.ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    (0, _gaTestUtils.gaSpy)();
    window.ga('send', 'pageview');
    var factory = (0, _.SplitFactory)(config);
    client = factory.client();
    client.ready().then(function () {
      client.track('some_event');
      client.getTreatment('hierarchical_splits_test');
    });
  }); // test default behavior in multiple trackers, with multiple impressions, and GA in a different global variable

  assert.test(function (t) {
    var client;
    var numOfEvaluations = 4;
    fetchMock.postOnce(settings.url('/testImpressions/bulk'), function (url, opts) {
      setTimeout(function () {
        window.other_location_for_ga(function () {
          var resp = JSON.parse(opts.body);
          var sentImpressions = countImpressions(resp);
          var sentHitsTracker1 = window.gaSpy.getHits('myTracker1');
          var sentHitsTracker2 = window.gaSpy.getHits('myTracker2');
          t.equal(sentImpressions, numOfEvaluations, 'Number of impressions equals the number of evaluations');
          t.equal(sentImpressions, sentHitsTracker1.length, 'Number of sent hits must be equal to the number of impressions');
          t.equal(sentImpressions, sentHitsTracker2.length, 'Number of sent hits must be equal to the number of impressions');
          setTimeout(function () {
            client.destroy();
            t.end();
          });
        });
      });
      return 200;
    });
    (0, _gaTestUtils.gaTag)('other_location_for_ga');
    window.other_location_for_ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    window.other_location_for_ga('create', 'UA-00000001-1', 'example1.com', 'myTracker1', {
      siteSpeedSampleRate: 0
    });
    window.other_location_for_ga('create', 'UA-00000002-1', 'example2.com', 'myTracker2', {
      siteSpeedSampleRate: 0
    });
    (0, _gaTestUtils.gaSpy)(['myTracker1', 'myTracker2']);
    var factory = (0, _.SplitFactory)(_objectSpread(_objectSpread({}, config), {}, {
      core: _objectSpread(_objectSpread({}, config.core), {}, {
        authorizationKey: '<some-token-2>'
      }),
      integrations: [{
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        trackerNames: ['myTracker1']
      }, {
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        trackerNames: ['myTracker2']
      }]
    }));
    client = factory.client();
    client.ready().then(function () {
      for (var i = 0; i < numOfEvaluations; i++) {
        client.getTreatment('split_with_config');
      }
    });
  }); // test several SplitToGa integration items, with custom filter and mapper

  assert.test(function (t) {
    var client;
    var numOfEvaluations = 4;
    var numOfEvents = 3; // Generator to synchronize the call of t.end() when both impressions and events endpoints were invoked.

    var finish = /*#__PURE__*/_regenerator.default.mark(function _callee2() {
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return;

            case 2:
              setTimeout(function () {
                client.destroy();
                t.end();
              });

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })();

    fetchMock.postOnce(settings.url('/testImpressions/bulk'), function (url, opts) {
      setTimeout(function () {
        window.ga(function () {
          var resp = JSON.parse(opts.body);
          var sentImpressions = countImpressions(resp);
          var sentImpressionHitsTracker3 = window.gaSpy.getHits('myTracker3').filter(function (hit) {
            return hit.eventCategory === 'split-impression';
          });
          var sentImpressionHitsTracker4 = window.gaSpy.getHits('myTracker4').filter(function (hit) {
            return hit.eventCategory === 'split-impression';
          });
          t.equal(sentImpressionHitsTracker3.length, sentImpressions, 'For tracker3, no impressions are filtered');
          t.equal(sentImpressionHitsTracker4.length, 0, 'For tracker4, all impressions are filtered');
          finish.next();
        });
      });
      return 200;
    });
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      // @TODO review why it is not working with a delay of 0
      setTimeout(function () {
        window.ga(function () {
          var resp = JSON.parse(opts.body);
          var sentEvents = resp.length;
          var sentEventHitsTracker3 = window.gaSpy.getHits('myTracker3').filter(function (hit) {
            return hit.eventCategory === 'mycategory';
          });
          var sentEventHitsTracker4 = window.gaSpy.getHits('myTracker4').filter(function (hit) {
            return hit.eventCategory === 'mycategory';
          });
          t.equal(sentEventHitsTracker3.length, 0, 'For tracker3, all events are filtered');
          t.equal(sentEventHitsTracker4.length, sentEvents, 'For tracker4, no events are filtered');
          finish.next();
        });
      }, 10);
      return 200;
    });
    (0, _gaTestUtils.gaTag)();
    window.ga('create', 'UA-00000003-1', 'example3.com', 'myTracker3', {
      siteSpeedSampleRate: 0
    });
    window.ga('create', 'UA-00000004-1', 'example4.com', 'myTracker4', {
      siteSpeedSampleRate: 0
    });
    (0, _gaTestUtils.gaSpy)(['myTracker3', 'myTracker4']);

    var onlyImpressionsFilter = function onlyImpressionsFilter(_ref) {
      var type = _ref.type;
      return type === _constants.SPLIT_IMPRESSION;
    };

    var onlyEventsMapper = function onlyEventsMapper(_ref2) {
      var payload = _ref2.payload,
          type = _ref2.type;
      return type === _constants.SPLIT_EVENT ? {
        hitType: 'event',
        eventCategory: 'mycategory',
        eventAction: payload.eventTypeId
      } : undefined;
    };

    var factory = (0, _.SplitFactory)(_objectSpread(_objectSpread({}, config), {}, {
      core: _objectSpread(_objectSpread({}, config.core), {}, {
        authorizationKey: '<some-token-2>'
      }),
      scheduler: {
        impressionsRefreshRate: 0.2,
        eventsQueueSize: numOfEvents
      },
      integrations: [{
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        trackerNames: ['myTracker3'],
        filter: onlyImpressionsFilter
      }, {
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        trackerNames: ['myTracker4'],
        mapper: onlyEventsMapper
      }]
    }));
    client = factory.client();
    client.ready().then(function () {
      for (var i = 0; i < numOfEvaluations; i++) {
        client.getTreatment('split_with_config');
      }

      for (var _i = 0; _i < numOfEvents; _i++) {
        client.track('eventType');
      }
    });
  }); // exception in custom mapper or invalid mapper result must not send a hit

  assert.test(function (t) {
    var logSpy = _sinon.default.spy(console, 'log');

    var error = 'some error';
    var client;
    var numOfEvaluations = 1;
    fetchMock.postOnce(settings.url('/testImpressions/bulk'), function (url, opts) {
      setTimeout(function () {
        window.ga(function () {
          var resp = JSON.parse(opts.body);
          var sentImpressions = countImpressions(resp);
          var sentHitsDefault = window.gaSpy.getHits();
          var sentHitsTracker1 = window.gaSpy.getHits('myTracker1');
          var sentHitsTracker2 = window.gaSpy.getHits('myTracker2');
          t.equal(sentImpressions, numOfEvaluations, 'Number of impressions equals the number of evaluations');
          t.equal(sentHitsDefault.length, 0, 'No hits sent if custom mapper throws error');
          t.equal(sentHitsTracker1.length, 0, 'No hits sent if custom mapper returns invalid result');
          t.equal(sentHitsTracker2.length, numOfEvaluations, 'Number of sent hits must be equal to the number of impressions');
          setTimeout(function () {
            t.ok(logSpy.calledWith("[WARN]  splitio-split-to-ga => SplitToGa queue method threw: ".concat(error, ". No hit was sent.")));
            t.ok(logSpy.calledWith('[WARN]  splitio-split-to-ga => your custom mapper returned an invalid FieldsObject instance. It must be an object with at least a `hitType` field.'));
            client.destroy();
            logSpy.restore();
            t.end();
          });
        });
      });
      return 200;
    });
    (0, _gaTestUtils.gaTag)();
    window.ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    window.ga('create', 'UA-00000001-1', 'example1.com', 'myTracker1', {
      siteSpeedSampleRate: 0
    });
    window.ga('create', 'UA-00000002-1', 'example2.com', 'myTracker2', {
      siteSpeedSampleRate: 0
    });
    (0, _gaTestUtils.gaSpy)(['t0', 'myTracker1', 'myTracker2']);
    var factory = (0, _.SplitFactory)(_objectSpread(_objectSpread({}, config), {}, {
      debug: true,
      integrations: [{
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        mapper: function mapper() {
          throw error;
        }
      }, {
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        trackerNames: ['myTracker1'],
        mapper: function mapper() {
          return {};
        }
      }, {
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        trackerNames: ['myTracker2'],
        mapper: function mapper() {
          return {
            hitType: 'event',
            eventCategory: 'my-split-impression',
            eventAction: 'some-action'
          };
        }
      }]
    }));
    client = factory.client();
    client.ready().then(function () {
      for (var i = 0; i < numOfEvaluations; i++) {
        client.getTreatment('split_with_config');
      }
    });
  }); // Split ready before GA initialized

  assert.test(function (t) {
    var logSpy = _sinon.default.spy(console, 'log');

    var client;
    var numOfEvaluations = 1;
    fetchMock.postOnce(settings.url('/testImpressions/bulk'), function (url, opts) {
      setTimeout(function () {
        window.ga(function () {
          var resp = JSON.parse(opts.body);
          var sentImpressions = countImpressions(resp);
          var sentHitsDefault = window.gaSpy.getHits();
          t.equal(sentImpressions, numOfEvaluations, 'Number of impressions equals the number of evaluations');
          t.equal(sentHitsDefault.length, 0, 'No hits sent if ga initialized after Split');
          setTimeout(function () {
            t.ok(logSpy.calledWith('[WARN]  splitio-split-to-ga => `ga` command queue not found. No hits will be sent.'));
            client.destroy();
            logSpy.restore();
            t.end();
          });
        });
      });
      return 200;
    });
    (0, _gaTestUtils.removeGaTag)();
    var factory = (0, _.SplitFactory)(_objectSpread(_objectSpread({}, config), {}, {
      debug: true
    }));
    client = factory.client();
    client.ready().then(function () {
      for (var i = 0; i < numOfEvaluations; i++) {
        client.getTreatment('split_with_config');
      }
    });
    (0, _gaTestUtils.addGaTag)();
    window.ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    (0, _gaTestUtils.gaSpy)();
  }); // test `events` and `impressions` flags

  assert.test(function (t) {
    var client; // Generator to synchronize the call of t.end() when both impressions and events endpoints were invoked.

    var finish = /*#__PURE__*/_regenerator.default.mark(function _callee3() {
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return;

            case 2:
              t.equal(window.gaSpy.getHits().length, 1, 'Total hits are 1: pageview');
              setTimeout(function () {
                client.destroy();
                t.end();
              });

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })();

    fetchMock.postOnce(settings.url('/testImpressions/bulk'), function (url, opts) {
      // we can assert payload and ga hits, once ga is ready and after `SplitToGa.queue`, that is timeout wrapped, make to the queue stack.
      setTimeout(function () {
        window.ga(function () {
          var resp = JSON.parse(opts.body);
          var sentImpressions = countImpressions(resp);
          var sentImpressionHits = window.gaSpy.getHits().filter(function (hit) {
            return hit.eventCategory === 'split-impression';
          });
          t.equal(sentImpressions, 1, 'Number of impressions');
          t.equal(sentImpressionHits.length, 0, 'No hits associated to Split impressions must be sent');
          finish.next();
        });
      });
      return 200;
    });
    fetchMock.postOnce(settings.url('/events/bulk'), function (url, opts) {
      setTimeout(function () {
        window.ga(function () {
          var resp = JSON.parse(opts.body);
          var sentEvents = resp.length;
          var sentEventHits = window.gaSpy.getHits().filter(function (hit) {
            return hit.eventCategory === 'split-event';
          });
          t.equal(sentEvents, 1, 'Number of events');
          t.equal(sentEventHits.length, 0, 'No hits associated to Split events must be sent');
          finish.next();
        });
      });
      return 200;
    });
    (0, _gaTestUtils.gaTag)();
    window.ga('create', 'UA-00000000-1', 'auto', {
      siteSpeedSampleRate: 0
    });
    (0, _gaTestUtils.gaSpy)();
    window.ga('send', 'pageview');
    var factory = (0, _.SplitFactory)(_objectSpread(_objectSpread({}, config), {}, {
      integrations: [{
        type: 'SPLIT_TO_GOOGLE_ANALYTICS',
        events: false,
        impressions: false
      }]
    }));
    client = factory.client();
    client.ready().then(function () {
      client.track('some_event');
      client.getTreatment('hierarchical_splits_test');
    });
  });
}