"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _InMemory = _interopRequireDefault(require("../../../SegmentCache/InMemory"));

var _Keys = _interopRequireDefault(require("../../../Keys"));

var _settings = _interopRequireDefault(require("../../../../utils/settings"));

(0, _tapeCatch.default)('SEGMENT CACHE / in memory', function (assert) {
  var cache = new _InMemory.default(new _Keys.default((0, _settings.default)()));
  cache.addToSegment('mocked-segment', ['a', 'b', 'c']);
  cache.setChangeNumber('mocked-segment', 1);
  cache.removeFromSegment('mocked-segment', ['d']);
  assert.ok(cache.getChangeNumber('mocked-segment') === 1);
  cache.addToSegment('mocked-segment', ['d', 'e']);
  cache.removeFromSegment('mocked-segment', ['a', 'c']);
  assert.ok(cache.getChangeNumber('mocked-segment') === 1);
  assert.ok(cache.isInSegment('mocked-segment', 'a') === false);
  assert.ok(cache.isInSegment('mocked-segment', 'b') === true);
  assert.ok(cache.isInSegment('mocked-segment', 'c') === false);
  assert.ok(cache.isInSegment('mocked-segment', 'd') === true);
  assert.ok(cache.isInSegment('mocked-segment', 'e') === true);
  assert.end();
});