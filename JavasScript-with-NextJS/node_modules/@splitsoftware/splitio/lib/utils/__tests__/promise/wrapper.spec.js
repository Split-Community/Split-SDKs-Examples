"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _wrapper = _interopRequireDefault(require("../../promise/wrapper"));

(0, _tapeCatch.default)('Promise utils / promise wrapper', function (assert) {
  assert.plan(36 + 22); // number of passHandler, passHandlerFinally, passHandlerWithThrow and `hasOnFulfilled` asserts

  var value = 'value';

  var failHandler = function failHandler(val) {
    assert.fail(val);
  };

  var passHandler = function passHandler(val) {
    assert.equal(val, value);
    return val;
  };

  var passHandlerFinally = function passHandlerFinally() {
    assert.pass();
  };

  var passHandlerWithThrow = function passHandlerWithThrow(val) {
    assert.equal(val, value);
    throw val;
  };

  var createResolvedPromise = function createResolvedPromise() {
    return new Promise(function (res) {
      setTimeout(function () {
        res(value);
      }, 100);
    });
  };

  var createRejectedPromise = function createRejectedPromise() {
    return new Promise(function (_, rej) {
      setTimeout(function () {
        rej(value);
      }, 100);
    });
  }; // resolved promises


  var wrappedPromise = (0, _wrapper.default)(createResolvedPromise(), failHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), false);
  wrappedPromise = (0, _wrapper.default)(createResolvedPromise(), failHandler);
  wrappedPromise.then(passHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  wrappedPromise = (0, _wrapper.default)(createResolvedPromise(), failHandler);
  wrappedPromise.finally(passHandlerFinally);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  wrappedPromise = (0, _wrapper.default)(createResolvedPromise(), failHandler);
  wrappedPromise.then(passHandler, failHandler).finally(passHandlerFinally);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  wrappedPromise = (0, _wrapper.default)(createResolvedPromise(), failHandler);
  wrappedPromise.then(passHandler).catch(failHandler).finally(passHandlerFinally);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  wrappedPromise = (0, _wrapper.default)(createResolvedPromise(), failHandler);
  wrappedPromise.then(passHandler).catch(failHandler).then(passHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  wrappedPromise = (0, _wrapper.default)(createResolvedPromise(), failHandler);
  wrappedPromise.then(passHandler).then(passHandler).catch(failHandler).finally(passHandlerFinally).then(passHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  wrappedPromise = (0, _wrapper.default)(createResolvedPromise(), failHandler);
  wrappedPromise.then(passHandler).then(passHandlerWithThrow).catch(passHandler).then(passHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  var wrappedPromise2 = (0, _wrapper.default)(createResolvedPromise(), failHandler);
  wrappedPromise2.then(function () {
    wrappedPromise2.then(passHandler);
  });
  assert.equal(wrappedPromise2.hasOnFulfilled(), true);
  Promise.all([(0, _wrapper.default)(createResolvedPromise(), failHandler), (0, _wrapper.default)(createResolvedPromise(), failHandler)]).then(passHandlerFinally()); // rejected promises

  wrappedPromise = (0, _wrapper.default)(createRejectedPromise(), passHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), false);
  wrappedPromise = (0, _wrapper.default)(createRejectedPromise(), failHandler);
  wrappedPromise.catch(passHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), false);
  wrappedPromise = (0, _wrapper.default)(createRejectedPromise(), failHandler);
  wrappedPromise.catch(passHandler).then(passHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), false); // caveat: setting an `onFinally` handler as the first handler, requires an `onRejected` handler if promise is rejected

  wrappedPromise = (0, _wrapper.default)(createRejectedPromise(), failHandler);
  wrappedPromise.finally(passHandlerFinally).catch(passHandlerFinally);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  wrappedPromise = (0, _wrapper.default)(createRejectedPromise(), passHandler);
  wrappedPromise.then(undefined, passHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), false);
  wrappedPromise = (0, _wrapper.default)(createRejectedPromise(), passHandler);
  wrappedPromise.then(failHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  wrappedPromise = (0, _wrapper.default)(createRejectedPromise(), failHandler);
  wrappedPromise.then(failHandler).then(failHandler).catch(passHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  wrappedPromise = (0, _wrapper.default)(createRejectedPromise(), passHandler);
  wrappedPromise.then(failHandler).then(failHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  wrappedPromise = (0, _wrapper.default)(createRejectedPromise(), failHandler);
  wrappedPromise.then(failHandler, passHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  wrappedPromise = (0, _wrapper.default)(createRejectedPromise(), failHandler);
  wrappedPromise.then(failHandler).catch(passHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  wrappedPromise = (0, _wrapper.default)(createRejectedPromise(), failHandler);
  wrappedPromise.then(failHandler).then(failHandler, passHandler);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  wrappedPromise = (0, _wrapper.default)(createRejectedPromise(), failHandler);
  wrappedPromise.then(failHandler).catch(passHandler).then(passHandler).finally(passHandlerFinally);
  assert.equal(wrappedPromise.hasOnFulfilled(), true);
  var wrappedPromise3 = (0, _wrapper.default)(createRejectedPromise(), failHandler);
  wrappedPromise3.catch(function () {
    wrappedPromise3.catch(passHandler);
  });
  assert.equal(wrappedPromise3.hasOnFulfilled(), false);
  Promise.all([(0, _wrapper.default)(createResolvedPromise(), failHandler), (0, _wrapper.default)(createRejectedPromise(), failHandler)]).catch(passHandler);
  setTimeout(function () {
    assert.end();
  }, 1000);
});
(0, _tapeCatch.default)('Promise utils / promise wrapper: async/await', /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(assert) {
    var value, failHandler, passHandler, passHandlerFinally, passHandlerWithThrow, createResolvedPromise, createRejectedPromise, _result, _result2, result;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            assert.plan(8); // number of passHandler and passHandlerWithThrow

            value = 'value';

            failHandler = function failHandler(val) {
              assert.fail(val);
            };

            passHandler = function passHandler(val) {
              assert.equal(val, value);
              return val;
            };

            passHandlerFinally = function passHandlerFinally() {
              assert.pass();
            };

            passHandlerWithThrow = function passHandlerWithThrow(val) {
              assert.equal(val, value);
              throw val;
            };

            createResolvedPromise = function createResolvedPromise() {
              return new Promise(function (res) {
                res(value);
              });
            };

            createRejectedPromise = function createRejectedPromise() {
              return new Promise(function (res, rej) {
                rej(value);
              });
            };

            _context.prev = 8;
            _context.next = 11;
            return (0, _wrapper.default)(createResolvedPromise(), failHandler);

          case 11:
            _result = _context.sent;
            passHandler(_result);
            _context.next = 18;
            break;

          case 15:
            _context.prev = 15;
            _context.t0 = _context["catch"](8);
            failHandler(_context.t0);

          case 18:
            _context.prev = 18;
            passHandlerFinally();
            return _context.finish(18);

          case 21:
            _context.prev = 21;
            _context.next = 24;
            return (0, _wrapper.default)(createRejectedPromise(), failHandler);

          case 24:
            _result2 = _context.sent;
            failHandler(_result2);
            _context.next = 31;
            break;

          case 28:
            _context.prev = 28;
            _context.t1 = _context["catch"](21);
            passHandler(_context.t1);

          case 31:
            _context.prev = 31;
            _context.next = 34;
            return (0, _wrapper.default)(createResolvedPromise(), failHandler);

          case 34:
            result = _context.sent;
            passHandler(result);
            passHandlerWithThrow(result);
            _context.next = 42;
            break;

          case 39:
            _context.prev = 39;
            _context.t2 = _context["catch"](31);
            result = passHandler(_context.t2);

          case 42:
            _context.prev = 42;
            passHandlerFinally();
            return _context.finish(42);

          case 45:
            passHandler(result);
            setTimeout(function () {
              assert.end();
            }, 1000);

          case 47:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[8, 15, 18, 21], [21, 28], [31, 39, 42, 45]]);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());