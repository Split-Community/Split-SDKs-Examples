"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _thenable = _interopRequireDefault(require("../../promise/thenable"));

(0, _tapeCatch.default)('Promise utils / thenable', function (assert) {
  var prom = new Promise(function () {});
  var promResolved = Promise.resolve();
  var promRejected = Promise.reject();
  var thenableThing = {
    then: function then() {}
  };
  var nonThenableThing = {
    then: 'not a function'
  };
  assert.true((0, _thenable.default)(prom), 'Promises and thenable-like objects should pass the test.');
  assert.true((0, _thenable.default)(promResolved), 'Promises and thenable-like objects should pass the test.');
  assert.true((0, _thenable.default)(promRejected), 'Promises and thenable-like objects should pass the test.');
  assert.true((0, _thenable.default)(thenableThing), 'Promises and thenable-like objects should pass the test.');
  assert.false((0, _thenable.default)(nonThenableThing), 'Non thenable objects should fail the test.');
  assert.false((0, _thenable.default)('string'), 'Non thenable objects should fail the test.');
  assert.false((0, _thenable.default)(123), 'Non thenable objects should fail the test.');
  assert.false((0, _thenable.default)({}), 'Non thenable objects should fail the test.');
  assert.false((0, _thenable.default)({
    catch: function _catch() {}
  }), 'Non thenable objects should fail the test.');
  assert.false((0, _thenable.default)([prom, promResolved]), 'Non thenable objects should fail the test.');
  assert.false((0, _thenable.default)(function () {}), 'Non thenable objects should fail the test.');
  assert.end();
});