"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LOG_LEVELS = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _logger = _interopRequireWildcard(require("../../logger"));

var _LoggerFactory = require("../../logger/LoggerFactory");

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
// We'll set this only once, is the constant we will use for
// comparing the LogLevel values.
var LOG_LEVELS = {
  'DEBUG': 'DEBUG',
  'INFO': 'INFO',
  'WARN': 'WARN',
  'ERROR': 'ERROR',
  'NONE': 'NONE'
};
exports.LOG_LEVELS = LOG_LEVELS;
(0, _tapeCatch.default)('SPLIT LOGGER / methods and props', function (assert) {
  assert.equal((0, _typeof2.default)(_logger.default), 'function', 'Importing the module should return a function.');
  assert.equal((0, _typeof2.default)(_logger.API), 'object', 'Our logger should expose an API object.');
  assert.equal((0, _typeof2.default)(_logger.API.enable), 'function', 'API object should have enable method.');
  assert.equal((0, _typeof2.default)(_logger.API.disable), 'function', 'API object should have disable method.');
  assert.equal((0, _typeof2.default)(_logger.API.setLogLevel), 'function', 'API object should have setLogLevel method.');
  assert.deepEqual(_logger.API.LogLevel, LOG_LEVELS, 'API object should have LogLevel prop including all available levels.');
  assert.end();
});
(0, _tapeCatch.default)('SPLIT LOGGER / create factory returned instance', function (assert) {
  var logger = (0, _logger.default)('category', {});
  assert.ok(logger instanceof _LoggerFactory.Logger, 'Our logger should expose an API object.');
  assert.end();
});