"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _counter = _interopRequireDefault(require("../counter"));

(0, _tapeCatch.default)('Counter / Impression Counter Test makeKey', function (assert) {
  var timestamp = new Date(2020, 9, 2, 10, 0, 0).getTime();
  var counter = new _counter.default();
  assert.equal(counter._makeKey('someFeature', new Date(2020, 9, 2, 10, 53, 12).getTime()), "someFeature::".concat(timestamp));
  assert.equal(counter._makeKey('', new Date(2020, 9, 2, 10, 53, 12).getTime()), "::".concat(timestamp));
  assert.equal(counter._makeKey(null, new Date(2020, 9, 2, 10, 53, 12).getTime()), "null::".concat(timestamp));
  assert.equal(counter._makeKey(null, 0), 'null::0');
  assert.end();
});
(0, _tapeCatch.default)('Counter / Impression Counter Test BasicUsage', function (assert) {
  var timestamp = new Date(2020, 9, 2, 10, 10, 12).getTime();
  var counter = new _counter.default();
  counter.inc('feature1', timestamp, 1);
  counter.inc('feature1', timestamp + 1, 1);
  counter.inc('feature1', timestamp + 2, 1);
  counter.inc('feature2', timestamp + 3, 2);
  counter.inc('feature2', timestamp + 4, 2);
  var counted = counter.popAll();
  assert.equal(Object.keys(counted).length, 2);
  assert.equal(counted[counter._makeKey('feature1', timestamp)], 3);
  assert.equal(counted[counter._makeKey('feature2', timestamp)], 4);
  assert.equal(Object.keys(counter.popAll()).length, 0);
  var nextHourTimestamp = new Date(2020, 9, 2, 11, 10, 12).getTime();
  counter.inc('feature1', timestamp, 1);
  counter.inc('feature1', timestamp + 1, 1);
  counter.inc('feature1', timestamp + 2, 1);
  counter.inc('feature2', timestamp + 3, 2);
  counter.inc('feature2', timestamp + 4, 2);
  counter.inc('feature1', nextHourTimestamp, 1);
  counter.inc('feature1', nextHourTimestamp + 1, 1);
  counter.inc('feature1', nextHourTimestamp + 2, 1);
  counter.inc('feature2', nextHourTimestamp + 3, 2);
  counter.inc('feature2', nextHourTimestamp + 4, 2);
  var counted2 = counter.popAll();
  assert.equal(Object.keys(counted2).length, 4);
  assert.equal(counted2[counter._makeKey('feature1', timestamp)], 3);
  assert.equal(counted2[counter._makeKey('feature2', timestamp)], 4);
  assert.equal(counted2[counter._makeKey('feature1', nextHourTimestamp)], 3);
  assert.equal(counted2[counter._makeKey('feature2', nextHourTimestamp)], 4);
  assert.equal(Object.keys(counter.popAll()).length, 0);
  assert.end();
});