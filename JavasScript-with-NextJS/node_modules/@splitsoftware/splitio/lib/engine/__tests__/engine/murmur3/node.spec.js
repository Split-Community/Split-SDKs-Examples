"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _fs = _interopRequireDefault(require("fs"));

var _readline = _interopRequireDefault(require("readline"));

var _murmur = _interopRequireDefault(require("../../../engine/murmur3/murmur3"));

var _murmur3_ = require("../../../engine/murmur3/murmur3_128");

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
['murmur3-sample-v4.csv', 'murmur3-sample-v3.csv', 'murmur3-sample-data-v2.csv', 'murmur3-sample-data-non-alpha-numeric-v2.csv', 'murmur3-sample-double-treatment-users.csv'].forEach(function (filename) {
  (0, _tapeCatch.default)('MURMUR3 32 / validate hashing behavior using sample data', function (assert) {
    var parser = _readline.default.createInterface({
      terminal: false,
      input: _fs.default.createReadStream(require.resolve("../mocks/".concat(filename)))
    });

    parser.on('line', function (line) {
      var parts = line.toString('utf8').split(',');

      if (parts.length === 4) {
        var _parts = (0, _slicedToArray2.default)(parts, 4),
            seed = _parts[0],
            key = _parts[1],
            hash = _parts[2],
            bucket = _parts[3];

        seed = parseInt(seed, 10);
        hash = parseInt(hash, 10);
        bucket = parseInt(bucket, 10);
        assert.equal(_murmur.default.hash(key, seed), hash);
        assert.equal(_murmur.default.bucket(key, seed), bucket);
      }
    }).on('close', assert.end);
  });
});

function dec2hex(str) {
  var sum = [];
  var dec = str.toString().split('');
  var hex = [];

  while (dec.length) {
    var s = 1 * dec.shift();

    for (var i = 0; s || i < sum.length; i++) {
      s += (sum[i] || 0) * 10;
      sum[i] = s % 16;
      s = (s - sum[i]) / 16;
    }
  }

  while (sum.length) {
    hex.push(sum.pop().toString(16));
  }

  return hex.join('');
}

['murmur3_64_uuids.csv'].forEach(function (filename) {
  (0, _tapeCatch.default)('MURMUR3 128 / validate hashing behavior using sample data', function (assert) {
    var parser = _readline.default.createInterface({
      terminal: false,
      input: _fs.default.createReadStream(require.resolve("../mocks/".concat(filename)))
    });

    parser.on('line', function (line) {
      var parts = line.split(',');

      if (parts.length === 3) {
        var _parts2 = (0, _slicedToArray2.default)(parts, 3),
            key = _parts2[0],
            seed = _parts2[1],
            hash = _parts2[2];

        seed = parseInt(seed, 10);
        var result = (0, _murmur3_.hash128)(key, seed);
        assert.equal(result.substring(0, 16), dec2hex(hash).padStart(16, '0'));
      }
    }).on('close', assert.end);
  });
});