"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _parser = _interopRequireDefault(require("../../parser"));

var _parser2 = _interopRequireDefault(require("../../../utils/key/parser"));

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
(0, _tapeCatch.default)('PARSER / if user is in segment all 100%:on but trafficAllocation is 0%', /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(assert) {
    var evaluator, evaluation;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            evaluator = (0, _parser.default)([{
              conditionType: 'ROLLOUT',
              matcherGroup: {
                combiner: 'AND',
                matchers: [{
                  matcherType: 'ALL_KEYS',
                  negate: false,
                  userDefinedSegmentMatcherData: null,
                  whitelistMatcherData: null
                }]
              },
              partitions: [{
                treatment: 'on',
                size: 100
              }],
              label: 'in segment all'
            }]);
            _context.next = 3;
            return evaluator((0, _parser2.default)('a key'), 31, 0, 31);

          case 3:
            evaluation = _context.sent;
            assert.equal(evaluation.treatment, undefined, 'treatment should be undefined');
            assert.equal(evaluation.label, 'not in split', 'label should be fixed string');
            assert.end();

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
(0, _tapeCatch.default)('PARSER / if user is in segment all 100%:on but trafficAllocation is 99% with bucket below 99', /*#__PURE__*/function () {
  var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(assert) {
    var evaluator, evaluation;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            evaluator = (0, _parser.default)([{
              conditionType: 'ROLLOUT',
              matcherGroup: {
                combiner: 'AND',
                matchers: [{
                  matcherType: 'ALL_KEYS',
                  negate: false,
                  userDefinedSegmentMatcherData: null,
                  whitelistMatcherData: null
                }]
              },
              partitions: [{
                treatment: 'on',
                size: 100
              }],
              label: 'in segment all'
            }]);
            _context2.next = 3;
            return evaluator((0, _parser2.default)('a key'), 31, 99, 31);

          case 3:
            evaluation = _context2.sent;
            assert.equal(evaluation.treatment, 'on', "evaluator should return treatment 'on' as traffic allocation is bigger than bucket result");
            assert.equal(evaluation.label, 'in segment all', "evaluator should return label 'in segment all'");
            assert.end();

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());
(0, _tapeCatch.default)('PARSER / if user is in segment all 100%:on but trafficAllocation is 99% and bucket returns 100', /*#__PURE__*/function () {
  var _ref3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(assert) {
    var evaluator, evaluation;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            evaluator = (0, _parser.default)([{
              conditionType: 'ROLLOUT',
              matcherGroup: {
                combiner: 'AND',
                matchers: [{
                  matcherType: 'ALL_KEYS',
                  negate: false,
                  userDefinedSegmentMatcherData: null,
                  whitelistMatcherData: null
                }]
              },
              partitions: [{
                treatment: 'on',
                size: 100
              }],
              label: 'in segment all'
            }]);
            _context3.next = 3;
            return evaluator((0, _parser2.default)('aaaaa'), 31, 99, 14);

          case 3:
            evaluation = _context3.sent;
            assert.equal(evaluation.treatment, undefined, 'treatment should be undefined');
            assert.equal(evaluation.label, 'not in split', 'label should be fixed string');
            assert.end();

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}());
(0, _tapeCatch.default)('PARSER / if user is whitelisted and in segment all 100%:off with trafficAllocation as 0%', /*#__PURE__*/function () {
  var _ref4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(assert) {
    var evaluator, evaluation;
    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            evaluator = (0, _parser.default)([{
              conditionType: 'WHITELIST',
              matcherGroup: {
                combiner: 'AND',
                matchers: [{
                  matcherType: 'WHITELIST',
                  negate: false,
                  userDefinedSegmentMatcherData: null,
                  whitelistMatcherData: {
                    whitelist: ['a key']
                  }
                }]
              },
              partitions: [{
                treatment: 'on',
                size: 100
              }],
              label: 'whitelisted'
            }, {
              conditionType: 'ROLLOUT',
              matcherGroup: {
                combiner: 'AND',
                matchers: [{
                  matcherType: 'ALL_KEYS',
                  negate: false,
                  userDefinedSegmentMatcherData: null,
                  whitelistMatcherData: null
                }]
              },
              partitions: [{
                treatment: 'off',
                size: 100
              }],
              label: 'in segment all'
            }]);
            _context4.next = 3;
            return evaluator((0, _parser2.default)('a key'), 31, 0, 31);

          case 3:
            evaluation = _context4.sent;
            assert.equal(evaluation.treatment, 'on', "evaluator should return treatment 'on' as whitelisting has more priority than traffic allocation");
            assert.equal(evaluation.label, 'whitelisted', "evaluator should return label 'whitelisted'");
            assert.end();

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
}());