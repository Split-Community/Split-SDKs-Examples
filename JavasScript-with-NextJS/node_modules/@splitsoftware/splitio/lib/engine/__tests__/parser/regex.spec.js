"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _tapeCatch = _interopRequireDefault(require("tape-catch"));

var _parser = _interopRequireDefault(require("../../parser"));

var _parser2 = _interopRequireDefault(require("../../../utils/key/parser"));

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
(0, _tapeCatch.default)('PARSER / if user.string is true then split 100%:on', /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(assert) {
    var evaluator, evaluation;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            evaluator = (0, _parser.default)([{
              matcherGroup: {
                combiner: 'AND',
                matchers: [{
                  keySelector: {
                    trafficType: 'user',
                    attribute: 'string'
                  },
                  matcherType: 'MATCHES_STRING',
                  negate: false,
                  stringMatcherData: '^hello'
                }]
              },
              partitions: [{
                treatment: 'on',
                size: 100
              }]
            }]);
            _context.next = 3;
            return evaluator((0, _parser2.default)('testing'), 31, 100, 31, {
              string: 'ehllo dude'
            });

          case 3:
            evaluation = _context.sent;
            assert.equal(evaluation, undefined);
            _context.next = 7;
            return evaluator((0, _parser2.default)('testing'), 31, 100, 31, {
              string: 'hello dude'
            });

          case 7:
            evaluation = _context.sent;
            assert.equal(evaluation.treatment, 'on');
            assert.end();

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());