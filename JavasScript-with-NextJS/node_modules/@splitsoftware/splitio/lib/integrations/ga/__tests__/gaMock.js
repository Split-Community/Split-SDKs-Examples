"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.modelMock = modelMock;
exports.gaMock = gaMock;
exports.gaRemove = gaRemove;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _sinon = _interopRequireDefault(require("sinon"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function modelMock(fieldsObject) {
  return {
    get: function get(fieldName) {
      return fieldsObject[fieldName];
    },
    set: function set(fieldNameOrObject, fieldValue) {
      if ((0, _typeof2.default)(fieldNameOrObject) === 'object') fieldsObject = _objectSpread(_objectSpread({}, fieldsObject), fieldNameOrObject);else fieldsObject[fieldNameOrObject] = fieldValue;
    }
  };
}

function gaMock() {
  var __originalSendHitTask = _sinon.default.spy();

  var __tasks = {
    sendHitTask: __originalSendHitTask
  };

  var ga = _sinon.default.stub().callsFake(function (command) {
    if (command === 'send') {
      var fieldsObject = arguments[1];

      __tasks.sendHitTask(modelMock(fieldsObject));
    }
  });

  var set = _sinon.default.fake(function (taskName, taskFunc) {
    __tasks[taskName] = taskFunc;
  });

  var get = _sinon.default.fake(function (taskName) {
    return __tasks[taskName];
  }); // Add ga to window object


  if (typeof window === 'undefined') {
    if (global) global.window = {};
  }

  window['GoogleAnalyticsObject'] = 'ga';
  window['ga'] = window['ga'] || ga;
  return {
    ga: ga,
    tracker: {
      get: get,
      set: set,
      __originalSendHitTask: __originalSendHitTask
    }
  };
}

function gaRemove() {
  if (typeof window !== 'undefined') window[window['GoogleAnalyticsObject'] || 'ga'] = undefined;
}