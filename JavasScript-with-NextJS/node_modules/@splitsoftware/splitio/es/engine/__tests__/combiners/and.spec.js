import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
import tape from 'tape-catch';
import andCombiner from '../../combiners/and';
tape('COMBINER AND / should always return true', /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(assert) {
    var AND;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            AND = andCombiner([function () {
              return true;
            }, function () {
              return true;
            }, function () {
              return true;
            }]);
            _context.t0 = assert;
            _context.next = 4;
            return AND('always true');

          case 4:
            _context.t1 = _context.sent;

            _context.t0.true.call(_context.t0, _context.t1, 'should always return true');

            assert.end();

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
tape('COMBINER AND / should always return false', /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(assert) {
    var AND;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            AND = andCombiner([function () {
              return true;
            }, function () {
              return true;
            }, function () {
              return false;
            }]);
            _context2.t0 = assert;
            _context2.next = 4;
            return AND('always false');

          case 4:
            _context2.t1 = _context2.sent;

            _context2.t0.false.call(_context2.t0, _context2.t1, 'should always return false');

            assert.end();

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());