import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
import tape from 'tape-catch';
import parser from '../../parser';
import keyParser from '../../../utils/key/parser';
tape('PARSER / if user.boolean is true then split 100%:on', /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(assert) {
    var evaluator, evaluation;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            evaluator = parser([{
              matcherGroup: {
                combiner: 'AND',
                matchers: [{
                  keySelector: {
                    trafficType: 'user',
                    attribute: 'bool'
                  },
                  matcherType: 'EQUAL_TO_BOOLEAN',
                  negate: false,
                  booleanMatcherData: true
                }]
              },
              partitions: [{
                treatment: 'on',
                size: 100
              }]
            }]);
            _context.next = 3;
            return evaluator(keyParser('testing'), 31, 100, 31, {
              bool: false
            });

          case 3:
            evaluation = _context.sent;
            assert.equal(evaluation, undefined);
            _context.next = 7;
            return evaluator(keyParser('testing'), 31, 100, 31, {
              bool: true
            });

          case 7:
            evaluation = _context.sent;
            assert.equal(evaluation.treatment, 'on');
            _context.next = 11;
            return evaluator(keyParser('testing'), 31, 100, 31, {
              bool: 'invalid'
            });

          case 11:
            evaluation = _context.sent;
            assert.equal(evaluation, undefined);
            _context.next = 15;
            return evaluator(keyParser('testing'), 31, 100, 31, {
              bool: 'True'
            });

          case 15:
            evaluation = _context.sent;
            assert.equal(evaluation.treatment, 'on');
            assert.end();

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());