import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import tape from 'tape-catch';
import fetchMock from '../testUtils/fetchMock';
import { testAuthWithPushDisabled, testAuthWith401, testAuthWith400, testNoEventSource } from '../nodeSuites/push-initialization-nopush.spec';
import { testAuthRetries, testSSERetries, testSdkDestroyWhileAuthRetries, testSdkDestroyWhileAuthSuccess } from '../nodeSuites/push-initialization-retries.spec';
import { testSynchronization } from '../nodeSuites/push-synchronization.spec';
import { testSynchronizationRetries } from '../nodeSuites/push-synchronization-retries.spec';
import { testFallbacking } from '../nodeSuites/push-fallbacking.spec';
import { testRefreshToken } from '../nodeSuites/push-refresh-token.spec';
fetchMock.config.overwriteRoutes = false;
tape('## Node JS - E2E CI Tests for PUSH ##', /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(assert) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            assert.test('E2E / PUSH initialization: auth with push disabled', testAuthWithPushDisabled.bind(null, fetchMock));
            assert.test('E2E / PUSH initialization: auth with 401', testAuthWith401.bind(null, fetchMock));
            assert.test('E2E / PUSH initialization: auth with 400', testAuthWith400.bind(null, fetchMock));
            assert.test('E2E / PUSH initialization: fallback to polling if EventSource is not available', testNoEventSource.bind(null, fetchMock));
            assert.test('E2E / PUSH initialization: auth failures and then success', testAuthRetries.bind(null, fetchMock));
            assert.test('E2E / PUSH initialization: SSE connection failures and then success', testSSERetries.bind(null, fetchMock));
            assert.test('E2E / PUSH disconnection: SDK destroyed while authenticating', testSdkDestroyWhileAuthSuccess.bind(null, fetchMock));
            assert.test('E2E / PUSH disconnection: SDK destroyed while auth was retrying', testSdkDestroyWhileAuthRetries.bind(null, fetchMock));
            assert.test('E2E / PUSH synchronization: happy paths', testSynchronization.bind(null, fetchMock));
            assert.test('E2E / PUSH synchronization: retries', testSynchronizationRetries.bind(null, fetchMock));
            assert.test('E2E / PUSH fallbacking', testFallbacking.bind(null, fetchMock));
            assert.test('E2E / PUSH refresh token', testRefreshToken.bind(null, fetchMock));
            assert.end();

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());