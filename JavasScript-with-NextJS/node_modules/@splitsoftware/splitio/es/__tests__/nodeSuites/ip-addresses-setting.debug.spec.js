import _regeneratorRuntime from "@babel/runtime/regenerator";
import osFunction from 'os';
import ipFunction from 'ip';
import { SplitFactory } from '../..';
import SettingsFactory from '../../utils/settings';
import splitChangesMock1 from '../mocks/splitchanges.since.-1.json';
import { DEBUG, STANDALONE_MODE } from '../../utils/constants'; // Header keys and expected values. Expected values are obtained with the runtime function evaluated with IPAddressesEnabled in true.

var HEADER_SPLITSDKMACHINEIP = 'SplitSDKMachineIP';
var HEADER_SPLITSDKMACHINENAME = 'SplitSDKMachineName';
var IP_VALUE = ipFunction.address();
var HOSTNAME_VALUE = osFunction.hostname(); // Refresh rates are set to 1 second to finish the test quickly. Otherwise, it would finish in 1 minute (60 seconds is the default value)

var baseConfig = {
  mode: STANDALONE_MODE,
  scheduler: {
    metricsRefreshRate: 1,
    impressionsRefreshRate: 1,
    eventsPushRate: 1
  },
  streamingEnabled: false,
  sync: {
    impressionsMode: DEBUG
  },
  core: {
    authorizationKey: '<fake-token>',
    IPAddressesEnabled: true
  },
  urls: {
    sdk: 'https://sdk.split-debug.io/api',
    events: 'https://events.split-debug.io/api'
  }
};
var postEndpoints = ['/events/bulk', '/testImpressions/bulk', '/metrics/times', '/metrics/counters'];
export default function ipAddressesSettingAssertions(fetchMock, assert) {
  // Assert properties in impressions
  function assertImpression(impression) {
    assert.equal(impression.ip, IP_VALUE, 'Ip did not match');
    assert.equal(impression.hostname, HOSTNAME_VALUE, 'Hostname did not match');
  } // Assert request headers


  function assertHeaders(req) {
    assert.equal(req.headers[HEADER_SPLITSDKMACHINEIP], IP_VALUE, "".concat(HEADER_SPLITSDKMACHINEIP, " header must be equal to the machine ip."));
    assert.equal(req.headers[HEADER_SPLITSDKMACHINENAME], HOSTNAME_VALUE, "".concat(HEADER_SPLITSDKMACHINENAME, " header must be equal to the machine name."));
  }

  function mockAndAssertIPAddressesEnabled(config) {
    config.impressionListener = {
      logImpression: function logImpression(impression) {
        assertImpression(impression);
      }
    };
    var splitio = SplitFactory(config);
    var client = splitio.client();
    var settings = SettingsFactory(config); // Generator to synchronize the destruction of the client when all the post endpoints where called once.

    var finishConfig = /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var POST_ENDPOINTS_TO_TEST, i;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              POST_ENDPOINTS_TO_TEST = postEndpoints.length;
              i = 0;

            case 2:
              if (!(i < POST_ENDPOINTS_TO_TEST - 1)) {
                _context.next = 8;
                break;
              }

              _context.next = 5;
              return;

            case 5:
              i++;
              _context.next = 2;
              break;

            case 8:
              client.destroy();
              assert.end();

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })(); // Mock GET endpoints to run client normally


    fetchMock.getOnce(settings.url('/splitChanges?since=-1'), {
      status: 200,
      body: splitChangesMock1
    });
    fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), {
      status: 200,
      body: {
        splits: [],
        since: 1457552620999,
        till: 1457552620999
      }
    });
    fetchMock.get(new RegExp("".concat(settings.url('/segmentChanges/'), ".*")), {
      status: 200,
      body: {
        since: 10,
        till: 10,
        name: 'segmentName',
        added: [],
        removed: []
      }
    }); // Mock and assert POST endpoints

    postEndpoints.forEach(function (postEndpoint) {
      fetchMock.postOnce(settings.url(postEndpoint), function (url, opts) {
        assertHeaders(opts);
        finishConfig.next();
        return 200;
      });
      fetchMock.post(settings.url(postEndpoint), 200);
    }); // Run normal client flow

    client.on(client.Event.SDK_READY, function () {
      client.getTreatment('nicolas@split.io', 'hierarchical_splits_test');
      client.track('nicolas@split.io', 'sometraffictype', 'someEvent', 10);
    });
  }

  return mockAndAssertIPAddressesEnabled(baseConfig);
}