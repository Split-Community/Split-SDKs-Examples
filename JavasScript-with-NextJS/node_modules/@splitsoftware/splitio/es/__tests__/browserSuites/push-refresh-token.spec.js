import splitChangesMock1 from '../mocks/splitchanges.since.-1.json';
import splitChangesMock2 from '../mocks/splitchanges.since.1457552620999.json';
import mySegmentsNicolasMock1 from '../mocks/mysegments.nicolas@split.io.json';
import authPushEnabledNicolas from '../mocks/auth.pushEnabled.nicolas@split.io.601secs.json';
import { nearlyEqual } from '../testUtils'; // Replace original EventSource with mock

import EventSourceMock, { setMockListener } from '../../sync/__tests__/mocks/eventSourceMock';
window.EventSource = EventSourceMock;
import { SplitFactory } from '../../index';
import SettingsFactory from '../../utils/settings';
var userKey = 'nicolas@split.io';
var baseUrls = {
  sdk: 'https://sdk.push-synchronization/api',
  events: 'https://events.push-synchronization/api',
  auth: 'https://auth.push-synchronization/api'
};
var config = {
  core: {
    authorizationKey: '<fake-token-push-1>',
    key: userKey
  },
  urls: baseUrls,
  streamingEnabled: true // debug: true,

};
var settings = SettingsFactory(config);
var MILLIS_SSE_OPEN = 100;
var MILLIS_REFRESH_TOKEN = 1000;
/**
 * Sequence of calls:
 *  0.0 secs: initial SyncAll (/splitChanges, /segmentChanges/*), auth, SSE connection -> refresh token scheduled in 1 second.
 *  0.1 secs: SSE connection opened -> syncAll (/splitChanges, /segmentChanges/*)
 *  1.0 secs: refresh-token: reauth, SSE connection
 *  1.2 secs: SSE connection reopened -> syncAll (/splitChanges, /segmentChanges/*)
 */

export function testRefreshToken(fetchMock, assert) {
  fetchMock.reset();
  var start, splitio, client; // mock SSE open and message events

  setMockListener(function (eventSourceInstance) {
    var expectedSSEurl = "".concat(settings.url('/sse'), "?channels=NzM2MDI5Mzc0_NDEzMjQ1MzA0Nw%3D%3D_NTcwOTc3MDQx_mySegments,NzM2MDI5Mzc0_NDEzMjQ1MzA0Nw%3D%3D_splits,%5B%3Foccupancy%3Dmetrics.publishers%5Dcontrol_pri,%5B%3Foccupancy%3Dmetrics.publishers%5Dcontrol_sec&accessToken=").concat(authPushEnabledNicolas.token, "&v=1.1&heartbeats=true");
    assert.equals(eventSourceInstance.url, expectedSSEurl, 'EventSource URL is the expected');
    setTimeout(function () {
      eventSourceInstance.emitOpen();
    }, MILLIS_SSE_OPEN); // open SSE connection after 0.1 seconds
  }); // initial sync

  fetchMock.getOnce(settings.url('/splitChanges?since=-1'), {
    status: 200,
    body: splitChangesMock1
  });
  fetchMock.getOnce(settings.url('/mySegments/nicolas%40split.io'), {
    status: 200,
    body: mySegmentsNicolasMock1
  }); // first auth

  fetchMock.getOnce(settings.url("/auth?users=".concat(encodeURIComponent(userKey))), function (url, opts) {
    if (!opts.headers['Authorization']) assert.fail('`/auth` request must include `Authorization` header');
    assert.pass('auth success');
    return {
      status: 200,
      body: authPushEnabledNicolas
    };
  }); // sync after SSE opened

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), {
    status: 200,
    body: splitChangesMock2
  });
  fetchMock.getOnce(settings.url('/mySegments/nicolas%40split.io'), {
    status: 200,
    body: mySegmentsNicolasMock1
  }); // re-auth due to refresh token

  fetchMock.getOnce(settings.url("/auth?users=".concat(encodeURIComponent(userKey))), function (url, opts) {
    var lapse = Date.now() - start;
    assert.true(nearlyEqual(lapse, MILLIS_REFRESH_TOKEN), 'reauthentication for token refresh');
    if (!opts.headers['Authorization']) assert.fail('`/auth` request must include `Authorization` header');
    return {
      status: 200,
      body: authPushEnabledNicolas
    };
  }); // sync after SSE reopened

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), function () {
    var lapse = Date.now() - start;
    assert.true(nearlyEqual(lapse, MILLIS_REFRESH_TOKEN + MILLIS_SSE_OPEN), 'sync after SSE connection is reopened');
    return {
      status: 200,
      body: {
        splits: [],
        since: 1457552620999,
        till: 1457552620999
      }
    };
  });
  fetchMock.getOnce(settings.url('/mySegments/nicolas%40split.io'), {
    status: 200,
    body: mySegmentsNicolasMock1
  }); // second re-auth due to refresh token

  fetchMock.getOnce(settings.url("/auth?users=".concat(encodeURIComponent(userKey))), function (url, opts) {
    var lapse = Date.now() - start;
    assert.true(nearlyEqual(lapse, MILLIS_REFRESH_TOKEN * 2), 'second reauthentication for token refresh');
    if (!opts.headers['Authorization']) assert.fail('`/auth` request must include `Authorization` header');
    return {
      status: 200,
      body: authPushEnabledNicolas
    };
  }); // split sync after SSE reopened

  fetchMock.getOnce(settings.url('/splitChanges?since=1457552620999'), function () {
    var lapse = Date.now() - start;
    assert.true(nearlyEqual(lapse, MILLIS_REFRESH_TOKEN * 2 + MILLIS_SSE_OPEN), 'sync after SSE connection is reopened a second time');
    client.destroy().then(function () {
      assert.end();
    });
    return {
      status: 500,
      body: 'server error'
    };
  });
  fetchMock.getOnce(settings.url('/mySegments/nicolas%40split.io'), {
    status: 200,
    body: mySegmentsNicolasMock1
  });
  fetchMock.get(new RegExp('.*'), function (url) {
    assert.fail('unexpected GET request with url: ' + url);
  });
  start = Date.now();
  splitio = SplitFactory(config);
  client = splitio.client();
}