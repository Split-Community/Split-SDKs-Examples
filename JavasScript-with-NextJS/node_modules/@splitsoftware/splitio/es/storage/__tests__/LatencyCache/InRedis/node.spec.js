import _regeneratorRuntime from "@babel/runtime/regenerator";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
import Redis from 'ioredis';
import tape from 'tape-catch';
import KeyBuilder from '../../../Keys';
import LatencyCacheInRedis from '../../../LatencyCache/InRedis';
import SettingsFactory from '../../../../utils/settings';
var settings = SettingsFactory({
  storage: {
    type: 'REDIS',
    prefix: 'latency_cache_UT'
  }
});
tape('METRICS CACHE IN REDIS / should count based on ranges', /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(assert) {
    var connection, keys, cache, metricName, keysToClean;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            connection = new Redis(settings.storage.options);
            keys = new KeyBuilder(settings);
            cache = new LatencyCacheInRedis(keys, connection);
            metricName = 'testing';
            assert.true(cache.isEmpty(), 'Is empty always returns true, just there to respect the interface.');
            assert.notEqual(_typeof(cache.clear), 'undefined', 'Clear method should be there to respect interface.');
            _context.next = 8;
            return cache.track(metricName, 1);

          case 8:
            _context.next = 10;
            return cache.track(metricName, 1.2);

          case 10:
            _context.next = 12;
            return cache.track(metricName, 1.4);

          case 12:
            _context.t0 = assert;
            _context.next = 15;
            return connection.get(keys.buildLatencyKey(metricName, 0));

          case 15:
            _context.t1 = _context.sent;

            _context.t0.equal.call(_context.t0, _context.t1, '3', 'the bucket #0 should have 3');

            _context.next = 19;
            return cache.track(metricName, 1.5);

          case 19:
            _context.t2 = assert;
            _context.next = 22;
            return connection.get(keys.buildLatencyKey(metricName, 1));

          case 22:
            _context.t3 = _context.sent;

            _context.t2.equal.call(_context.t2, _context.t3, '1', 'the bucket #1 should have 1');

            _context.next = 26;
            return cache.track(metricName, 2.25);

          case 26:
            _context.next = 28;
            return cache.track(metricName, 2.26);

          case 28:
            _context.next = 30;
            return cache.track(metricName, 2.265);

          case 30:
            _context.t4 = assert;
            _context.next = 33;
            return connection.get(keys.buildLatencyKey(metricName, 2));

          case 33:
            _context.t5 = _context.sent;

            _context.t4.equal.call(_context.t4, _context.t5, '3', 'the bucket #2 should have 3');

            _context.next = 37;
            return cache.track(metricName, 985251);

          case 37:
            assert.true(cache.isEmpty(), 'Is empty always returns true, just there to respect the interface.');
            _context.t6 = assert;
            _context.next = 41;
            return connection.get(keys.buildLatencyKey(metricName, 22));

          case 41:
            _context.t7 = _context.sent;

            _context.t6.equal.call(_context.t6, _context.t7, '1', 'the bucket #22 should have 1');

            _context.next = 45;
            return connection.keys('latency_cache_UT.*');

          case 45:
            keysToClean = _context.sent;
            _context.next = 48;
            return connection.del(keysToClean);

          case 48:
            connection.quit();
            assert.end();

          case 50:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());