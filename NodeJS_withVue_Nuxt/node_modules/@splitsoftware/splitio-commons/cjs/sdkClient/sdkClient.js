"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sdkClientFactory = void 0;
var objectAssign_1 = require("../utils/lang/objectAssign");
var apiKey_1 = require("../utils/inputValidation/apiKey");
var client_1 = require("./client");
var clientInputValidation_1 = require("./clientInputValidation");
/**
 * Creates an Sdk client, i.e., a base client with status and destroy interface
 */
function sdkClientFactory(params, isSharedClient) {
    var sdkReadinessManager = params.sdkReadinessManager, syncManager = params.syncManager, storage = params.storage, signalListener = params.signalListener, settings = params.settings, telemetryTracker = params.telemetryTracker;
    return (0, objectAssign_1.objectAssign)(
    // Proto-linkage of the readiness Event Emitter
    Object.create(sdkReadinessManager.sdkStatus), 
    // Client API (getTreatment* & track methods)
    (0, clientInputValidation_1.clientInputValidationDecorator)(settings, (0, client_1.clientFactory)(params), sdkReadinessManager.readinessManager), 
    // Sdk destroy
    {
        destroy: function () {
            // record stat before flushing data
            if (!isSharedClient)
                telemetryTracker.sessionLength();
            // Stop background jobs
            syncManager && syncManager.stop();
            var flush = syncManager ? syncManager.flush() : Promise.resolve();
            return flush.then(function () {
                // Cleanup event listeners
                sdkReadinessManager.readinessManager.destroy();
                signalListener && signalListener.stop();
                // Release the API Key if it is the main client
                if (!isSharedClient)
                    (0, apiKey_1.releaseApiKey)(settings.core.authorizationKey);
                // Cleanup storage
                return storage.destroy();
            });
        }
    });
}
exports.sdkClientFactory = sdkClientFactory;
