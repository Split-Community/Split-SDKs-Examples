"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUserConsentAPI = void 0;
var constants_1 = require("../logger/constants");
var index_1 = require("./index");
var constants_2 = require("../utils/constants");
var lang_1 = require("../utils/lang");
// User consent enum
var ConsentStatus = {
    GRANTED: constants_2.CONSENT_GRANTED,
    DECLINED: constants_2.CONSENT_DECLINED,
    UNKNOWN: constants_2.CONSENT_UNKNOWN,
};
/**
 * The public user consent API exposed via SplitFactory, used to control if the SDK tracks and sends impressions and events or not.
 */
function createUserConsentAPI(params) {
    var settings = params.settings, log = params.settings.log, syncManager = params.syncManager, _a = params.storage, events = _a.events, impressions = _a.impressions, impressionCounts = _a.impressionCounts;
    if (!(0, index_1.isConsentGranted)(settings))
        log.info(constants_1.USER_CONSENT_INITIAL, [settings.userConsent]);
    return {
        setStatus: function (consent) {
            var _a, _b;
            // validate input param
            if (!(0, lang_1.isBoolean)(consent)) {
                log.warn(constants_1.ERROR_NOT_BOOLEAN, ['UserConsent.setStatus']);
                return false;
            }
            var newConsentStatus = consent ? constants_2.CONSENT_GRANTED : constants_2.CONSENT_DECLINED;
            if (settings.userConsent !== newConsentStatus) {
                log.info(constants_1.USER_CONSENT_UPDATED, [settings.userConsent, newConsentStatus]); // @ts-ignore, modify readonly prop
                settings.userConsent = newConsentStatus;
                if (consent) { // resumes submitters if transitioning to GRANTED
                    (_a = syncManager === null || syncManager === void 0 ? void 0 : syncManager.submitter) === null || _a === void 0 ? void 0 : _a.start();
                }
                else { // pauses submitters and drops tracked data if transitioning to DECLINED
                    (_b = syncManager === null || syncManager === void 0 ? void 0 : syncManager.submitter) === null || _b === void 0 ? void 0 : _b.stop();
                    // @ts-ignore, clear method is present in storage for standalone and partial consumer mode
                    if (events.clear)
                        events.clear(); // @ts-ignore
                    if (impressions.clear)
                        impressions.clear();
                    if (impressionCounts)
                        impressionCounts.clear();
                }
            }
            else {
                log.info(constants_1.USER_CONSENT_NOT_UPDATED, [newConsentStatus]);
            }
            return true;
        },
        getStatus: function () {
            return settings.userConsent;
        },
        Status: ConsentStatus
    };
}
exports.createUserConsentAPI = createUserConsentAPI;
