"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SegmentsCachePluggable = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable no-unused-vars */
var lang_1 = require("../../utils/lang");
var constants_1 = require("./constants");
/**
 * ISegmentsCacheAsync implementation for pluggable storages.
 */
var SegmentsCachePluggable = /** @class */ (function () {
    function SegmentsCachePluggable(log, keys, wrapper) {
        this.log = log;
        this.keys = keys;
        this.wrapper = wrapper;
    }
    /**
     * Add a list of `segmentKeys` to the given segment `name`.
     * The returned promise is resolved when the operation success
     * or rejected if wrapper operation fails.
     */
    SegmentsCachePluggable.prototype.addToSegment = function (name, segmentKeys) {
        var segmentKey = this.keys.buildSegmentNameKey(name);
        if (segmentKeys.length) {
            return this.wrapper.addItems(segmentKey, segmentKeys);
        }
        else {
            return Promise.resolve();
        }
    };
    /**
     * Remove a list of `segmentKeys` from the given segment `name`.
     * The returned promise is resolved when the operation success
     * or rejected if wrapper operation fails.
     */
    SegmentsCachePluggable.prototype.removeFromSegment = function (name, segmentKeys) {
        var segmentKey = this.keys.buildSegmentNameKey(name);
        if (segmentKeys.length) {
            return this.wrapper.removeItems(segmentKey, segmentKeys);
        }
        else {
            return Promise.resolve();
        }
    };
    /**
     * Returns a promise that resolves with a boolean value indicating if `key` is part of `name` segment.
     * Promise can be rejected if wrapper operation fails.
     */
    SegmentsCachePluggable.prototype.isInSegment = function (name, key) {
        return this.wrapper.itemContains(this.keys.buildSegmentNameKey(name), key);
    };
    /**
     * Set till number for the given segment `name`.
     * The returned promise is resolved when the operation success,
     * or rejected if it fails (e.g., wrapper operation fails).
     */
    SegmentsCachePluggable.prototype.setChangeNumber = function (name, changeNumber) {
        return this.wrapper.set(this.keys.buildSegmentTillKey(name), changeNumber + '');
    };
    /**
     * Get till number or -1 if it's not defined.
     * The returned promise is resolved with the changeNumber or -1 if it doesn't exist or a wrapper operation fails.
     * The promise will never be rejected.
     */
    SegmentsCachePluggable.prototype.getChangeNumber = function (name) {
        var _this = this;
        return this.wrapper.get(this.keys.buildSegmentTillKey(name)).then(function (value) {
            var i = parseInt(value, 10);
            return (0, lang_1.isNaNNumber)(i) ? -1 : i;
        }).catch(function (e) {
            _this.log.error(constants_1.LOG_PREFIX + 'Could not retrieve changeNumber from segments storage. Error: ' + e);
            return -1;
        });
    };
    /**
     * Add the given segment names to the set of registered segments.
     * The returned promise is resolved when the operation success,
     * or rejected if it fails (e.g., wrapper operation fails).
     */
    SegmentsCachePluggable.prototype.registerSegments = function (segments) {
        if (segments.length) {
            return this.wrapper.addItems(this.keys.buildRegisteredSegmentsKey(), segments);
        }
        else {
            return Promise.resolve();
        }
    };
    /**
     * Returns a promise that resolves with the set of registered segments in a list,
     * or rejected if it fails (e.g., wrapper operation fails).
     */
    SegmentsCachePluggable.prototype.getRegisteredSegments = function () {
        return this.wrapper.getItems(this.keys.buildRegisteredSegmentsKey());
    };
    /** @TODO implement if required by DataLoader or Producer mode  */
    SegmentsCachePluggable.prototype.clear = function () {
        return Promise.resolve(true);
    };
    return SegmentsCachePluggable;
}());
exports.SegmentsCachePluggable = SegmentsCachePluggable;
