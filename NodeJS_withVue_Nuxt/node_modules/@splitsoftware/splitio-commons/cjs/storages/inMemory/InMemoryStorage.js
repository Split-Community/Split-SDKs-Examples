"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemoryStorageFactory = void 0;
var SplitsCacheInMemory_1 = require("./SplitsCacheInMemory");
var SegmentsCacheInMemory_1 = require("./SegmentsCacheInMemory");
var ImpressionsCacheInMemory_1 = require("./ImpressionsCacheInMemory");
var EventsCacheInMemory_1 = require("./EventsCacheInMemory");
var ImpressionCountsCacheInMemory_1 = require("./ImpressionCountsCacheInMemory");
var constants_1 = require("../../utils/constants");
var TelemetryCacheInMemory_1 = require("./TelemetryCacheInMemory");
/**
 * InMemory storage factory for standalone server-side SplitFactory
 *
 * @param params parameters required by EventsCacheSync
 */
function InMemoryStorageFactory(params) {
    return {
        splits: new SplitsCacheInMemory_1.SplitsCacheInMemory(),
        segments: new SegmentsCacheInMemory_1.SegmentsCacheInMemory(),
        impressions: new ImpressionsCacheInMemory_1.ImpressionsCacheInMemory(params.impressionsQueueSize),
        impressionCounts: params.optimize ? new ImpressionCountsCacheInMemory_1.ImpressionCountsCacheInMemory() : undefined,
        events: new EventsCacheInMemory_1.EventsCacheInMemory(params.eventsQueueSize),
        telemetry: params.mode !== constants_1.LOCALHOST_MODE ? new TelemetryCacheInMemory_1.TelemetryCacheInMemory() : undefined,
        // When using MEMORY we should clean all the caches to leave them empty
        destroy: function () {
            this.splits.clear();
            this.segments.clear();
            this.impressions.clear();
            this.impressionCounts && this.impressionCounts.clear();
            this.events.clear();
        }
    };
}
exports.InMemoryStorageFactory = InMemoryStorageFactory;
InMemoryStorageFactory.type = constants_1.STORAGE_MEMORY;
