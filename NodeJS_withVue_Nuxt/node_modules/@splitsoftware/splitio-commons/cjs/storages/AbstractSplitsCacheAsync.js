"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractSplitsCacheAsync = void 0;
/**
 * This class provides a skeletal implementation of the ISplitsCacheAsync interface
 * to minimize the effort required to implement this interface.
 */
var AbstractSplitsCacheAsync = /** @class */ (function () {
    function AbstractSplitsCacheAsync() {
    }
    // @TODO revisit segment-related methods ('usesSegments', 'getRegisteredSegments', 'registerSegments')
    // noop, just keeping the interface. This is used by standalone client-side API only, and so only implemented by InMemory and InLocalStorage.
    AbstractSplitsCacheAsync.prototype.usesSegments = function () {
        return Promise.resolve(true);
    };
    /**
     * Check if the splits information is already stored in cache.
     * Noop, just keeping the interface. This is used by client-side implementations only.
     */
    AbstractSplitsCacheAsync.prototype.checkCache = function () {
        return Promise.resolve(false);
    };
    /**
     * Kill `name` split and set `defaultTreatment` and `changeNumber`.
     * Used for SPLIT_KILL push notifications.
     *
     * @param {string} name
     * @param {string} defaultTreatment
     * @param {number} changeNumber
     * @returns {Promise} a promise that is resolved once the split kill operation is performed. The fulfillment value is a boolean: `true` if the kill success updating the split or `false` if no split is updated,
     * for instance, if the `changeNumber` is old, or if the split is not found (e.g., `/splitchanges` hasn't been fetched yet), or if the storage fails to apply the update.
     * The promise will never be rejected.
     */
    AbstractSplitsCacheAsync.prototype.killLocally = function (name, defaultTreatment, changeNumber) {
        var _this = this;
        return this.getSplit(name).then(function (split) {
            if (split) {
                var parsedSplit = JSON.parse(split);
                if (!parsedSplit.changeNumber || parsedSplit.changeNumber < changeNumber) {
                    parsedSplit.killed = true;
                    parsedSplit.defaultTreatment = defaultTreatment;
                    parsedSplit.changeNumber = changeNumber;
                    var newSplit = JSON.stringify(parsedSplit);
                    return _this.addSplit(name, newSplit);
                }
            }
            return false;
        }).catch(function () { return false; });
    };
    return AbstractSplitsCacheAsync;
}());
exports.AbstractSplitsCacheAsync = AbstractSplitsCacheAsync;
