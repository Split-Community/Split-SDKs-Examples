"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InRedisStorage = void 0;
var RedisAdapter_1 = require("./RedisAdapter");
var KeyBuilder_1 = require("../KeyBuilder");
var KeyBuilderSS_1 = require("../KeyBuilderSS");
var SplitsCacheInRedis_1 = require("./SplitsCacheInRedis");
var SegmentsCacheInRedis_1 = require("./SegmentsCacheInRedis");
var ImpressionsCacheInRedis_1 = require("./ImpressionsCacheInRedis");
var EventsCacheInRedis_1 = require("./EventsCacheInRedis");
var constants_1 = require("../../utils/constants");
var TelemetryCacheInRedis_1 = require("./TelemetryCacheInRedis");
/**
 * InRedis storage factory for consumer server-side SplitFactory, that uses `Ioredis` Redis client for Node.
 * @see {@link https://www.npmjs.com/package/ioredis}
 */
function InRedisStorage(options) {
    if (options === void 0) { options = {}; }
    var prefix = (0, KeyBuilder_1.validatePrefix)(options.prefix);
    function InRedisStorageFactory(_a) {
        var log = _a.log, metadata = _a.metadata, onReadyCb = _a.onReadyCb;
        var keys = new KeyBuilderSS_1.KeyBuilderSS(prefix, metadata);
        var redisClient = new RedisAdapter_1.RedisAdapter(log, options.options || {});
        var telemetry = new TelemetryCacheInRedis_1.TelemetryCacheInRedis(log, keys, redisClient);
        // subscription to Redis connect event in order to emit SDK_READY event on consumer mode
        redisClient.on('connect', function () {
            onReadyCb();
            // Synchronize config
            telemetry.recordConfig();
        });
        return {
            splits: new SplitsCacheInRedis_1.SplitsCacheInRedis(log, keys, redisClient),
            segments: new SegmentsCacheInRedis_1.SegmentsCacheInRedis(log, keys, redisClient),
            impressions: new ImpressionsCacheInRedis_1.ImpressionsCacheInRedis(log, keys.buildImpressionsKey(), redisClient, metadata),
            events: new EventsCacheInRedis_1.EventsCacheInRedis(log, keys.buildEventsKey(), redisClient, metadata),
            telemetry: telemetry,
            // When using REDIS we should:
            // 1- Disconnect from the storage
            destroy: function () {
                redisClient.disconnect();
                // @TODO check that caches works as expected when redisClient is disconnected
            }
        };
    }
    InRedisStorageFactory.type = constants_1.STORAGE_REDIS;
    return InRedisStorageFactory;
}
exports.InRedisStorage = InRedisStorage;
