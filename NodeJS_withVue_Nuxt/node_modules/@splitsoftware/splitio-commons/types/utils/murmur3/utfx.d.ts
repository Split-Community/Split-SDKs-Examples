export interface utfx {
    encodeUTF16toUTF8(src: () => number | null, dst: (...args: number[]) => string | undefined): void;
}
/**
 * Converts and encodes UTF16 characters to UTF8 bytes.
 * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`
 *  if there are no more characters left.
 * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.
 * @expose
 */
export declare function encodeUTF16toUTF8(src: () => number | null, dst: (...args: number[]) => string | undefined): void;
/**
 * Creates a source function for a string.
 * @param {string} s String to read from
 * @returns {!function():number|null} Source function returning the next char code respectively `null` if there are
 *  no more characters left.
 * @throws {TypeError} If the argument is invalid
 * @expose
 */
export declare function stringSource(s: string): () => number | null;
/**
 * Creates a destination function for a string.
 * @returns {function(number=):undefined|string} Destination function successively called with the next char code.
 *  Returns the final string when called without arguments.
 * @expose
 */
export declare function stringDestination(): (...args: number[]) => string | undefined;
