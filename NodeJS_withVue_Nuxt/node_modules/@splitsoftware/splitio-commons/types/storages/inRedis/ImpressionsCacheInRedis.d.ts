import { IImpressionsCacheAsync } from '../types';
import { IMetadata } from '../../dtos/types';
import { ImpressionDTO } from '../../types';
import { Redis } from 'ioredis';
import { StoredImpressionWithMetadata } from '../../sync/submitters/types';
import { ILogger } from '../../logger/types';
export declare class ImpressionsCacheInRedis implements IImpressionsCacheAsync {
    private readonly log;
    private readonly key;
    private readonly redis;
    private readonly metadata;
    constructor(log: ILogger, key: string, redis: Redis, metadata: IMetadata);
    track(impressions: ImpressionDTO[]): Promise<void>;
    private _toJSON;
    count(): Promise<number>;
    drop(count?: number): Promise<any>;
    popNWithMetadata(count: number): Promise<StoredImpressionWithMetadata[]>;
}
