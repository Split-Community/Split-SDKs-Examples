import { IPluggableStorageWrapper, IImpressionsCacheAsync } from '../types';
import { IMetadata } from '../../dtos/types';
import { ImpressionDTO } from '../../types';
import { ILogger } from '../../logger/types';
import { StoredImpressionWithMetadata } from '../../sync/submitters/types';
export declare class ImpressionsCachePluggable implements IImpressionsCacheAsync {
    private readonly log;
    private readonly key;
    private readonly wrapper;
    private readonly metadata;
    constructor(log: ILogger, key: string, wrapper: IPluggableStorageWrapper, metadata: IMetadata);
    /**
     * Push given impressions to the storage.
     * @param impressions  List of impresions to push.
     * @returns  A promise that is resolved if the push operation succeeded
     * or rejected if the wrapper operation fails.
     */
    track(impressions: ImpressionDTO[]): Promise<void>;
    private _toJSON;
    /**
     * Returns a promise that resolves with the count of stored impressions, or 0 if there was some error.
     * The promise will never be rejected.
     */
    count(): Promise<number>;
    /**
     * Removes the given number of impressions from the store. If a number is not provided, it deletes all items.
     * The returned promise rejects if the wrapper operation fails.
     */
    drop(count?: number): Promise<void>;
    /**
     * Pop the given number of impressions from the store.
     * The returned promise rejects if the wrapper operation fails.
     */
    popNWithMetadata(count: number): Promise<StoredImpressionWithMetadata[]>;
}
