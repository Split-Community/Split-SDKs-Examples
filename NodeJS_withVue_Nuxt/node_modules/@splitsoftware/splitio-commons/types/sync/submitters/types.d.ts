import { IMetadata } from '../../dtos/types';
import { SplitIO } from '../../types';
export declare type ImpressionsPayload = {
    /** Split name */
    f: string;
    /** Key Impressions */
    i: {
        /** Key */
        k: string;
        /** Treatment */
        t: string;
        /** Timestamp */
        m: number;
        /** ChangeNumber */
        c: number;
        /** Rule label */
        r?: string;
        /** Bucketing Key */
        b?: string;
        /** Previous time */
        pt?: number;
    }[];
}[];
export declare type ImpressionCountsPayload = {
    pf: {
        /** Split name */
        f: string;
        /** Time Frame */
        m: number;
        /** Count */
        rc: number;
    }[];
};
export declare type StoredImpressionWithMetadata = {
    /** Metadata */
    m: IMetadata;
    /** Stored impression */
    i: {
        /** keyName */
        k: string;
        /** bucketingKey */
        b?: string;
        /** Split name */
        f: string;
        /** treatment */
        t: string;
        /** label */
        r: string;
        /** changeNumber */
        c: number;
        /** time */
        m: number;
    };
};
export declare type StoredEventWithMetadata = {
    /** Metadata */
    m: IMetadata;
    /** Stored event */
    e: SplitIO.EventData;
};
/**
 * Telemetry usage stats
 */
export declare type QUEUED = 0;
export declare type DROPPED = 1;
export declare type DEDUPED = 2;
export declare type ImpressionDataType = QUEUED | DROPPED | DEDUPED;
export declare type EventDataType = QUEUED | DROPPED;
export declare type SPLITS = 'sp';
export declare type IMPRESSIONS = 'im';
export declare type IMPRESSIONS_COUNT = 'ic';
export declare type EVENTS = 'ev';
export declare type TELEMETRY = 'te';
export declare type TOKEN = 'to';
export declare type SEGMENT = 'se';
export declare type MY_SEGMENT = 'ms';
export declare type OperationType = SPLITS | IMPRESSIONS | IMPRESSIONS_COUNT | EVENTS | TELEMETRY | TOKEN | SEGMENT | MY_SEGMENT;
export declare type LastSync = Record<OperationType, number | undefined>;
export declare type HttpErrors = Record<OperationType, {
    [statusCode: string]: number;
}>;
export declare type HttpLatencies = Record<OperationType, Array<number>>;
export declare type TREATMENT = 't';
export declare type TREATMENTS = 'ts';
export declare type TREATMENT_WITH_CONFIG = 'tc';
export declare type TREATMENTS_WITH_CONFIG = 'tcs';
export declare type TRACK = 'tr';
export declare type Method = TREATMENT | TREATMENTS | TREATMENT_WITH_CONFIG | TREATMENTS_WITH_CONFIG | TRACK;
export declare type MethodLatencies = Record<Method, Array<number>>;
export declare type MethodExceptions = Record<Method, number>;
export declare type CONNECTION_ESTABLISHED = 0;
export declare type OCCUPANCY_PRI = 10;
export declare type OCCUPANCY_SEC = 20;
export declare type STREAMING_STATUS = 30;
export declare type SSE_CONNECTION_ERROR = 40;
export declare type TOKEN_REFRESH = 50;
export declare type ABLY_ERROR = 60;
export declare type SYNC_MODE_UPDATE = 70;
export declare type StreamingEventType = CONNECTION_ESTABLISHED | OCCUPANCY_PRI | OCCUPANCY_SEC | STREAMING_STATUS | SSE_CONNECTION_ERROR | TOKEN_REFRESH | ABLY_ERROR | SYNC_MODE_UPDATE;
export declare type StreamingEvent = {
    e: StreamingEventType;
    d?: number;
    t: number;
};
export declare type TelemetryUsageStatsPayload = {
    lS: LastSync;
    mL: MethodLatencies;
    mE: MethodExceptions;
    hE: HttpErrors;
    hL: HttpLatencies;
    tR: number;
    aR: number;
    iQ: number;
    iDe: number;
    iDr: number;
    spC: number;
    seC: number;
    skC: number;
    sL?: number;
    eQ: number;
    eD: number;
    sE: Array<StreamingEvent>;
    t?: Array<string>;
};
/**
 * Telemetry config stats
 */
export declare type STANDALONE_ENUM = 0;
export declare type CONSUMER_ENUM = 1;
export declare type CONSUMER_PARTIAL_ENUM = 2;
export declare type OperationMode = STANDALONE_ENUM | CONSUMER_ENUM | CONSUMER_PARTIAL_ENUM;
export declare type OPTIMIZED_ENUM = 0;
export declare type DEBUG_ENUM = 1;
export declare type ImpressionsMode = OPTIMIZED_ENUM | DEBUG_ENUM;
export declare type RefreshRates = {
    sp: number;
    se?: number;
    ms?: number;
    im: number;
    ev: number;
    te: number;
};
export declare type UrlOverrides = {
    s: boolean;
    e: boolean;
    a: boolean;
    st: boolean;
    t: boolean;
};
export declare type TelemetryConfigStats = {
    oM: OperationMode;
    st: 'memory' | 'redis' | 'pluggable' | 'localstorage';
    aF: number;
    rF: number;
    t?: Array<string>;
};
export declare type TelemetryConfigStatsPayload = TelemetryConfigStats & {
    sE: boolean;
    rR: RefreshRates;
    uO: UrlOverrides;
    iQ: number;
    eQ: number;
    iM: ImpressionsMode;
    iL: boolean;
    hP: boolean;
    tR: number;
    tC?: number;
    nR: number;
    i?: Array<string>;
    uC: number;
};
