import { ISegmentsCacheSync, ISplitsCacheSync, ITelemetryCacheSync } from '../../storages/types';
import { TelemetryUsageStatsPayload, TelemetryConfigStatsPayload, TelemetryConfigStats } from './types';
import { ISettings, SDKMode } from '../../types';
import { ISdkFactoryContextSync } from '../../sdkFactory/types';
/**
 * Converts data from telemetry cache into /metrics/usage request payload.
 */
export declare function telemetryCacheStatsAdapter(telemetry: ITelemetryCacheSync, splits: ISplitsCacheSync, segments: ISegmentsCacheSync): {
    isEmpty(): boolean;
    clear(): void;
    state(): TelemetryUsageStatsPayload;
};
export declare function getTelemetryConfigStats(mode: SDKMode, storageType: string): TelemetryConfigStats;
/**
 * Converts data from telemetry cache and settings into /metrics/config request payload.
 */
export declare function telemetryCacheConfigAdapter(telemetry: ITelemetryCacheSync, settings: ISettings): {
    isEmpty(): boolean;
    clear(): void;
    state(): TelemetryConfigStatsPayload;
};
/**
 * Submitter that periodically posts telemetry data
 */
export declare function telemetrySubmitterFactory(params: ISdkFactoryContextSync): import("../types").ISyncTask<[], any> | undefined;
