import { ISplitsEventEmitter } from '../../../readiness/types';
import { ISplitsCacheSync } from '../../../storages/types';
import { Backoff } from '../../../utils/Backoff';
import { ISegmentsSyncTask, ISplitsSyncTask } from '../../polling/types';
import { ISplitKillData, ISplitUpdateData } from '../SSEHandler/types';
import { IUpdateWorker } from './types';
/**
 * SplitsUpdateWorker class
 */
export declare class SplitsUpdateWorker implements IUpdateWorker {
    private readonly splitsCache;
    private readonly splitsSyncTask;
    private readonly splitsEventEmitter;
    private readonly segmentsSyncTask?;
    private maxChangeNumber;
    private handleNewEvent;
    readonly backoff: Backoff;
    /**
     * @param {Object} splitsCache splits data cache
     * @param {Object} splitsSyncTask task for syncing splits data
     * @param {Object} splitsEventEmitter emitter for splits data events
     */
    constructor(splitsCache: ISplitsCacheSync, splitsSyncTask: ISplitsSyncTask, splitsEventEmitter: ISplitsEventEmitter, segmentsSyncTask?: ISegmentsSyncTask);
    __handleSplitUpdateCall(): void;
    /**
     * Invoked by NotificationProcessor on SPLIT_UPDATE event
     *
     * @param {number} changeNumber change number of the SPLIT_UPDATE notification
     */
    put({ changeNumber }: Pick<ISplitUpdateData, 'changeNumber'>): void;
    /**
     * Invoked by NotificationProcessor on SPLIT_KILL event
     *
     * @param {number} changeNumber change number of the SPLIT_UPDATE notification
     * @param {string} splitName name of split to kill
     * @param {string} defaultTreatment default treatment value
     */
    killSplit({ changeNumber, splitName, defaultTreatment }: ISplitKillData): void;
}
