import { IMySegmentsUpdateData, IMySegmentsUpdateV2Data, ISegmentUpdateData, ISplitUpdateData, ISplitKillData } from './SSEHandler/types';
import { ITask } from '../types';
import { ISegmentsSyncTask } from '../polling/types';
import { IEventEmitter } from '../../types';
import { ControlType } from './constants';
export declare type PUSH_SUBSYSTEM_UP = 'PUSH_SUBSYSTEM_UP';
export declare type PUSH_SUBSYSTEM_DOWN = 'PUSH_SUBSYSTEM_DOWN';
export declare type PUSH_NONRETRYABLE_ERROR = 'PUSH_NONRETRYABLE_ERROR';
export declare type PUSH_RETRYABLE_ERROR = 'PUSH_RETRYABLE_ERROR';
export declare type MY_SEGMENTS_UPDATE = 'MY_SEGMENTS_UPDATE';
export declare type MY_SEGMENTS_UPDATE_V2 = 'MY_SEGMENTS_UPDATE_V2';
export declare type SEGMENT_UPDATE = 'SEGMENT_UPDATE';
export declare type SPLIT_KILL = 'SPLIT_KILL';
export declare type SPLIT_UPDATE = 'SPLIT_UPDATE';
export declare type CONTROL = 'CONTROL';
export declare type OCCUPANCY = 'OCCUPANCY';
export declare type IPushEvent = PUSH_SUBSYSTEM_UP | PUSH_SUBSYSTEM_DOWN | PUSH_NONRETRYABLE_ERROR | PUSH_RETRYABLE_ERROR | MY_SEGMENTS_UPDATE | MY_SEGMENTS_UPDATE_V2 | SEGMENT_UPDATE | SPLIT_UPDATE | SPLIT_KILL | ControlType.STREAMING_RESET;
declare type IParsedData<T extends IPushEvent> = T extends MY_SEGMENTS_UPDATE ? IMySegmentsUpdateData : T extends MY_SEGMENTS_UPDATE_V2 ? IMySegmentsUpdateV2Data : T extends SEGMENT_UPDATE ? ISegmentUpdateData : T extends SPLIT_UPDATE ? ISplitUpdateData : T extends SPLIT_KILL ? ISplitKillData : undefined;
/**
 * EventEmitter used as Feedback Loop between the SyncManager and PushManager,
 * where the latter pushes messages and the former consumes it
 */
export interface IPushEventEmitter extends IEventEmitter {
    once<T extends IPushEvent>(event: T, listener: (parsedData: IParsedData<T>, channel: T extends MY_SEGMENTS_UPDATE ? string : undefined) => void): this;
    on<T extends IPushEvent>(event: T, listener: (parsedData: IParsedData<T>, channel: T extends MY_SEGMENTS_UPDATE ? string : undefined) => void): this;
    emit<T extends IPushEvent>(event: T, parsedData?: IParsedData<T>, channel?: T extends MY_SEGMENTS_UPDATE ? string : undefined): boolean;
}
/**
 * PushManager
 */
export interface IPushManager extends ITask, IPushEventEmitter {
    add(userKey: string, mySegmentsSyncTask: ISegmentsSyncTask): void;
    remove(userKey: string): void;
}
export {};
