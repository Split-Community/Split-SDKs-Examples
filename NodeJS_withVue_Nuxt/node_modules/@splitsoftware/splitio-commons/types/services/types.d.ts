export declare type IRequestOptions = {
    method?: string;
    headers?: Record<string, string>;
    body?: string;
};
export declare type IResponse = {
    ok: boolean;
    status: number;
    json: () => Promise<any>;
    text: () => Promise<string>;
};
export declare type NetworkError = Error & {
    statusCode?: number;
};
export declare type IFetch = (url: string, options?: IRequestOptions) => Promise<IResponse>;
export declare type IHealthCheckAPI = () => Promise<boolean>;
export declare type ISplitHttpClient = (url: string, options?: IRequestOptions, latencyTracker?: (error?: NetworkError) => void, logErrorsAsInfo?: boolean) => Promise<IResponse>;
export declare type IFetchAuth = (userKeys?: string[]) => Promise<IResponse>;
export declare type IFetchSplitChanges = (since: number, noCache?: boolean) => Promise<IResponse>;
export declare type IFetchSegmentChanges = (since: number, segmentName: string, noCache?: boolean) => Promise<IResponse>;
export declare type IFetchMySegments = (userMatchingKey: string, noCache?: boolean) => Promise<IResponse>;
export declare type IPostEventsBulk = (body: string, headers?: Record<string, string>) => Promise<IResponse>;
export declare type IPostTestImpressionsBulk = (body: string, headers?: Record<string, string>) => Promise<IResponse>;
export declare type IPostTestImpressionsCount = (body: string, headers?: Record<string, string>) => Promise<IResponse>;
export declare type IPostMetricsConfig = (body: string) => Promise<IResponse>;
export declare type IPostMetricsUsage = (body: string) => Promise<IResponse>;
export interface ISplitApi {
    getSdkAPIHealthCheck: IHealthCheckAPI;
    getEventsAPIHealthCheck: IHealthCheckAPI;
    fetchAuth: IFetchAuth;
    fetchSplitChanges: IFetchSplitChanges;
    fetchSegmentChanges: IFetchSegmentChanges;
    fetchMySegments: IFetchMySegments;
    postEventsBulk: IPostEventsBulk;
    postTestImpressionsBulk: IPostTestImpressionsBulk;
    postTestImpressionsCount: IPostTestImpressionsCount;
    postMetricsConfig: IPostMetricsConfig;
    postMetricsUsage: IPostMetricsUsage;
}
interface EventSourceEventMap {
    'error': Event;
    'message': MessageEvent;
    'open': Event;
}
interface IEventSource {
    addEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: IEventSource, ev: EventSourceEventMap[K]) => any): void;
    close(): void;
}
export declare type IEventSourceConstructor = new (url: string, eventSourceInitDict?: any) => IEventSource;
export {};
