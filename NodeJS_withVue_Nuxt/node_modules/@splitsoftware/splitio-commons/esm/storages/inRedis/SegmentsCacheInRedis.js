import { isNaNNumber } from '../../utils/lang';
import { LOG_PREFIX } from '../inLocalStorage/constants';
var SegmentsCacheInRedis = /** @class */ (function () {
    function SegmentsCacheInRedis(log, keys, redis) {
        this.log = log;
        this.redis = redis;
        this.keys = keys;
    }
    SegmentsCacheInRedis.prototype.addToSegment = function (name, segmentKeys) {
        var segmentKey = this.keys.buildSegmentNameKey(name);
        if (segmentKeys.length) {
            return this.redis.sadd(segmentKey, segmentKeys).then(function () { return true; });
        }
        else {
            return Promise.resolve(true);
        }
    };
    SegmentsCacheInRedis.prototype.removeFromSegment = function (name, segmentKeys) {
        var segmentKey = this.keys.buildSegmentNameKey(name);
        if (segmentKeys.length) {
            return this.redis.srem(segmentKey, segmentKeys).then(function () { return true; });
        }
        else {
            return Promise.resolve(true);
        }
    };
    SegmentsCacheInRedis.prototype.isInSegment = function (name, key) {
        return this.redis.sismember(this.keys.buildSegmentNameKey(name), key).then(function (matches) { return matches !== 0; });
    };
    SegmentsCacheInRedis.prototype.setChangeNumber = function (name, changeNumber) {
        return this.redis.set(this.keys.buildSegmentTillKey(name), changeNumber + '').then(function (status) { return status === 'OK'; });
    };
    SegmentsCacheInRedis.prototype.getChangeNumber = function (name) {
        var _this = this;
        return this.redis.get(this.keys.buildSegmentTillKey(name)).then(function (value) {
            var i = parseInt(value, 10);
            return isNaNNumber(i) ? -1 : i;
        }).catch(function (e) {
            _this.log.error(LOG_PREFIX + 'Could not retrieve changeNumber from segments storage. Error: ' + e);
            return -1;
        });
    };
    SegmentsCacheInRedis.prototype.registerSegments = function (segments) {
        if (segments.length) {
            return this.redis.sadd(this.keys.buildRegisteredSegmentsKey(), segments).then(function () { return true; });
        }
        else {
            return Promise.resolve(true);
        }
    };
    SegmentsCacheInRedis.prototype.getRegisteredSegments = function () {
        return this.redis.smembers(this.keys.buildRegisteredSegmentsKey());
    };
    // @TODO remove/review. It is not being used.
    SegmentsCacheInRedis.prototype.clear = function () {
        return this.redis.flushdb().then(function (status) { return status === 'OK'; });
    };
    return SegmentsCacheInRedis;
}());
export { SegmentsCacheInRedis };
