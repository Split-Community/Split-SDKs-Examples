import { findLatencyIndex } from '../findLatencyIndex';
import { getTelemetryConfigStats } from '../../sync/submitters/telemetrySubmitter';
import { CONSUMER_MODE, STORAGE_REDIS } from '../../utils/constants';
var TelemetryCacheInRedis = /** @class */ (function () {
    /**
     * Create a Telemetry cache that uses Redis as storage.
     * @param log  Logger instance.
     * @param keys  Key builder.
     * @param redis  Redis client.
     */
    function TelemetryCacheInRedis(log, keys, redis) {
        this.log = log;
        this.keys = keys;
        this.redis = redis;
    }
    TelemetryCacheInRedis.prototype.recordLatency = function (method, latencyMs) {
        var _a = this.keys.buildLatencyKey(method, findLatencyIndex(latencyMs)).split('::'), key = _a[0], field = _a[1];
        return this.redis.hincrby(key, field, 1)
            .catch(function () { });
    };
    TelemetryCacheInRedis.prototype.recordException = function (method) {
        var _a = this.keys.buildExceptionKey(method).split('::'), key = _a[0], field = _a[1];
        return this.redis.hincrby(key, field, 1)
            .catch(function () { });
    };
    TelemetryCacheInRedis.prototype.recordConfig = function () {
        var _a = this.keys.buildInitKey().split('::'), key = _a[0], field = _a[1];
        var value = JSON.stringify(getTelemetryConfigStats(CONSUMER_MODE, STORAGE_REDIS));
        return this.redis.hset(key, field, value).catch(function () { });
    };
    return TelemetryCacheInRedis;
}());
export { TelemetryCacheInRedis };
