import { __extends } from "tslib";
import { KeyBuilder } from './KeyBuilder';
var methodNames = {
    t: 'treatment',
    ts: 'treatments',
    tc: 'treatmentWithConfig',
    tcs: 'treatmentsWithConfig',
    tr: 'track'
};
var KeyBuilderSS = /** @class */ (function (_super) {
    __extends(KeyBuilderSS, _super);
    function KeyBuilderSS(prefix, metadata) {
        var _this = _super.call(this, prefix) || this;
        _this.metadata = metadata;
        return _this;
    }
    KeyBuilderSS.prototype.buildRegisteredSegmentsKey = function () {
        return this.prefix + ".segments.registered";
    };
    KeyBuilderSS.prototype.buildImpressionsKey = function () {
        return this.prefix + ".impressions";
    };
    KeyBuilderSS.prototype.buildEventsKey = function () {
        return this.prefix + ".events";
    };
    KeyBuilderSS.prototype.searchPatternForSplitKeys = function () {
        return this.buildSplitKeyPrefix() + "*";
    };
    /* Telemetry keys */
    KeyBuilderSS.prototype.buildLatencyKey = function (method, bucket) {
        return this.prefix + ".telemetry.latencies::" + this.buildVersionablePrefix() + "/" + methodNames[method] + "/" + bucket;
    };
    KeyBuilderSS.prototype.buildExceptionKey = function (method) {
        return this.prefix + ".telemetry.exceptions::" + this.buildVersionablePrefix() + "/" + methodNames[method];
    };
    KeyBuilderSS.prototype.buildInitKey = function () {
        return this.prefix + ".telemetry.init::" + this.buildVersionablePrefix();
    };
    KeyBuilderSS.prototype.buildVersionablePrefix = function () {
        return this.metadata.s + "/" + this.metadata.n + "/" + this.metadata.i;
    };
    return KeyBuilderSS;
}(KeyBuilder));
export { KeyBuilderSS };
