import { Engine } from './Engine';
import { thenable } from '../utils/promise/thenable';
import * as LabelsConstants from '../utils/labels';
import { CONTROL } from '../utils/constants';
var treatmentException = {
    treatment: CONTROL,
    label: LabelsConstants.EXCEPTION,
    config: null
};
function treatmentsException(splitNames) {
    var evaluations = {};
    splitNames.forEach(function (splitName) {
        evaluations[splitName] = treatmentException;
    });
    return evaluations;
}
export function evaluateFeature(log, key, splitName, attributes, storage) {
    var stringifiedSplit;
    try {
        stringifiedSplit = storage.splits.getSplit(splitName);
    }
    catch (e) {
        // Exception on sync `getSplit` storage. Not possible ATM with InMemory and InLocal storages.
        return treatmentException;
    }
    if (thenable(stringifiedSplit)) {
        return stringifiedSplit.then(function (result) { return getEvaluation(log, result, key, attributes, storage); }).catch(
        // Exception on async `getSplit` storage. For example, when the storage is redis or
        // pluggable and there is a connection issue and we can't retrieve the split to be evaluated
        function () { return treatmentException; });
    }
    return getEvaluation(log, stringifiedSplit, key, attributes, storage);
}
export function evaluateFeatures(log, key, splitNames, attributes, storage) {
    var stringifiedSplits;
    try {
        stringifiedSplits = storage.splits.getSplits(splitNames);
    }
    catch (e) {
        // Exception on sync `getSplits` storage. Not possible ATM with InMemory and InLocal storages.
        return treatmentsException(splitNames);
    }
    return (thenable(stringifiedSplits)) ?
        stringifiedSplits.then(function (splits) { return getEvaluations(log, splitNames, splits, key, attributes, storage); })
            .catch(function () {
            // Exception on async `getSplits` storage. For example, when the storage is redis or
            // pluggable and there is a connection issue and we can't retrieve the split to be evaluated
            return treatmentsException(splitNames);
        }) :
        getEvaluations(log, splitNames, stringifiedSplits, key, attributes, storage);
}
function getEvaluation(log, stringifiedSplit, key, attributes, storage) {
    var evaluation = {
        treatment: CONTROL,
        label: LabelsConstants.SPLIT_NOT_FOUND,
        config: null
    };
    if (stringifiedSplit) {
        var splitJSON_1 = JSON.parse(stringifiedSplit);
        var split_1 = Engine.parse(log, splitJSON_1, storage);
        evaluation = split_1.getTreatment(key, attributes, evaluateFeature);
        // If the storage is async and the evaluated split uses segment, evaluation is thenable
        if (thenable(evaluation)) {
            return evaluation.then(function (result) {
                result.changeNumber = split_1.getChangeNumber();
                result.config = splitJSON_1.configurations && splitJSON_1.configurations[result.treatment] || null;
                return result;
            });
        }
        else {
            evaluation.changeNumber = split_1.getChangeNumber(); // Always sync and optional
            evaluation.config = splitJSON_1.configurations && splitJSON_1.configurations[evaluation.treatment] || null;
        }
    }
    return evaluation;
}
function getEvaluations(log, splitNames, splits, key, attributes, storage) {
    var result = {};
    var thenables = [];
    splitNames.forEach(function (splitName) {
        var evaluation = getEvaluation(log, splits[splitName], key, attributes, storage);
        if (thenable(evaluation)) {
            thenables.push(evaluation.then(function (res) {
                result[splitName] = res;
            }));
        }
        else {
            result[splitName] = evaluation;
        }
    });
    return thenables.length > 0 ? Promise.all(thenables).then(function () { return result; }) : result;
}
